,Title,Categories,Tags,Replies,Post,Comment
0,About the Java FAQ category,"Get Help,Git",,1,"
Java has been one of the world’s most popular programming languages for over twenty years, favored in particular by large businesses for its reliability, compatibility, and performance at scale. This forum category covers the Codecademy courses on Java.
",
1,FAQ: Learn Java: Methods - Review,"Get Help,Git",,58,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Review” exercise from the lesson “Learn Java: Methods”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Review


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
In step one of this activity, where it asks you to make a checkBalance function, it throws an error that says, “Oops! The test returned an error. Maybe you have a syntax error, or a typo. See full error.” When I click “See full error” it says, “Cannot read property “0” of undefined.” What does this mean? What do I have to do to fix the error?

Why on method deposit is VOID and on method withdraw is INT
  public **void** deposit(int amountToDeposit){
    balance = amountToDeposit + balance;
    System.out.println(""You just deposited "" + amountToDeposit);
  }
  
  public **int** withdraw(int amountToWithdraw){
    balance = balance - amountToWithdraw;
    System.out.println(""You just withdrew "" + amountToWithdraw);
    return amountToWithdraw;

The deposit method is not returning any value, which means the return on the method is VOID.
On the other hand, the withdraw method will return amountToWithdraw, an int, so the return on the method is an INT.

The program is telling me that I completed all the steps, but I am seeing errors in the return instead of my printed messages.  For every method that I call from the main method, I get an error like the below:
SavingsAccount.java:31: error: non-static method checkBalance() cannot be referenced from a static context
**    SavingsAccount.checkBalance();**
Here is my main method:
**  public static void main(String args){
SavingsAccount savings = new SavingsAccount(2000);
SavingsAccount.checkBalance();

SavingsAccount.withdraw(300);

SavingsAccount.checkBalance();

}       **
Am I writing something incorrectly?

Late response but this is because you are calling SavingsAccount rather than savings. The new savings account created in the main method is called savings so when checking the balance and whatnot you will want to call savings.checkBalance();
Hope this helps!

Hey, so I am having trouble with step one of this project.  I  keep getting a dozen errors  after I  put  my code in,
/*********************/
   public void checkBalance(){
    System.out.println(""Hello!"");
    System.out.println(""Your balance is "");
    }
    /*********************/

I noticed in the hint that the method title was blue. I dont recall CC teaching how to do that unless you were starting off the code. But does that have something to do with it?
Edit: Never mind i found the issue i didnt follow the instructions

So I was playing around a bit on the “Review” section and I tried to add a toString() method. However, the program produces the following error:
SavingsAccount.java:26: error: unreachable statement
return ""You are now viewing your savings account. Your balance is "" + balance;
^
1 error
Here is my program. What am I doing wrong and how can I fix it?
/*********************/
public class SavingsAccount {
int balance;
public SavingsAccount(int initialBalance){
balance = initialBalance;
}
public void checkBalance(){
System.out.println(“Hello!”);
System.out.println(""Your balance is ""+ balance);
}
public void deposit(int amountToDeposit){
balance = balance + amountToDeposit;
System.out.println(""You just deposited "" + amountToDeposit);
}
public void withdraw(int amountToWithdraw){
balance = balance - amountToWithdraw;
System.out.println(""You just withdrew "" + amountToWithdraw);
}
public String toString(){
return “Accessing savings account…”;
return ""You are now viewing your savings account. Your balance is "" + balance;
}
public static void main(String args){
SavingsAccount savings = new SavingsAccount(2000);
//Check balance:
savings.checkBalance();

//Withdrawing:
savings.withdraw(300);

//Check balance:
savings.checkBalance();

//Deposit:
savings.deposit(600);

//Check balance:
savings.checkBalance();

//Deposit:
savings.deposit(600);

//Check balance:
savings.checkBalance();

System.out.println(savings);

}
}
/*********************/

After some experimentation it seems to me that the issue is that you’re providing the information you want in the string, instead of a reference to a string object. I got an error when I tried to use two return commands, I’m guessing that after running the first return command, it returns to the main and the objects in the constructor method are no longer accessible, hence you can only have one return command.
Here’s how I made it work. You’ll notice that the \r creates a linebreak, so we don’t need two separate strings.
public String toString(){
String message = ""Accessing Savings Account \rYou are now viewing your savings account. Your balance is "" + balance;
return message;
}

What was it through ??

Hello everyone maybe i cant read directions or something, but i am really so confused on what to do on the first step each time i think i have it right there is always some sort of error! please help );

Hello, @hype1804869827. Welcome to the forum! Which exercise are you on specifically? If you can post a link to it, I’ll try to be of some assistance.

hello @midlindner i really appreciate you taking your time to help me ! I’m having trouble with step one of this project ! Simply just stuck maybe i cant understand the directions or something.

This instruction?

In between the constructor and the main() method, add a method called advertise() to the Store class. It should be accessible by other classes, and should have no output.
You can leave the body of the method empty.


I’m sorry, i’m not being clear enough it’s the 9th project aka the "" Learn Java: Methods - Review "" where we are building our own savings account, but the very first step on this one.
Dont know why i keep getting this error i know it has to do with maybe a missing “(” or “{” but not sure if maybe im overseeing something.
/SavingsAccount.java:31: error: illegal start of expression
public void checkBalance() {
^

Ah. Okay. Got it. First, when you post code, it will help me if you click the </> button first, and then paste your code in the space provided. That way I can see how everything is formatted, and even copy and paste it, to run it myself, and help locate errors. Where did you locate the function declaration, and do you have a closing }? The empty function should look like this:
public void checkBalance() {

}

From the error, it appears you may have placed the method inside of the main() method. It needs to be outside the method.

You wont believe it, but i just figured it out haha im so sorry, but i honestly really do i appreciate you taking your time to help me out also will do for next time, rookie mistakes );

No worries. Glad you figured it out! 

And what that this mean? For me the two statement are the same. Plese be more specific.




 victorsutton:

unreachable statement


It’s because of the two return statements in your toString() method.
As the error message said the second return statement is “unreachable” because the first return already exits the method. When you delete or commenting-out one of the lines with a return statement the program will work.
"
2,FAQ: Hello World: Java - Introduction to Java,"Get Help,Git",hello-world,4,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Introduction to Java” exercise from the lesson “Hello World: Java”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Introduction to Java


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
Hey! how do I check the java version that is being used in this tutorial ?

Hello, @object3757487760.
In a lesson where you can type in the console, you can execute java --version.

image.png709×218 5.07 KB


use big brain
               
"
3,FAQ: Java: Introduction to Classes - Classes: Multiple Fields,"Get Help,Git",,7,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Classes: Multiple Fields” exercise from the lesson “Java: Introduction to Classes”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Classes: Multiple Fields


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
Why do we need to declare two different variables, first outside the class and then inside the class, and then equate them in the class, to represent the same data?
Why not declare them at once directly in the class parameter declaration?
Refer to this example : 

The thing is, you can do whatever you want in a constructor, just like so far we did whatever we wanted in the main() method. Remember when in the constructor, we did a System.out.println(“something”)?
So far, all the examples we’ve used, we made the constructor so that it takes as many parameters as the class has fields, and it puts these parameters in these fields.
It sounds rather logical, and it’s actually common. But that is not at all an obligation.
For example, you might not want to have to set all the fields at once when you create a new object. Maybe you’ll set them later, not with the constructor. Or maybe the constructor will just give them a value by itself without taking a parameter, like, the constructor says that the price is 2.00, and it doesn’t take a price parameter.
You can do pretty much what you want. Giving a value of all the fields of the class, will not always be what you want to do. Therefore, the language must not assume that it is what you want to do. Therefore, if it is what you want to do, you must write it out entirely.

The first declarations are defining the characteristics of the Car class. A Car has a color, is running or not, and has a velocity. Even though Car is defined, there is no Car object created yet.
The constructor is called when an instance of the Car class is created. The constructor definition takes the parameters passed to it and assigns them to the variables in this particular Car object. You can create multiple Car objects, each with different colors, isRunning values, and velocities like this:
Car blueCar = new Car(“Blue”, true, 34.5);
Car redCar = new Car(“Red”, true, 90.0);
Car junkCar = new Car(“Rust”, false, 0.0);

Hello. This question is in regards to Classes Multiple fields.
I completed the task and I got stuck. I selected to reveal the solution which to my surprise seemed exactly the same as my input. I then redid it and screenshotted to compare. And I can still not see any difference. What am I missing?




[Album] Imgur










[Album] Imgur






Hi. I think you need to capitalize the S on Shop.

Why don’t we use the constructor parameters name same as the variable field names?? I think it would be a lot more readable and understandable rather than using different names for the same thing.
"
4,FAQ: Java: Introduction to Classes - Classes: Constructors,"Get Help,Git",,24,"

This community-built FAQ covers the “Classes: Constructors” exercise from the lesson “Java: Introduction to Classes”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Classes: Constructors


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
In exercise 3/8, why does it display Store@6bc7c054
in the console after running the code?

Hi betarockstar, did u get the answer on your question?

I going to assume he did but, why does that show up?

Please explain the difference between Constructors and Methods

Hi betarockstar69942 - Store refers to the name of the class and @6b7c045 refers to the memory.

Can anyone tell me what instances mean? In a simplified way

Object  − Objects have states and behaviors. Example: A dog has states - color, name, breed as well as behaviors – wagging the tail, barking, eating. An object is an instance of a class.
https://www.tutorialspoint.com/java/java_object_classes.htm
Kinda roundabout but this helped me get a better Idea of what it is

Hello everyone, I can’t understand why the string with the name of the class and the corresponding memory is printed.
This action is not specified in the program and also in the lesson…
Lastly is possible have the same result without this line?
Thank you!

What is the use of ‘new’ in this program?

I’m don’t quite understand why “I am inside the constructor method.” was printed out.
I believe I only created a new instance and did not ask anything to be printed out in Main.

When you create a ‘new’ instance of a class, the code inside the constructor method is executed. The constructor for the ‘Store’ class only has one line of code. That line prints the message you referred to. The exercise was only illustrating how the control flow is passed around inside a class. The next exercise will cover how constructor methods are typically used to create an instance of a class.

Thanks for the reply! It’s starting to click.

Hi!
Is there a table / map / comparison available to understand the following words and differentiate between them?

class
constructor
instance
method
object
type
variable

Thank you for the help!

I don’t understand any of this lesson, can someone please try to explain it to me? I don’t really get what classes or instances are, and the constructor method is really confusing me.

Can someone explain what is Method and Constructor? What is the difference between them?

@coolgirl123
@aydanshirin
Hey guys, I’m very new to this so I may be wrong but my understanding of classes and instances, methods and constructors is this;
Class: Think of the class as a box. Within a program your coding you might have 10 boxes. Each box is used to define and do different things within the program. (For example, if your writing a program for a university you might have a class for students, a class for teachers, a class for courses, a class for alumni, etc.) So a class is really a set of data and instructions within your code that relates to one thing. (Students, teachers, etc)
Instance: So if we have a class for students we’ll need to store data in this class about each student at the university. Lets say the data we have for each student consists of their name, age and exam results. Within the CLASS we’ll need to our data as variables. (string for name, int for age and double for exam results) Within the METHOD we then create instances. Think of the instance as each individual student at the university. The variables are student name , age and exam results whilst the instance is the individual student. (i. .eTom Smith, 21, 71.23) If you had 100 students at the university you’d have 3 variables (student name, age, exam results) and 100 instances. (1 for each student)
Method & Constructor: Think of the method the same way as you would a cooking recipe. The method tells you what to do with the ingredients. The ingredients are our instances. Now when we read a recipe we as humans know what the ingredients are and what the amounts mean. (e.g. 2 eggs, 300g flour, 200ml milk - we know what all of these things are so all we need are the different ingredients and we can follow the method to make our meal) Computers don’t know what the ingredients (instances) are! So even if we enter our different instances (i.e. data) into our code and give perfect instructions of what to do with the instances it won’t know what egg, flour or milk means. This is why we have a constructor. The constructor is created within the class to tell the program what an egg is, what milk is, etc.
In the previous example of the university within our class of students we have 3 variables (student name, age, exam results) and 100 instances (one for each student) Just like the cooking recipe the program doesn’t know what a student name, age or exam result is. So we make a constructor to tell the program the data type for each variable. (Student name is a string, age is an integer and exam result is a double) Now that we’ve defined each variable’s data type in the constructor, when the program takes each instance (individual student) we enter into the code and applies the set of instructions we’ve outlined in the method, it knows what the data actually means! (because of our constructor)
Hope that helps! Probably made more questions than gave answers but hopefully there’s something in there that makes sense. Also please if any of the above is incorrect (which is very well may be) please feel free to point out where I’m wrong. I’m amateur and learning!

how does the line Store lemonade = new Store() work ? Like what happens during the execution of this line and how does the print statement in the constructor gets printed using this code?

Can anyone please explain why we are getting the below
Store@2aae9190
Store@2f333739
Store@77468bd9
Store@12bb4df8
I run the code below in main. Someone said that is showing memory, but what memory are we referring to?. Thanks for your help.
Store lemonadeStand = new Store();

Store fruit = new Store();

Store banana = new Store();

Store orange = new Store();

System.out.println(lemonadeStand);

System.out.println(fruit);

System.out.println(banana);

System.out.println(orange);

new represents a keyword that is used to tell the program that a new instance is created
"
5,FAQ: Learn Java: Loops - Incrementing While Loops,"Get Help,Git",,3,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Incrementing While Loops” exercise from the lesson “Learn Java: Loops”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Incrementing While Loops


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
You can also find further discussion and get answers to your questions over in #get-help.
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head to #get-help and #community:tips-and-resources. If you are wanting feedback or inspiration for a project, check out #project.
Looking for motivation to keep learning? Join our wider discussions in #community
Learn more about how to use this guide.
Found a bug? Report it online, or post in #community:Codecademy-Bug-Reporting
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
Third exercise says that The  1  in this statement should correspond with the current value of  cupsOfCoffee . When  cupsOfCoffee  is  100 , this should be printed: “Fry drinks cup of coffee #100”.
I was trying:
while (cupsOfCoffee <= 100){
System.out.println(“Fry drinks cup of coffee #1”);
cupsOfCoffee++;
}
Which was obviously printing only “Fry drinks cup of coffee #1” , 100 times.
So I changed to:
while (cupsOfCoffee <= 100){
  System.out.println(""Fry drinks cup of coffee "" + cupsOfCoffee);

  cupsOfCoffee++; 

}
And this works! Increasing the fry drinks cup of coffee by 1 in every line. The exercise still says something is wrong??? I cant press next even though my code is right. Help?

Oh I found the problem, I was missing the #
System.out.println(“Fry drinks cup of coffee #” + cupsOfCoffee);
I feel dumb now.
"
6,FAQ: Learn Java: Variables - doubles,"Get Help,Git",variable-data-type,7,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “doubles” exercise from the lesson “Learn Java: Variables”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise doubles


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
Is the ‘double’ datatype in java similar to the ‘float’ datatype in python?

Why do I need int? Can I just store everything in double?

I’m not an expert in Java but I’m learning.  However, I think as with most things in Java, there are multiple ways to get the same answer, it just seems cleaner to write int a = 1; rather double a = 1;
However, I’m sure there is a specific reason why you would have to use an int over a double at some point.  I believe double cannot be negative either.
Hope that helps.

I’ve just read that using “double” takes up more memory than using “int”.  Memory isn’t important me at this early stage but maybe later on it becomes relevant.

I’m totally lost. What do the instructions asking me to do? this is what I wrote but I know it’s wrong. Please help this is so frustrating to not be able to learn such a simple language that everyone else knows
public class MarketShare {
public static void main(String args) {
// doubles can have decimal places:
androidShare = 81.7;
//doubles can have values bigger than what an int could hold:
double gdp = 1237700000;

System.out.println(""androidShare"");
}

}
I don’t know why all that looks weird above. I just looked a the solution and it doesn’t even make sense. what are the directions even asking me to do?
public class MarketShare {
public static void main(String args) {
// doubles can have decimal places:
androidShare = 81.7;
//doubles can have values bigger than what an int could hold:
double gdp = 1237700000;

System.out.println(""androidShare"");
}

}

Greetings! Take the quotations from around ‘androidShare’ in the println and see if that works 
"
7,FAQ: Learn Java: Arrays - Get Element By Index,"Get Help,Git",,8,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Get Element By Index” exercise from the lesson “Learn Java: Arrays”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Get Element By Index


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
You can also find further discussion and get answers to your questions over in #get-help.
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head to #get-help and #community:tips-and-resources. If you are wanting feedback or inspiration for a project, check out #project.
Looking for motivation to keep learning? Join our wider discussions in #community
Learn more about how to use this guide.
Found a bug? Report it online, or post in #community:Codecademy-Bug-Reporting
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
I dont understand this at all.  How does views[topicIndex] reference an actual index? Where is it getting the index number from?
public void viewTopic(int topicIndex){
views[topicIndex] = views[topicIndex] + 1;

heya sirfency! from what i realised by comparing the viewTopic method to getTopTopic, it pretty much takes the view array at the start of the class, selects an index according to what you put in the parameters when you call the method, ands adds +1 to it and stores it in the array. hope this helped!

import java.util.Arrays;

public class Newsfeed {
  
  String[] topics = {""Opinion"", ""Tech"", ""Science"", ""Health""};
  int[] views = {0, 0, 0, 0};
  
  // constructor class
  public Newsfeed(){

  }
    
  public String[] getTopics(){
    return topics;
  }
  
  public String getTopTopic(){
    String indexZero = topics[0];
    return indexZero;
  }
  
  public void viewTopic(int topicIndex){
    views[topicIndex] = views[topicIndex]+1;
     
  }

  public static void main(String[] args){
    Newsfeed sampleFeed = new Newsfeed();
    
    System.out.println(""The top topic is ""+ sampleFeed.getTopTopic());
    
    sampleFeed.viewTopic(1);
    sampleFeed.viewTopic(1);
    sampleFeed.viewTopic(3);
    sampleFeed.viewTopic(2);
    sampleFeed.viewTopic(2);
    sampleFeed.viewTopic(1);
    
    System.out.println(""The "" + sampleFeed.topics[1] + "" topic has been viewed "" + sampleFeed.views[1] + "" times!""); 
  }
}


With an output of:
The top topic is Opinion
The Tech topic has been viewed 3 times!

Because we called the method
sampleFeed.viewTopic(1);

on three separate lines in the main() method of our class. Every time we call it, it will add 1 view to the total views for the topic “tech”… so if we call it three times it means there are three views of that topic. The value "" 1 "" inside the parenthesis does not mean "" add 1 view ""… the value "" 1 "" is referring to the specific location/part of the array that we are trying to manipulate. We are manipulating the # of views at the first index of the array we created/instantiated/initialized in the main(). The value at the first index starts at zero, and the String at the first index (the subject of the news which is "" Tech "") is what the value "" 1 "" is referring to when we put it inside the parenthesis. The program will work with that index in order to keep track of everything and so that it matches up correctly.

String topics = {“Opinion”, “Tech”, “Science”, “Health”};
int views = {0, 0, 0, 0};
Confused as to how the above arrays are automatically fields in the sampleFeed instance.
Explain please.

I believe the next subject 5/8 will answer that for you.

When you get to the next exercise 5/8 I believe it will answer that for you.

Thank you so much this was really helpful this makes perfect sense.
"
8,FAQ: Java: Introduction to Classes - Classes: Instance Fields,"Get Help,Git",,4,"

This community-built FAQ covers the “Classes: Instance Fields” exercise from the lesson “Java: Introduction to Classes”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Classes: Instance Fields


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
How do we “Add some state to our store class”?

its mention in the next line:
Declare a String instance field for productType
the code also provides where you need to set the instance field:
// declare instance fields here!

and you have an example you can follow:
public class Car {
  /*
  declare fields inside the class
  by specifying the type and name
  */
  String color;

  public Car() {
    /* 
    instance fields available in
    scope of constructor method
    */
  }

  public static void main(String[] args) {
    // body of main method
  }
}


How do we avoid printing the memory location and constructor method name?
"
9,FAQ: Learn Java: Methods - Introduction,"Get Help,Git",,1,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Introduction” exercise from the lesson “Learn Java: Methods”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Introduction


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
",
10,FAQ: Debugging - Logic Errors,"Get Help,Git",,1,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Logic Errors” exercise from the lesson “Debugging”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Logic Errors


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
You can also find further discussion and get answers to your questions over in #get-help.
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head to #get-help and #community:tips-and-resources. If you are wanting feedback or inspiration for a project, check out #project.
Looking for motivation to keep learning? Join our wider discussions in #community
Learn more about how to use this guide.
Found a bug? Report it online, or post in #community:Codecademy-Bug-Reporting
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
",
11,FAQ: Learn Java: Variables - char,"Get Help,Git",,1,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “char” exercise from the lesson “Learn Java: Variables”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise char


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
",
12,FAQ: Debugging - Exceptions,"Get Help,Git",,1,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Exceptions” exercise from the lesson “Debugging”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Exceptions


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
You can also find further discussion and get answers to your questions over in #get-help.
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head to #get-help and #community:tips-and-resources. If you are wanting feedback or inspiration for a project, check out #project.
Looking for motivation to keep learning? Join our wider discussions in #community
Learn more about how to use this guide.
Found a bug? Report it online, or post in #community:Codecademy-Bug-Reporting
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
",
13,FAQ: Debugging - Introduction to Bugs,"Get Help,Git",,1,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Introduction to Bugs” exercise from the lesson “Debugging”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Introduction to Bugs


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
You can also find further discussion and get answers to your questions over in #get-help.
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head to #get-help and #community:tips-and-resources. If you are wanting feedback or inspiration for a project, check out #project.
Looking for motivation to keep learning? Join our wider discussions in #community
Learn more about how to use this guide.
Found a bug? Report it online, or post in #community:Codecademy-Bug-Reporting
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
",
14,FAQ: Inheritance and Polymorphism - Review of Inheritance and Polymorphism,"Get Help,Git",,1,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Review of Inheritance and Polymorphism” exercise from the lesson “Inheritance and Polymorphism”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Review of Inheritance and Polymorphism


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
You can also find further discussion and get answers to your questions over in #get-help.
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head to #get-help and #community:tips-and-resources. If you are wanting feedback or inspiration for a project, check out #project.
Looking for motivation to keep learning? Join our wider discussions in #community
Learn more about how to use this guide.
Found a bug? Report it online, or post in #community:Codecademy-Bug-Reporting
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
",
15,FAQ: Learn Java: Manipulating Variables - .equals(),"Get Help,Git",variable-data-type,1,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “.equals()” exercise from the lesson “Learn Java: Manipulating Variables”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise .equals()


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
",
16,FAQ: Debugging - Exception Handling,"Get Help,Git",,1,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Exception Handling” exercise from the lesson “Debugging”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Exception Handling


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
You can also find further discussion and get answers to your questions over in #get-help.
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head to #get-help and #community:tips-and-resources. If you are wanting feedback or inspiration for a project, check out #project.
Looking for motivation to keep learning? Join our wider discussions in #community
Learn more about how to use this guide.
Found a bug? Report it online, or post in #community:Codecademy-Bug-Reporting
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
",
17,FAQ: String Methods - substring(),"Get Help,Git",,1,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “substring()” exercise from the lesson “String Methods”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise substring()


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
You can also find further discussion and get answers to your questions over in #get-help.
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head to #get-help and #community:tips-and-resources. If you are wanting feedback or inspiration for a project, check out #project.
Looking for motivation to keep learning? Join our wider discussions in #community
Learn more about how to use this guide.
Found a bug? Report it online, or post in #community:Codecademy-Bug-Reporting
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
",
18,FAQ: Debugging - Review,"Get Help,Git",,1,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Review” exercise from the lesson “Debugging”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Review


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
You can also find further discussion and get answers to your questions over in #get-help.
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head to #get-help and #community:tips-and-resources. If you are wanting feedback or inspiration for a project, check out #project.
Looking for motivation to keep learning? Join our wider discussions in #community
Learn more about how to use this guide.
Found a bug? Report it online, or post in #community:Codecademy-Bug-Reporting
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
",
19,FAQ: Learn Java: Variables - Naming,"Get Help,Git",,1,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Naming” exercise from the lesson “Learn Java: Variables”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Naming


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
",
20,FAQ: Learn Java: Loops - Review,"Get Help,Git",,1,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Review” exercise from the lesson “Learn Java: Loops”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Review


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
You can also find further discussion and get answers to your questions over in #get-help.
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head to #get-help and #community:tips-and-resources. If you are wanting feedback or inspiration for a project, check out #project.
Looking for motivation to keep learning? Join our wider discussions in #community
Learn more about how to use this guide.
Found a bug? Report it online, or post in #community:Codecademy-Bug-Reporting
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
",
21,FAQ: Learn Java: Loops - For Loops,"Get Help,Git",,1,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “For Loops” exercise from the lesson “Learn Java: Loops”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise For Loops


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
You can also find further discussion and get answers to your questions over in #get-help.
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head to #get-help and #community:tips-and-resources. If you are wanting feedback or inspiration for a project, check out #project.
Looking for motivation to keep learning? Join our wider discussions in #community
Learn more about how to use this guide.
Found a bug? Report it online, or post in #community:Codecademy-Bug-Reporting
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
",
22,FAQ: Learn Java: Loops - Introduction to Loops,"Get Help,Git",,1,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Introduction to Loops” exercise from the lesson “Learn Java: Loops”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Introduction to Loops


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
You can also find further discussion and get answers to your questions over in #get-help.
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head to #get-help and #community:tips-and-resources. If you are wanting feedback or inspiration for a project, check out #project.
Looking for motivation to keep learning? Join our wider discussions in #community
Learn more about how to use this guide.
Found a bug? Report it online, or post in #community:Codecademy-Bug-Reporting
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
",
23,FAQ: Learn Java: ArrayLists - Review,"Get Help,Git",,1,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Review” exercise from the lesson “Learn Java: ArrayLists”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Review


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
You can also find further discussion and get answers to your questions over in #get-help.
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head to #get-help and #community:tips-and-resources. If you are wanting feedback or inspiration for a project, check out #project.
Looking for motivation to keep learning? Join our wider discussions in #community
Learn more about how to use this guide.
Found a bug? Report it online, or post in #community:Codecademy-Bug-Reporting
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
",
24,FAQ: Learn Java: ArrayLists - Introduction,"Get Help,Git",,1,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Introduction” exercise from the lesson “Learn Java: ArrayLists”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Introduction


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
You can also find further discussion and get answers to your questions over in #get-help.
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head to #get-help and #community:tips-and-resources. If you are wanting feedback or inspiration for a project, check out #project.
Looking for motivation to keep learning? Join our wider discussions in #community
Learn more about how to use this guide.
Found a bug? Report it online, or post in #community:Codecademy-Bug-Reporting
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
",
25,FAQ: Conditional Operators - Introduction to Conditional Operators,"Get Help,Git",,1,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Introduction to Conditional Operators” exercise from the lesson “Conditional Operators”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Introduction to Conditional Operators


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
You can also find further discussion and get answers to your questions over in #get-help.
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head to #get-help and #community:tips-and-resources. If you are wanting feedback or inspiration for a project, check out #project.
Looking for motivation to keep learning? Join our wider discussions in #community
Learn more about how to use this guide.
Found a bug? Report it online, or post in #community:Codecademy-Bug-Reporting
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
",
26,FAQ: Conditionals and Control Flow - Introduction to Control Flow,"Get Help,Git",,1,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Introduction to Control Flow” exercise from the lesson “Conditionals and Control Flow”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Introduction to Control Flow


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
You can also find further discussion and get answers to your questions over in #get-help.
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head to #get-help and #community:tips-and-resources. If you are wanting feedback or inspiration for a project, check out #project.
Looking for motivation to keep learning? Join our wider discussions in #community
Learn more about how to use this guide.
Found a bug? Report it online, or post in #community:Codecademy-Bug-Reporting
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
",
27,FAQ: Java: Introduction to Classes - Introduction to Classes,"Get Help,Git",,5,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Introduction to Classes” exercise from the lesson “Java: Introduction to Classes”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Introduction to Classes


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
I still don’t get what a class is, so could someone please explain it in a simple way?


What is a class?


Thank you for your help!

In the example given, we can access field value from main method (ex: inventoryCount) by calling method.inventoryCount for example cookieShop.inventoryCount then we get the value of 12.
But we cant access whole inventoryCount value because it it will give: error: non-static variable inventoryCount cannot be referenced from a static context. Why is that? Is there way to call/get the one of instance field value (ex: whole value of inventoryCount) rather than by calling each method?
"
28,FAQ: Learn Java: Manipulating Variables - Equals and Not Equals,"Get Help,Git",variable-data-type,4,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Equals and Not Equals” exercise from the lesson “Learn Java: Manipulating Variables”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Equals and Not Equals


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
I was trying the first part of the lesson – to test for the same number of songs.
Here is what I wrote: boolean sameNumberOfSongs = (songsA == songsB);
It gave me an error.
The correct solution: boolean sameNumberOfSongs = songsA == songsB;
Is there a convention or syntax statement why my version wouldn’t work?

Not really. That was a good answer, though the parentheses seem rather overkill.
The problem with the evaluator in that kind of practices, is that it doesn’t just focus on the results of the program. It also focuses on whether you created the variables it asked for, with the right name, and gave them the value it asked for. Thing is, in a Java program, variables created that way don’t exist after compilation. They’re replaced with positions in memory, and that doesn’t have a name.
So the evaluator cannot just look at the effects of the code you typed: that wouldn’t enable to check whether you created the variables it asked for. The evaluator analyzes what you typed in your program, and checks that it is “close enough” to a typical way to respect the instructions.
In your case, the evaluator didn’t expect that someone could add parentheses, that are not needed but perfectly valid. Wasn’t expected, therefore doesn’t count as “close enough” to the expected solution.

boolean sameNumberOfSongs = (songsA == songsB);
"
29,Need Help with the Calculator!,"Get Help,Git",general,15,"
I dont get why my code isnt working?? i get an error class?
public class Calculator {
  Calculator(){
  }
   
    public int add(int a, int b) {
      return a + b; 
    }
    public int subtract(int a, int b) {
      return a - b;
    }
    public int multiply(int x, int y) {
      return a * b;
    }
    public int divide(int a, int b) {
      return a / b;
    }
    public int modulo(int a, int b) {
      return a % b;
    }
}
public static void main(String[] args){
  Calculator myCalculator = new Calculator();
 System.out.println(myCalculator.add(5, 7));
        System.out.println(myCalculator.subtract(45, 11));
  }
}

","
the main method doesn’t seem to be part of your class.

i still get the errors when i change that?

Can you share an updated version of your code and the exercise url so i can run your code

https://www.codecademy.com/courses/learn-java/projects/basic-calculator
public class Calculator {
  Calculator(){
  }
   
    public int add(int a, int b) {
      return a + b; 
    }
    public int subtract(int a, int b) {
      return a - b;
    }
    public int multiply(int x, int y) {
      return a * b;
    }
    public int divide(int a, int b) {
      return a / b;
    }
    public int modulo(int a, int b) {
      return a % b;
    }
}
public static void main(String[] args){
  Calculator myCalculator = new Calculator();
 System.out.println(myCalculator.add(5, 7));
        System.out.println(myCalculator.subtract(45, 11));
  }
}


public class Calculator {
  Calculator(){
  }
   
    public int add(int a, int b) {
      return a + b; 
    }
    public int subtract(int a, int b) {
      return a - b;
    }
    public int multiply(int x, int y) {
      return a * b;
    }
    public int divide(int a, int b) {
      return a / b;
    }
    public int modulo(int a, int b) {
      return a % b;
    }
public static void main(String[] args){
  Calculator myCalculator = new Calculator();
 System.out.println(myCalculator.add(5, 7));
        System.out.println(myCalculator.subtract(45, 11));
  }
}


i think the error message is quite useful? Looking at the method involved:
public int multiply(int x, int y) {
      return a * b;
    }

then seeing what you named your parameters and what variable you use in the body of the method, i can see where the error comes from

do you mean that i used the wrong method?

instead of int use double?

the type declaration is fine, is was about the name of your parameter variable (x and y) and then which variable (a, b) you used within the body of the method

is that better?
public class Calculator {
  Calculator() {
   
    public int add(int a, int b) {
    return add = a + b;
    }
    public int subtract(int a, int b){
    return subtract = a - b;
    }
    public int multiply(int x, int y){
      return multiply = x * y;
    }
    public int divide(int a, int b){
      return divide = a / b;
    }
    public int modulo(int a, int b){
      return modulo = a % b;
    }
    public static main void(String[] args){
    Calculator myCalculator = new Calculator();
      System.out.println(myCalculator.add(5, 7));
      System.out.println(myCalculator.subtract(45, 11));
  }
}


i still seem to get an error?
this time its an identifier error and illegal start of expression

now you forgot to close your constructor:
Calculator() { // missing }

When you have an error, take your time. What could this error mean? Maybe i could google for additional clarification?

Hey sorry, it looks like you just need to declare the two instance variables at the top.



 java6487564020:

I dont get why my code isnt working?? i get an error class?
public class Calculator {
int a;
int b;
  Calculator(){
  }
   
    public int add(int a, int b) {
      return a + b; 
    }
    public int subtract(int a, int b) {
      return a - b;
    }
    public int multiply(int a, int b) {
      return a * b;
    }
    public int divide(int a, int b) {
      return a / b;
    }
    public int modulo(int a, int b) {
      return a % b;
    }
}
public static void main(String[] args){
  Calculator myCalculator = new Calculator();
 System.out.println(myCalculator.add(5, 7));
        System.out.println(myCalculator.subtract(45, 11));
  }
}




furthermore, here:
return divide = a / b;

you can’t assign and return at the same line. You really must take more time to understand what you are doing and not apply a trail and error approach
"
30,Need Help with the Calculator!,"Get Help,Git",general,15,"
I dont get why my code isnt working?? i get an error class?
public class Calculator {
  Calculator(){
  }
   
    public int add(int a, int b) {
      return a + b; 
    }
    public int subtract(int a, int b) {
      return a - b;
    }
    public int multiply(int x, int y) {
      return a * b;
    }
    public int divide(int a, int b) {
      return a / b;
    }
    public int modulo(int a, int b) {
      return a % b;
    }
}
public static void main(String[] args){
  Calculator myCalculator = new Calculator();
 System.out.println(myCalculator.add(5, 7));
        System.out.println(myCalculator.subtract(45, 11));
  }
}

","
the main method doesn’t seem to be part of your class.

i still get the errors when i change that?

Can you share an updated version of your code and the exercise url so i can run your code

https://www.codecademy.com/courses/learn-java/projects/basic-calculator
public class Calculator {
  Calculator(){
  }
   
    public int add(int a, int b) {
      return a + b; 
    }
    public int subtract(int a, int b) {
      return a - b;
    }
    public int multiply(int x, int y) {
      return a * b;
    }
    public int divide(int a, int b) {
      return a / b;
    }
    public int modulo(int a, int b) {
      return a % b;
    }
}
public static void main(String[] args){
  Calculator myCalculator = new Calculator();
 System.out.println(myCalculator.add(5, 7));
        System.out.println(myCalculator.subtract(45, 11));
  }
}


public class Calculator {
  Calculator(){
  }
   
    public int add(int a, int b) {
      return a + b; 
    }
    public int subtract(int a, int b) {
      return a - b;
    }
    public int multiply(int x, int y) {
      return a * b;
    }
    public int divide(int a, int b) {
      return a / b;
    }
    public int modulo(int a, int b) {
      return a % b;
    }
public static void main(String[] args){
  Calculator myCalculator = new Calculator();
 System.out.println(myCalculator.add(5, 7));
        System.out.println(myCalculator.subtract(45, 11));
  }
}


i think the error message is quite useful? Looking at the method involved:
public int multiply(int x, int y) {
      return a * b;
    }

then seeing what you named your parameters and what variable you use in the body of the method, i can see where the error comes from

do you mean that i used the wrong method?

instead of int use double?

the type declaration is fine, is was about the name of your parameter variable (x and y) and then which variable (a, b) you used within the body of the method

is that better?
public class Calculator {
  Calculator() {
   
    public int add(int a, int b) {
    return add = a + b;
    }
    public int subtract(int a, int b){
    return subtract = a - b;
    }
    public int multiply(int x, int y){
      return multiply = x * y;
    }
    public int divide(int a, int b){
      return divide = a / b;
    }
    public int modulo(int a, int b){
      return modulo = a % b;
    }
    public static main void(String[] args){
    Calculator myCalculator = new Calculator();
      System.out.println(myCalculator.add(5, 7));
      System.out.println(myCalculator.subtract(45, 11));
  }
}


i still seem to get an error?
this time its an identifier error and illegal start of expression

now you forgot to close your constructor:
Calculator() { // missing }

When you have an error, take your time. What could this error mean? Maybe i could google for additional clarification?

Hey sorry, it looks like you just need to declare the two instance variables at the top.



 java6487564020:

I dont get why my code isnt working?? i get an error class?
public class Calculator {
int a;
int b;
  Calculator(){
  }
   
    public int add(int a, int b) {
      return a + b; 
    }
    public int subtract(int a, int b) {
      return a - b;
    }
    public int multiply(int a, int b) {
      return a * b;
    }
    public int divide(int a, int b) {
      return a / b;
    }
    public int modulo(int a, int b) {
      return a % b;
    }
}
public static void main(String[] args){
  Calculator myCalculator = new Calculator();
 System.out.println(myCalculator.add(5, 7));
        System.out.println(myCalculator.subtract(45, 11));
  }
}




furthermore, here:
return divide = a / b;

you can’t assign and return at the same line. You really must take more time to understand what you are doing and not apply a trail and error approach
"
31,FAQ: Inheritance and Polymorphism - Parent Class Aspect Modifiers,"Get Help,Git",,3,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Parent Class Aspect Modifiers” exercise from the lesson “Inheritance and Polymorphism”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Parent Class Aspect Modifiers


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
You can also find further discussion and get answers to your questions over in #get-help.
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head to #get-help and #community:tips-and-resources. If you are wanting feedback or inspiration for a project, check out #project.
Looking for motivation to keep learning? Join our wider discussions in #community
Learn more about how to use this guide.
Found a bug? Report it online, or post in #community:Codecademy-Bug-Reporting
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
The automatic tutor doesn’t recognize “public final” but only “final public”. Both are valid.

Not only are both valid, public final is “more” correct by typical convention. See this post on Stack Overflow: https://stackoverflow.com/questions/10299067/modifier-keyword-order-in-java
"
32,FAQ: Learn Java: Manipulating Variables - Modulo,"Get Help,Git",variable-data-type,2,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Modulo” exercise from the lesson “Learn Java: Manipulating Variables”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Modulo


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
im confused because it when i right leftOut it says cannot find symbol to the letter l in leftOut
"
33,FAQ: Conditionals and Control Flow - If-Then Statement,"Get Help,Git",,2,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “If-Then Statement” exercise from the lesson “Conditionals and Control Flow”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise If-Then Statement


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
You can also find further discussion and get answers to your questions over in #get-help.
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head to #get-help and #community:tips-and-resources. If you are wanting feedback or inspiration for a project, check out #project.
Looking for motivation to keep learning? Join our wider discussions in #community
Learn more about how to use this guide.
Found a bug? Report it online, or post in #community:Codecademy-Bug-Reporting
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
public class Order {
public static void main(String args) {
double itemCost = 30.99;

// Write an if-then statement:

if (itemCost>24.00) {
  System.out.println(""High value item!"");
  
}

}
}
My final code for exercise 2/6 that allowed me to move on to the next step
"
34,FAQ: Conditional Operators - Logical NOT:!,"Get Help,Git",,4,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Logical NOT: !” exercise from the lesson “Conditional Operators”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Logical NOT: !


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
You can also find further discussion and get answers to your questions over in #get-help.
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head to #get-help and #community:tips-and-resources. If you are wanting feedback or inspiration for a project, check out #project.
Looking for motivation to keep learning? Join our wider discussions in #community
Learn more about how to use this guide.
Found a bug? Report it online, or post in #community:Codecademy-Bug-Reporting
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
Hey I have a question about this exercise.  I do not get an error when I run the code as is:
I’ve highlighted at the bottom the part that confuses me.  I should have to enter another instance variable correct?  i.e. ‘boolean isConfirmed = false;’
But if I don’t include that, I get no error but the incorrect answer, right?
public class Reservation {
int guestCount;
int restaurantCapacity;
boolean isRestaurantOpen;
boolean isConfirmed;
public Reservation(int count, int capacity, boolean open) {
if (count < 1 || count > 8) {
System.out.println(“Invalid reservation!”);
}
guestCount = count;
restaurantCapacity = capacity;
isRestaurantOpen = open;
}
public void confirmReservation() {
if (restaurantCapacity >= guestCount && isRestaurantOpen) {
System.out.println(“Reservation confirmed”);
isConfirmed = true;
} else {
System.out.println(“Reservation denied”);
isConfirmed = false;
}
}
public void informUser() {
**    // Write conditional here**

**    if (!isConfirmed){**
**      System.out.println(“Unable to confirm reservation, please contact restaurant.”);**
**    } else {**
**      System.out.println(“Please enjoy your meal!”);**
**    }**
**  }**
public static void main(String args) {
Reservation partyOfThree = new Reservation(3, 12, true);
Reservation partyOfFour = new Reservation(4, 3, true);
partyOfThree.confirmReservation();
partyOfThree.informUser();
partyOfFour.confirmReservation();
partyOfFour.informUser();
}
}

Hello Tommy, the instructions were not clear for me as well, you don’t need to reassign any values to isConfirmed all they wanted is for you to create if else, without “!” operator. That’s what I’ve done
example:
if(isConfirmed == true) // just a simple if condition like on a previous exercise, try it out! 
{
    // do something 
} 
else 
{
  // do something in case if the first statement didn't get  implemented 
}

Hope this helps.

public class Reservation {
  int guestCount;
  int restaurantCapacity;
  boolean isRestaurantOpen;
  boolean isConfirmed;
  
  public Reservation(int count, int capacity, boolean open) {
    if (count < 1 || count > 8) {
      System.out.println(""Invalid reservation!"");
    }
    guestCount = count;
		restaurantCapacity = capacity;
		isRestaurantOpen = open;
  }  
  
  public void confirmReservation() {
    if (restaurantCapacity >= guestCount && isRestaurantOpen) {
      System.out.println(""Reservation confirmed"");
      isConfirmed = true;
    } else {
      System.out.println(""Reservation denied"");
			isConfirmed = false;
    }
  }
  
  public void informUser() {
    // Write conditional here
    if (!isConfirmed) {
      System.out.println(""Unable to confirm reservation, please contact restaurant."");
    } else {
      System.out.println(""Please enjoy your meal!"");
    }

  }
  
  public static void main(String[] args) {
    Reservation partyOfThree = new Reservation(3, 12, true);
    Reservation partyOfFour = new Reservation(4, 3, true);
    partyOfThree.confirmReservation();
    partyOfThree.informUser();
    partyOfFour.confirmReservation();
    partyOfFour.informUser();
  }
}

with output:
Reservation confirmed
Please enjoy your meal!
Reservation denied
Unable to confirm reservation, please contact restaurant.

"
35,FAQ: Learn Java: Arrays - Review,"Get Help,Git",,2,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Review” exercise from the lesson “Learn Java: Arrays”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Review


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
You can also find further discussion and get answers to your questions over in #get-help.
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head to #get-help and #community:tips-and-resources. If you are wanting feedback or inspiration for a project, check out #project.
Looking for motivation to keep learning? Join our wider discussions in #community
Learn more about how to use this guide.
Found a bug? Report it online, or post in #community:Codecademy-Bug-Reporting
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
import java.util.Arrays;

public class Classroom {
  
  public static void main(String[] args){
    // question 1)
    String[] students = {""Sade"", ""Alexus"", ""Sam"", ""Koma""};
    // question 2) 
    double[] mathScores = new double[4];
    // question 3)
    mathScores[0] = 94.5;
    // question 4)
    mathScores[2] = 76.8;
    // question 5)
    System.out.println(""The number of students in the class is "" + students.length);
  }
}


And the output was:
The number of students in the class is 4


My solution for step 8/8
"
36,FAQ: Learn Java: ArrayLists - Accessing an Index,"Get Help,Git",,2,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Accessing an Index” exercise from the lesson “Learn Java: ArrayLists”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Accessing an Index


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
You can also find further discussion and get answers to your questions over in #get-help.
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head to #get-help and #community:tips-and-resources. If you are wanting feedback or inspiration for a project, check out #project.
Looking for motivation to keep learning? Join our wider discussions in #community
Learn more about how to use this guide.
Found a bug? Report it online, or post in #community:Codecademy-Bug-Reporting
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
System.out.println(""Sherlock's third to-do:"");
    // Print Sherlock's third to-do:
    System.out.println(sherlocksToDos.get(2));
    
    System.out.println(""\nPoirot's second to-do:"");
    // Print Poirot's second to-do:
    System.out.println(poirotsToDos.get(1));

The part of the code that exercise 5/9 requires the user to solve. The “\n” part before “Poirot’s second to-do” is a line break indicator so that the output is formatted like this:
Sherlock's third to-do:
interview suspects

Poirot's second to-do:
interview suspects

"
37,FAQ: Learn Java: Loops - Using For Loops,"Get Help,Git",,2,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Using For Loops” exercise from the lesson “Learn Java: Loops”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Using For Loops


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
You can also find further discussion and get answers to your questions over in #get-help.
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head to #get-help and #community:tips-and-resources. If you are wanting feedback or inspiration for a project, check out #project.
Looking for motivation to keep learning? Join our wider discussions in #community
Learn more about how to use this guide.
Found a bug? Report it online, or post in #community:Codecademy-Bug-Reporting
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
class Coffee {
  
  public static void main(String[] args) {
    /*
    int cupsOfCoffee = 1;
    
    while (cupsOfCoffee <= 100) {
      
      System.out.println(""Fry drinks cup of coffee #"" + cupsOfCoffee);
      cupsOfCoffee++;
      
    } end of while loop
    */
    for (int i = 1; i <= 100; i++) {
      System.out.println(""Fry drinks cup of coffee #"" + i);
    } // end of for loop
    
  }
  
}

I commented out the while loop using /* */
I wanted to leave it there for comparison and to help with the creation of the for loop
"
38,FAQ: String Methods - indexOf(),"Get Help,Git",,1,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “indexOf()” exercise from the lesson “String Methods”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise indexOf()


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
You can also find further discussion and get answers to your questions over in #get-help.
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head to #get-help and #community:tips-and-resources. If you are wanting feedback or inspiration for a project, check out #project.
Looking for motivation to keep learning? Join our wider discussions in #community
Learn more about how to use this guide.
Found a bug? Report it online, or post in #community:Codecademy-Bug-Reporting
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
",
39,FAQ: String Methods - equals(),"Get Help,Git",,1,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “equals()” exercise from the lesson “String Methods”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise equals()


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
You can also find further discussion and get answers to your questions over in #get-help.
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head to #get-help and #community:tips-and-resources. If you are wanting feedback or inspiration for a project, check out #project.
Looking for motivation to keep learning? Join our wider discussions in #community
Learn more about how to use this guide.
Found a bug? Report it online, or post in #community:Codecademy-Bug-Reporting
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
",
40,FAQ: String Methods - Introduction to String Methods,"Get Help,Git",,1,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Introduction to String Methods” exercise from the lesson “String Methods”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Introduction to String Methods


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
You can also find further discussion and get answers to your questions over in #get-help.
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head to #get-help and #community:tips-and-resources. If you are wanting feedback or inspiration for a project, check out #project.
Looking for motivation to keep learning? Join our wider discussions in #community
Learn more about how to use this guide.
Found a bug? Report it online, or post in #community:Codecademy-Bug-Reporting
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
",
41,FAQ: Hello World: Java - Semicolons and Whitespace,"Get Help,Git",hello-world,7,"

This community-built FAQ covers the “Semicolons and Whitespace” exercise from the lesson “Hello World: Java”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Semicolons and Whitespace


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
how can the output be in different lines without an endline?

Hello, @blog8647988822. The output appears on different lines because of the println() method. It prints its arguments on a new line each time it’s called. If we used print() everything would be on the same line. See below:
public class LanguageFacts {
  public static void main(String[] args) {
    // Press enter or return on your keyboard after each semicolon!
    
    System.out.println(""Java is a class-based language."");
    System.out.println(""Java classes have a 'main' method."");
    System.out.println(""Java statements end with a semicolon."");
    System.out.println(""Programming is useful and fun!"");
    System.out.print(""Hi"");
    System.out.print("" there"");
    System.out.print("", Buddy!"");
  }
}

Output:

Java is a class-based language.
Java classes have a ‘main’ method.
Java statements end with a semicolon.
Programming is useful and fun!
Hi there, Buddy!

Hope this helps!

hello. please you help me out. I was learning about whitespaces and semicolons and there was an excercise given to me to do
this is the excercise given to me:
1.
The  LanguageFacts.java  file prints information about Java to the screen.
Unfortunately, the writer of the file has avoided using whitespace.
Make the file easier to read by adding a newline after each statement!
2.
Inside  main() , add a new statement printing how you feel about coding.
Start the message with: “Programming is… “.
Remember to place a semicolon at the end of the statement!
I successfully did the first one but the second one is giving me problems.
Kindly help me out.
Thanks

Hello, @array7348921201.
Welcome to the forums.
My post above shows the correct syntax for printing statements to the screen. Not sure what other help I can offer without seeing your code. If you’d like to paste your code in a post, please follow these guidelines: How do I format code in my posts?

Hi everyone, I’m completely new here and I’ve been scratching my head on the second part of 4/7 for about 30mins now. I think what confused @array7348921201 is the same thing that confused me :
“Inside main()” made me think the “Programming is…” had to be in between the ().
@midlindner answer to the previous message made me realise that what we have to write is inside main() method, which means in between {} after the main() and not actually in between the (). Hope that helps.

Hello!
I was also stuck on the second portion of the problem, the fact that it said to enter a statement between “main()” confused me because I thought I had to replace the original statements about Java with my own. (But as an above comment states, it appears as if “main()” is just the block of text within the curly braces {}).
The correct answer however is to simply write your own System.out.println in line 4. This line should look just like the other lines, but with your own message (for example: “Programming is challenging, but fun!”
Hope this helps!
"
42,FAQ: String Methods - charAt(),"Get Help,Git",,4,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “charAt()” exercise from the lesson “String Methods”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise charAt()


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
You can also find further discussion and get answers to your questions over in #get-help.
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head to #get-help and #community:tips-and-resources. If you are wanting feedback or inspiration for a project, check out #project.
Looking for motivation to keep learning? Join our wider discussions in #community
Learn more about how to use this guide.
Found a bug? Report it online, or post in #community:Codecademy-Bug-Reporting
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
I expect the following line to result with the initials, “AM”, in the output, but instead outputs “142”?  I would like to understand why this is:
    System.out.println(firstName.charAt(0) + lastName.charAt(0)); 


// What are the initials?
    System.out.println(firstName.charAt(0));
    System.out.println(lastName.charAt(0));

my solution… however it prints our the initials on different lines in the output.
very straightforward, the “hint” will give you the answer lol

@betomercado115268528,
char + char = int
Or:
character (Unicode) value + character (Unicode) value = int
Which explains:
charAt() + charAt() = int
This post answers all of my questions:


stackoverflow.com






In Java, is the result of the addition of two chars an int or a char?


java, char, int, primitive


  asked by
  
  
    orange
  
  on 02:34PM - 31 Dec 11 UTC







"
43,FAQ: String Methods - length(),"Get Help,Git",,3,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “length()” exercise from the lesson “String Methods”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise length()


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
You can also find further discussion and get answers to your questions over in #get-help.
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head to #get-help and #community:tips-and-resources. If you are wanting feedback or inspiration for a project, check out #project.
Looking for motivation to keep learning? Join our wider discussions in #community
Learn more about how to use this guide.
Found a bug? Report it online, or post in #community:Codecademy-Bug-Reporting
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
The instructions for this lesson do not actually ask you to do what is apparently expected for you to do.  All it says is "" Use the  length()  method to check if the length of the  tweet  is within the Twitter’s limit of 280 characters.""
Am I storing this length to a variable?  Am I comparing it to 280 and setting a boolean to indicate if it is within the limit?
No.  Apparently what I’m doing is just printing the length to the console.  It would be nice if the exercise actually said that.

Agreed.  I was confused by the instructions at first. I actually thought they meant, set the string number to 280. So I tried several times to do that and failed.
"
44,FAQ: Java: Introduction to Classes - Classes: Assigning Values to Instance Fields,"Get Help,Git",,24,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Classes: Assigning Values to Instance Fields” exercise from the lesson “Java: Introduction to Classes”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Classes: Assigning Values to Instance Fields


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
Why are instance fields required? In the example it sets the value of color to be the value of the parameter carColor. Then, when passing the values during method call, the value references to the constructor parameter then to the instance field from what I understood.
Doesn’t the constructor parameter already says what is the data type and name of the object? Why its value needs to be set equal to an instance field?

I’m also confused by this, not sure why it is necessary and when changed some code around it returned null or with an error.
public class Car {
String color;
//We created a class, Car with a variable of color.
public Car(String carColor) { //Why is this not  public Car(String color)?
// assign parameter value to instance field
color = carColor; //Why dis we assign the same variable to two different names?
}

here:
String color;

you declare the instance field.
then in the constructor:
public Car(String carColor) {
    // assign parameter value to instance field
    color = carColor;
  }

the comment pretty much says it, we assign the parameter (which is a placeholder) to the instance field
then once we initialize the class:
Car ferrari = new Car(""red"");

we provide the car color (red) to the constructor.
could we use the same name for the instance field and the constructor parameter? Yes. But its important to understand how it work.

I appreciate your reply but not sure you answered my question. Why does the code not look like this?
public class Car {
String color;
public Car(String color)
}
I’ve tried to find out the answer but I think I’m misunderstanding something. I’ve also seen them use.
public Car{
String color;
}
public Car(String color){
this.color = color;
}
I’m confused why you need either. I appreciate your feedback.

Let me explain my question a bit more.
public class Car {
String color;
boolean isRunning;
int velocity;
This code is creating a class, Car, which has 3 parameters.
public Car(String carColor, boolean carRunning, int milesPerHour) {
color = carColor;
What is this doing if we’ve already created a class Car, with 3 parameters? I don’t understand what the difference between these two are.

it seems you confuse instance field (String color;) and the parameter of the constructor (String carColor).
the parameter of the constructor (carColor) gets its value from the argument we provide when instantiate the class:
 Car ferrari = new Car(""red"");

the argument (""red"") is passed along to the parameter of the constructor (carColor). Its important to understand that creating a class instance automatically calls the constructor.
the advantage of this approach is that if we make a new car, we can give a different color:
public class Car {
  String color;

  public Car(String carColor) {
    // assign parameter value to instance field
    color = carColor;
  }

  public static void main(String[] args) {
    // parameter value supplied when calling constructor
    Car ferrari = new Car(""red"");
    Car mcClaren = new Car(""orange"");
    System.out.println(ferrari.color);
    System.out.println(mcClaren.color);
  }
}





 codecoder76832:

This code is creating a class, Car, which has 3 parameters.


classes do not have parameters, methods do. color, isRunning and velocity are instance fields.



 codecoder76832:

What is this doing if we’ve already created a class Car, with 3 parameters? I don’t understand what the difference between these two are.


the constructor is called when you instantiate the class, allowing us to pass different values for each car that we make.
do you understand when the constructor is invoked?

I REALLY appreciate the time you are taking to answer my questions. It just seems like a foreign concept. Maybe I just need to accept it as a requirement of the language instead of asking why.
I want to thank you again for your feedback. You have been a great help.

This is why Java is not a great first language, seeing the value of OOP when started programming is really difficult.
What is it your are struggling with, i feel like its here:
public Car(String carColor) {
    // assign parameter value to instance field
    color = carColor;
  }
Car ferrari = new Car(""red"");

doing new Car(""red"") will invoke the constructor public Car(String carColor), which results in:
carColor = ""red"" # assign value of instantiate class to parameter of constructor 

given carColor is now red, it will set the instance field (color) to red.
now that the instance field is set, we can use it on the class instance:
System.out.println(ferrari.color);


Ok, I understand now. I didn’t realize the println method used .color instead of .carColor.
You mention Java being a difficult first language. I am not too far invested to stop and start on another language, especially if another language will give me a better base to work from.
Do you have any recommendations?




 codecoder76832:

Ok, I understand now. I didn’t realize the println method used .color instead of .carColor.


carColor has a local scope, it only exists within the constructor. Which is why we assign it to the instance field, then we can use the instance field (color) on the class instance (ferrari)



 codecoder76832:

You mention Java being a difficult first language. I am not too far invested to stop and start on another language, especially if another language will give me a better base to work from.


Java relies so heavily on OOP, which can be very overwhelming in the beginning. And difficult to grasp what the advantages and drawbacks of object oriented programming (OOP) are.
which is why i think its not a suitable first language, but ask a different developer, he might have a different opinion. Some even go so far to say you should start with a teaching language. (purely for teaching, not or barely used in the industry)



 codecoder76832:

Do you have any recommendations?


this is just an opinion, not a fact. Python is a better option i think.
although python is OOP as well, you can start simple with functions:
def start(name):
   print ""hello "" + name

start(""codecoder"")

without all the classes and other luggage. Of course, python has its flaws and problems as well. You can also stick with Java if you want

Again, I really appreciate your help and feedback.
I will take a look at python as you are not the first to say it is an easier first language.
Thanks again, I hope you enjoy the rest of your weekend.

Wouldn’t you know, Scope is the topic 2 pages after the chapter that caused so much confusion for me. Might be a good idea to place “Scope” a bit earlier to avoid confusion.

I am just helping people on the forum, i have no say in the lesson structure and so forth
sometimes you just have to go through and you will pick things up you missed earlier (like scope)

I entered the objectname.fieldname, then tried to print the product.  I get an error saying that the line with the objectname.fieldname is not a statement and a carat pointing at the period between objectname and fieldname.

Can we see your full code?

Didn’t think that was allowed.  But here it is.
public class Store {
  // instance fields
  String productType;
  
  // constructor method
  public Store(String product) {
    productType = product;
  }
  
  // main method
  public static void main(String[] args) {
    
    Store lemonadeStand = new Store(""lemonade"");
    
        lemonadeStand.productType;
    
        System.out.println(productType);
  }
}





 noeman5:

Didn’t think that was allowed.


when you need help with your code, posting your code is highly recommend. This way, the person helping you can see what is wrong
what isn’t allowed is posting a full code solution without any kind of explanation.
as for the actual issue with your code, instance fields can only be accessed through the class instance, what you do here:
lemonadeStand.productType;

but on this line you forgot to print.
Java is strict, lemonadeStand.productType on its own is not allowed, you need to do something with it like printing
this:
 System.out.println(productType);

won’t work either, given instance fields belong to a class instance, so can’t be accessed on there own.

Thank you for the help.  I commented out the line with just “lemonadeStand.productType” then edited the following line and the code worked!  Maybe this will begin to click after another couple of weeks.  I was stuck on this exercise for 4 days.
"
45,FAQ: Learn Java: Arrays - Importing Arrays,"Get Help,Git",,7,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Importing Arrays” exercise from the lesson “Learn Java: Arrays”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Importing Arrays


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
You can also find further discussion and get answers to your questions over in #get-help.
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head to #get-help and #community:tips-and-resources. If you are wanting feedback or inspiration for a project, check out #project.
Looking for motivation to keep learning? Join our wider discussions in #community
Learn more about how to use this guide.
Found a bug? Report it online, or post in #community:Codecademy-Bug-Reporting
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
// import the Arrays package here:
import java.util.Arrays;
// start of Newsfeed class
public class Newsfeed {
  
  
  public Newsfeed(){
    
  }
    
  public String[] getTopics(){
    String[] topics = {""Opinion"", ""Tech"", ""Science"", ""Health""};
    return topics;
  }
  

  public static void main(String[] args){
    Newsfeed sampleFeed = new Newsfeed();
    String[] topics = sampleFeed.getTopics();
    System.out.println(Arrays.toString(topics));
  }
}


My solution for step 3/8 “Importing Arrays”

Misleading title: the array (topics) is not imported; it’s defined (and assigned values) in the code.
It’s the Arrays package , a library of methods (for working with arrays) that is imported.

Since the name of the package is Arrays, I don’t think that Importing Arrays is misleading, but you are as entitled to your opinion as I am to mine. Happy coding!

it’s your site so of course you can do as you choose.
Based on the ‘I’d-rather-be-right-than-helpful’ response I’ll be doing my paid-for work at Udemy.
Happy teaching!

I don’t work here. Forum moderators are volunteers. We have nothing to do with the curriculum on the main site. We just enjoy helping others by answering questions as best we can here on the forums. I wasn’t trying to pick a fight, just offering my opinion.

Hi! I just finished the Arrays topic in Java and I noticed that the line import java.util.Arrays was used many times. I would like to learn more about the structure of import, like how can I import another classes and methods, how many classes are there for me to import, or do I have to learn all of these built-in classes in the future. I have searched on the internet but the answer seemed a little bit complex. Thanks <3
"
46,FAQ: Learn Java: ArrayLists - Getting an Item's Index,"Get Help,Git",,4,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Getting an Item’s Index” exercise from the lesson “Learn Java: ArrayLists”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Getting an Item’s Index


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
You can also find further discussion and get answers to your questions over in #get-help.
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head to #get-help and #community:tips-and-resources. If you are wanting feedback or inspiration for a project, check out #project.
Looking for motivation to keep learning? Join our wider discussions in #community
Learn more about how to use this guide.
Found a bug? Report it online, or post in #community:Codecademy-Bug-Reporting
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
I’m positive there are other ways to solve this in one line of code or in just a more concise way but this is my solution for step 8/9:
// Calculate to-dos until case is solved:
    int solveIdx = sherlocksToDos.indexOf(""solve the case"");
      
    // Change the value printed:
    System.out.println(solveIdx);

something like this would be a one line solution:
System.out.println(sherlocksToDos.indexOf(""solve the case""));


It should be 4, not 3:
    // Calculate to-dos until case is solved:
    int toDosUntilSolved = sherlocksToDos.indexOf(""solve the case"") + 1;
      
    // Change the value printed:
    System.out.println(toDosUntilSolved);


Actually no, one item in ArrayList is removed before calculating indexOf() 
"
47,FAQ: Learn Java: ArrayLists - Changing a Value,"Get Help,Git",,4,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Changing a Value” exercise from the lesson “Learn Java: ArrayLists”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Changing a Value


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
You can also find further discussion and get answers to your questions over in #get-help.
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head to #get-help and #community:tips-and-resources. If you are wanting feedback or inspiration for a project, check out #project.
Looking for motivation to keep learning? Join our wider discussions in #community
Learn more about how to use this guide.
Found a bug? Report it online, or post in #community:Codecademy-Bug-Reporting
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
Why does the Array List initialization in the explanation:
ArrayList<String> shoppingCart = new ArrayList<shoppingCart>();

have a different format/template than the one we use in the program we have to modify:
ArrayList<String> sherlocksToDos = new ArrayList<String>();

On the right side of the assignment operator (the right side of the equals sign), inside the brackets we use <String> in our code. Why is the ArrayList object “shoppingCart” written inside of the brackets in the explanation code provided?

// Modify sherlocksToDos so that the value at ""play violin"" becomes ""listen to Dr. Watson for amusement""
    
    sherlocksToDos.set(1, ""listen to Dr. Watson for amusement"");

// Modify poirotsToDos so that the value at ""trim mustache"" becomes ""listen to Captain Hastings for amusement"".
    
    poirotsToDos.set(3,""listen to Captain Hastings for amusement"");


I think there is a mistake by the course designer.
"
48,FAQ: Learn Java: Manipulating Variables - String Concatenation,"Get Help,Git",variable-data-type,14,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “String Concatenation” exercise from the lesson “Learn Java: Manipulating Variables”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise String Concatenation


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
why is the string zooDescription written like this ?
public class Zoo {
public static void main(String args){
int animals = 12;
String species = “zebra”;
String zooDescription = ""Our zoo has "" + animals + "" "" + species + “s!”;
  System.out.println(zooDescription);
}       

}

Hi.  It took me a little bit to figure out why the solution was correct too.
The seemingly random double quotes between ‘+ animals’ and ‘+ species’ contain an invisible space which is needed to have a space between the number of animals and type of species.  Without the double quotes around the space, the result would be “12zebras!” instead of the correct “12 zebras!”.
Hope that helps.

buenas tardes tengo una pregunta … estoy poniendo las comillas dobles , pero no me sale ninigun espacio entre el numero de animales y las cebras

Hi andrea,
can u tell me why this “s!”; has mentioned in String zooDescription
String zooDescription = ""Our zoo has "" + animals + "" "" + species + “s!”;


image.png1920×1080 238 KB

Hello, can anyone tell me where I am going wrong please? I have viewed the solution and I am having difficulty finding out why it won’t let me move on from this point. I appreciate your help, thank you!
Sincerely,
Mitch

strings need to be an exact match, from what i see, the expected output should be zebras, not zebra's

Hello stetim94, thank you very much for your help and how quickly you responded. Haha, it’s funny how the little things like that can trip you up. I fixed it and moved on, thank you again.

did you type it as “”  (with no space between the quotation marks) or as "" ""  (which has a space in between the quotation marks)?

Hi!
I don’t understand the use of “s!”. There is no description available about it. I wrote my solution as
String zooDescription = ""Our zoo has "" + animals +  species;
Please someone explain “s!” to me.
This thing was not even used in the example
int balance = 10000;
String message = ""Your balance is: "" + balance;
System.out.println(message);
Thanks!




 object3577107510:

Please someone explain “s!” to me.


its just a string? To make the animal name plural and let the sentence end with an exclamation mark.
string concatenation (using +) allow us to insert variables inside a string

As far as I can tell I’ve typed it correctly but it wont let me move past, can anyone see what my error is? 
image2083×804 93.3 KB

EDIT: Of course right after I post this I see the missing + between animals and "" "" 


image1882×879 66.9 KB

Anyone know what’s wrong here? The system is not letting me pass.


I guess the system was designed to use if else statement to identify whether we have inputted the right code into it. the semicolon ; should be next to “s!” without any white space. Else the system will mark you as incorrect.
"
49,FAQ: Hello World: Java - Commenting Code,"Get Help,Git",hello-world,3,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Commenting Code” exercise from the lesson “Hello World: Java”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Commenting Code


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
I’m confused of where I should put the comment in the code as indicated by the instructions

You have to put your code inside the braces/ brackets of the main method.
"
50,FAQ: Learn Java: Variables - Introduction,"Get Help,Git",,4,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Introduction” exercise from the lesson “Learn Java: Variables”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Introduction


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
This is really frustrating, Can someone explain why this code errors? I use the exact same command to print out the year as I did the name and it still errors although it prints the year and name? Is it because name has ‘String’ in it?
https://www.codecademy.com/courses/learn-java/lessons/learn-java-variables/exercises/introduction
public class Creator {
	public static void main(String[] args) {
    String name = ""James Gosling"";
    int yearCreated = 1995;
    System.out.println (name);
    System.out.println (yearCreated);
	}
}


The issue here is how the Submission Correctness Test for this lesson checks your code. The SCT is using pattern matching to see if your code matches what is expected. The SCT is not expecting a space between println and the parenthesis:
System.out.println (name);
                  ^

Even though your code executes without error, and produces the desired output, it fails the test.

Thank you for the reply.
"
51,FAQ: Learn Java: Methods - Calling Methods,"Get Help,Git",,2,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Calling Methods” exercise from the lesson “Learn Java: Methods”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Calling Methods


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
Can statements be printed out in other methods besides the main method?
// advertise method
  public void advertise() {
		System.out.println(""Selling "" + productType + ""!"");
    System.out.println(""Come spend some money!"");
  }
  
  // main method
  public static void main(String[] args) {
    Store lemonadeStand = new Store(""Lemonade"");
    lemonadeStand.advertise();
    lemonadeStand.advertise();
    lemonadeStand.advertise();
  }

If not, can the main method be written earlier in the code instead of last?
"
52,FAQ: Learn Java: Manipulating Variables - Multiplication and Division,"Get Help,Git",variable-data-type,5,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Multiplication and Division” exercise from the lesson “Learn Java: Manipulating Variables”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Multiplication and Division


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
This lesson assumes everyone knows how to calculate percentages.  I didn’t know how to do this without looking it up.  For this exercise, what is meant by ‘tax’ is the tax rate percentage (.0875), NOT the actual total amount of tax someone is paying.  Thus, the total amount of tax being paid needs to be calculated ex. subtotal*tax
The lesson also doesn’t teach if there are any rules regarding calculating multiple numbers together at once so I just had to guess that they could all be calculated together.
Solution for instruction 1. : double total = subtotal + subtotal*tax;
System.out.println (total);

The lesson doesn’t teach that you can do multiple operations at once; or even that you can use parantheses to override order of operations if needed, which is what you should do in this case (not needed, but definitely would make more sense). Change the question, maybe make it subtotal + tip instead of tax

Thank you for you comment. I’m in the same boat when it comes to calculating percentages and your comment really clarified the assignment. They did a poor job with this one.

The lesson states “product of” which is multiplying. Gotta remember that next time!
"
53,FAQ: Hello World: Java - Compilation: Catching Errors,"Get Help,Git",hello-world,28,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Compilation: Catching Errors” exercise from the lesson “Hello World: Java”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Compilation: Catching Errors


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
The terminal does not work, so I can’t proceed. I cannot click inside of it, because there seems to be something loading constantly (icon on top of the screen). Kind of lame to run into something like this so early on, as you can’t skip the exercise…

Same here  I hope it will be fixed

Having the same issue - plus we cannot bypass  the exercise to move on.

I’m having an issue with the terminal - I’m typing “javac Compiling.java” as instructed but the terminal just says “command not found” in an infinite loop. Can’t skip the lesson either, disappointing.

I don’t know if any of you are still having issues with the exercise, but I got stuck on the second instruction.
What worked for me was to add the semicolon (as the third instruction states) than type ls in the terminal and press enter. This was accepted and I moved on to the next instruction.
That still left me with the third instruction, which I’d already done to get passed the second. Eventually I removed the semicolon, added it again and clicked on check work at the bottom of the terminal.
That worked for me and I hope it’ll help some of you as well.

In my case, I had to remove the semi column and clicked on “Check Work” before being able to proceed.

I do not know where the terminal is… could you tell me?

I can’t figure out how to do the second instruction; I literally type 1s into the terminal like it says and I get an error message that asks if I ran 1s in the terminal.

I’ll point it out here too: the command to run is

ls

That’s two lowercase letters, L and S. The first is not a one.
This command is short for “list”. On unix-compatible shells, it lists the files present in the current directory.

Je ne sais pas où est le terminal…

Same as all of you…
I’m having trouble with this lesson.
I’ll be thankful if you are able to answer my questions.

Where is the terminal? (I am a beginner to Java)
For some strange reason, it keeps on not working… Probably because I placed it in the wrong spot?


Your screen should be divided into 3 panes. The left is the instruction pane. The center is the code editor, and the right pane is the terminal. When the instructions ask for interaction with the terminal, you type the commands just to the right of the $ prompt. You should see a flashing cursor in that position. Give a left mouse button click near the cursor, and type away! 
P.S. Something else that seems to trip people up fairly often is the ls command referred to in the 2nd instruction. It’s lowercase LS not the number 1 and s. 

I can’t get past step 3. I got steps 1-2 done just fine, but the terminal is not accepting the semi-colon. I, too, am stuck. Did anyone find a way to get past this?

Hello, @systemsurfer68197. Welcome to the forum!
After you add the missing semicolon in the code editor (middle pane), you need to click the Check Work button at the bottom of the console (right pane). Is that what you’ve tried?

I did  It was glitching or something. I ended up refreshing the page and that’s what it took for the update to go through. Thankfully, I’m on the next lesson now. Thank you so much for responding!

Glad you were able to move forward. Refreshing your browser is a fairly common necessity as you work through the lessons. The console in the far right pane seems to lose it’s connection fairly often especially if we let it sit idle for several minutes. I try (don’t always remember) to copy my code in the code editor prior to refreshing the browser, just in case the last edits haven’t been saved. Good luck moving forward && happy coding!

Hi, I was doing the third step and i put in javac Compiling.java; and it says it is wrong.
Could someone help me?
Thank you

You’ll need to examine the situation closer than that.
Who is it?
Does it say “IT IS WRONG” or does it describe what is wrong? If the latter then great, you’ve now got information about the problem.

It says I haven’t put a semicolon ( at the end but I have.
"
54,FAQ: Learn Java: Loops - For-Each Loops,"Get Help,Git",,7,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “For-Each Loops” exercise from the lesson “Learn Java: Loops”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise For-Each Loops


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
You can also find further discussion and get answers to your questions over in #get-help.
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head to #get-help and #community:tips-and-resources. If you are wanting feedback or inspiration for a project, check out #project.
Looking for motivation to keep learning? Join our wider discussions in #community
Learn more about how to use this guide.
Found a bug? Report it online, or post in #community:Codecademy-Bug-Reporting
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
import java.util.ArrayList;

class MostExpensive {
  
  public static void main(String[] args) {
    
    ArrayList<Double> expenses = new ArrayList<Double>();
    expenses.add(74.46);
    expenses.add(63.99);
    expenses.add(10.57);
    expenses.add(81.37);
    
    double mostExpensive = 0;
    
    // Iterate over expenses
    for (double expense : expenses) {
      if (expense > mostExpensive) {
        mostExpensive = expense; 
      }
    } // end of for-each loops
    
    System.out.println(mostExpensive);
    
  }
  
}

I understand that is a convention to use the singular form (expense) of the plural form (expenses) when creating for-each loops… but how does the program know that “expense” is referring to the individual elements/items of the Array/ArrayList “expenses”?

It’s very weird that they do not accept simpler solutions for this exercise.
The notation posted above is required.
for (double expense : expenses) {
  if (expense > mostExpensive) mostExpensive = expense;
}

(A solution omitting the curly brackets gets rejected)
for (double expense : expenses) {
  mostExpensive = expense > mostExpensive ? expense : mostExpensive;
}

(A solution using the ternary operator, although we haven’t learned this, is also rejected)

I also had this question. Also how does expense > mostExpensive result in the highest value in the arrayList

if (expense > mostExpensive) {mostExpensive = expense);
if expense is greater than mostExpensive, the value of mostExpensive is updated and reassigned to expense which results in the highest value!

Thank you for your answer. I had the same question.

I understand the functions of all the operators in these lines of code, and can follow the logic. However, I can do this because I know expense is the singular of expenses, and I know the coder wants the highest value double in the expenses list because I understand English. Still, how does the java compiler know
expense = individual elements of the ArrayList expenses;
mostExpensive = element with the highest valued double;
Could we have used any variable names (i.e. items, priciestItem) and it would have worked out the same because of the logic of the lines? Lol ugh, I’m really confused.
"
55,FAQ: Learn Java: Manipulating Variables - Introduction,"Get Help,Git",variable-data-type,1,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Introduction” exercise from the lesson “Learn Java: Manipulating Variables”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Introduction


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
",
56,FAQ: Learn Java: Variables - ints,"Get Help,Git",,16,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “ints” exercise from the lesson “Learn Java: Variables”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise ints


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
i am used to using “var” to declare variables, is this common or not? i have encountered this a lot on a variety of different JavaScript platforms.

now i realize my mistake. this course is on Java, not JS. Sry

Hey It is needed for the print/ln something plz help


image1366×768 124 KB


found it illogical ) doesn’t it?

shouldn’t println be used?

it is getting an error


image1366×768 107 KB


ln is line without the vowels, i don’t know what you wrote. I assumed the .println method had been taught?

thanks. i wrote printIn not ln

I really don’t understand these exercises and I keep re-reading everything but it doesn’t make any sense.
This was the solution but it makes no sense…How do you remember how to write this?
//This is the class declaration:
public class CountComment {
//This is the main method that runs when you compile:
public static void main(String args) {
//This is where you will define your variable:
int numComments = 6;
//This is where you will print your variable:
System.out.println(numComments);
}
//This is the end of the class:
}
//This is outside the class

ZOMG, I kept writing “Print Eye N” Instead of “Print Ell NN”. I spent an hour wondering why my code wasn’t compiling.

missing the (ln) on println

looks like a capital “I” as in ‘Ice’, as opposed to a lower-cased “l” as in ‘look’ in the word println

Keep going through the exercises. Everything will start to come together  The lessons are designed to inspire you to ask those questions you are asking, which means you are on the right track! Good luck! … from a fellow student 
"
57,FAQ: Learn Java: Variables - booleans,"Get Help,Git",,6,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “booleans” exercise from the lesson “Learn Java: Variables”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise booleans


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","

Create a variable called  intsCanHoldDecimals . Set it to  true  if the  int  type can hold a decimal number. Set it to  false  if the  int  type cannot do this.

Doesn’t the set of decimal numbers contain the set of integers? I’m not sure because I didn’t learned arithmetic in English. For me, the assertion “the  int  type can hold a decimal number” is true, because I think the int type can hold a decimal number which is an integer. (Of couse, “the  int  type can hold all decimal numbers” is false.)


Create a variable called  intsCanHoldDecimals  . Set it to  true  if the  int  type can hold a decimal number. Set it to  false  if the  int  type cannot do this.

Hello there,
how does intCanHoldDecimals distinguish whether the user will input decimal or integer? Or is that not part of the question? The solution to this question is…
public class Booleans {
public static void main(String args) {
boolean intsCanHoldDecimals = false;

System.out.println(intsCanHoldDecimals);

}
}

int in Java is a wholly different thing. “int” in Java cannot hold a decimal number whereas “double” in Java can

Notes from the course:
//int holds positive numbers, negative numbers, and zero. They do not store fractions or numbers with decimals in them. The int data type allows values between -2,147,483,648 and 2,147,483,647,
//double can hold decimals as well as very large and very small numbers. The maximum value is 1.797,693,134,862,315,7 E+308, which is approximately 17 followed by 307 zeros. The minimum value is 4.9 E-324, which is 324 decimal places.

Notes from the course:
Primitive datatypes are types of data built-in to the Java system
//int holds positive numbers, negative numbers, and zero. They do not store fractions or numbers with decimals in them. The int data type allows values between -2,147,483,648 and 2,147,483,647,
//double can hold decimals as well as very large and very small numbers. The maximum value is 1.797,693,134,862,315,7 E+308, which is approximately 17 followed by 307 zeros. The minimum value is 4.9 E-324, which is 324 decimal places.
"
58,FAQ: Learn Java: Manipulating Variables - Greater/Less Than or Equal To,"Get Help,Git",variable-data-type,3,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Greater/Less Than or Equal To” exercise from the lesson “Learn Java: Manipulating Variables”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Greater/Less Than or Equal To


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
In this lesson System.out.println() is used but in the previous one System.out.print() was used. I assume the latter is wrong since all the way through Java we have used to former with the line (ln) used. Please could someone clarify this for me?

To which lesson are you referring (by lesson name)?
"
59,FAQ: Java: Introduction to Classes - Classes: Syntax,"Get Help,Git",,5,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Classes: Syntax” exercise from the lesson “Java: Introduction to Classes”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Classes: Syntax


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
Ive gotten the second part of this wrong for simply not having a space between the closing bracket and args in the main method. In other words this will come back as incorrect because there it’s not (String args)
public class Store{
public static void main(Stringargs){
}
}

yea bro same for me i wrote exactly as it shown

So, beginner here, got stuck in this exercise, was asked to [In the code editor, create a  public Store  class.] but when I type code

public class Store {
// scope of Car class starts after curly brace
//I basically type on my own and try for three times, and on fourth attempts i copy the example
}

I gave above codes as answer and hit the blue-run-button, return a LOADING and this message [Error: Main method not found in class Store, please define the main method as:
public static void main(String args)
or a JavaFX application class must extend javafx.application.Application] so I was stuck.
What goes wrong? With my limited experience I think I did correctly created a public Store.class , any idea Senpai?

… should have a total of two sets of curly braces: one for the scope of the class, and one to define the scope of the main method. … needing a set of curly braces after public static void main(String args){
}
"
60,FAQ: Learn Java: Loops - While We're Here,"Get Help,Git",,14,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “While We’re Here” exercise from the lesson “Learn Java: Loops”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise While We’re Here


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
You can also find further discussion and get answers to your questions over in #get-help.
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head to #get-help and #community:tips-and-resources. If you are wanting feedback or inspiration for a project, check out #project.
Looking for motivation to keep learning? Join our wider discussions in #community
Learn more about how to use this guide.
Found a bug? Report it online, or post in #community:Codecademy-Bug-Reporting
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
Directions asks to reset  dieRoll  with a new random value between  1  and  6 , inside the loop
which I understand as
while(dieRoll != 5) {
     dieRoll = randomGenerator.nextInt(6) + 1;
}

What is the correct way to reset dieRoll inside the while loop??? I cannot get past this stage… Please help

Why not use
((int)Math.random() * 6) + 1;

of the Math library? That’s what I was taught in class and it works in my IDE just fine.

you have to reset the random number between 1 and 6; yours is between 1 and 7.

First you have to create a first instance, before you let it repeat, I guess. This works:
// Creating a random number generator
Random randomGenerator = new Random();

// Generate a number between 1 and 6
int dieRoll = randomGenerator.nextInt(6) + 1;

// Repeat while roll isn't 5
while (dieRoll != 5) {
  
  System.out.println(dieRoll);
		dieRoll = randomGenerator.nextInt(6) + 1;

Can someone please explain, why +1 is used with randomGenerator.nextInt(6)

If you see code you don’t understand, the best thing to teach yourself is to break the problem down in small steps.
so in this case, what would randomGenerator.nextInt(6) generate? Looking at documentation/tutorial we see the following example (source):

image941×551 43.6 KB

so randomGenerator.nextInt(6) would generate 0 till (and including) 5. But we want 1 till (and including) 6.
Well, the +1 just explained itself
Teaching yourself to think this way as early as possible is a good skill to have 

Yeah this makes total sense. The only way to get around the “+1” would be a random number generator that didn’t include “zero”. Like instead of using “int” we would need a data type that only includes the the positive integers (whole numbers) 1, 2, 3, etc. I want to use the term “natural numbers” here, it’s been a long time since I did any number theory so that might be incorrect. Hopefully the description is clear.

This is exactly how I wrote my code and it is working just fine.

// Repeat while roll isn't 5
    while (dieRoll != 5) {
      System.out.println(dieRoll);
      dieRoll = randomGenerator.nextInt(6) + 1;

Here is my solution to both questions of step 2/8. The first and third line are part of question one and the middle line is the answer to the second question. Eleven numbers/die rolls were printed to the console before the while loop terminated (evaluated to false).

Hello,
I wanted to know if someone could explain why we have to reset “dieRoll” inside the while loop if “dieRoll” has been initialized with a value of “randomGenerator.nextInt(6) + 1”? I understand the lesson said that the value of “dieRoll” would never change if its not reset inside the “while loop”, but why?
// Importing the Random library
import java.util.Random;
class LuckyFive {
public static void main(String args) {
// Creating a random number generator
Random randomGenerator = new Random();

// Generate a number between 1 and 6
int dieRoll = randomGenerator.nextInt(6) + 1;

// Repeat while roll isn't 5
while (dieRoll != 5) {
  
  System.out.println(dieRoll);
	  dieRoll = randomGenerator.nextInt(6) + 1;

}

you need to keep rolling the die until we have rolled 5. This is achieved by using a loop.

Okay I understand that the “while” statement will run until we roll 5 hence the “!= 5”. I guess specifically I’m trying to understand the lesson’s statement:
"" Do NOT run your code yet  — you will get an infinite loop here because the value of  dieRoll  is never changed. ""
(Correct me if I’m wrong please):
I think I  now understand why the value of “dieRoll” would not change and why we would get an infinite loop if the code is ran without a reset of “dieRoll”.
//Here “dieRoll” is initialized and is equal to 6. Therefore, if you were to run the "" while (dieRoll != 5) "" without the reset of "" dieRoll "" inside the “while loop” it would be a infinite loop. Because ""dieRoll remains at the value 6.
int dieRoll = randomGenerator.nextInt(6) + 1;
Is this correct?




 sidkid52:

I think I now understand why the value of “dieRoll” would not change and why we would get an infinite loop if the code is ran without a reset of “dieRoll”.


its not a reset, we update an existing variable.
The rest seems accurate.
"
61,FAQ: Conditionals and Control Flow - If-Then-Else-If,"Get Help,Git",,9,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “If-Then-Else-If” exercise from the lesson “Conditionals and Control Flow”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise If-Then-Else-If


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
You can also find further discussion and get answers to your questions over in #get-help.
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head to #get-help and #community:tips-and-resources. If you are wanting feedback or inspiration for a project, check out #project.
Looking for motivation to keep learning? Join our wider discussions in #community
Learn more about how to use this guide.
Found a bug? Report it online, or post in #community:Codecademy-Bug-Reporting
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
Edit://
I figured it out. I have to return everything.
This is the correct way:
  public double calculateShipping() {
	 	// declare conditional statement here
    if (shipping.equals(""Regular"")) {
      return 0;
      
    } else if (shipping.equals(""Express"")) {
      return 1.75;
      
    } else {
      return .50;
    }
    
 	}


 public double calculateShipping() {
	 	// declare conditional statement here
    if (shipping.equals(""Regular"")) {
      System.out.println(""0"");
    } else if (shipping.equals(""Express"")) {
      System.out.println(""1.75""); 
    } else {
      System.out.println("".50"");
    }
 	}

./Order.java:33: error: missing return statement
 	}

Emm what?

Since the method is double -or even if it was int,char etc- it requires a return value cuz it’s method with a certain value
so according to me the code could be :
public  double calculateShipping() {
	 	// declare conditional statement here
    if(shipping.equals(""Regular""))
    {
      return 0;
      
    }
    else if(shipping.equals(""Express"")){
      return 1.75;
    }
    else
    {
      return 0.50;
    }
 	}


In Conditional  and Control Flow lesson : if-then else if  exercise ,I don t understand why my output doesn’t correspond to the actual order of my code
Here’s my code:
public class Order {
  boolean isFilled;
  double billAmount;
  String shipping;
  
  public Order(boolean filled, double cost, String shippingMethod) {
		if (cost > 24.00) {
      System.out.println(""High value item!"");
    }
    isFilled = filled;
    billAmount = cost;
    shipping = shippingMethod;
  }
  
  public void ship() {
    if (isFilled) {
      System.out.println(""Shipping"");
      System.out.println(""Shipping cost: "" + calculateShipping());
    } else {
      System.out.println(""Order not ready"");
    }
  }
  
  public double calculateShipping() {
	 	// declare conditional statement here
    if(shipping.equals(""Regular""))
    {
      return 0;
      
    }
    else if(shipping.equals(""Express"")){
      return 1.75;
    }
    else
    {
      return 0.50;
    }
 	}
  
  public static void main(String[] args) {
    // do not alter the main method!
    Order book = new Order(true, 9.99, ""Express"");
    Order chemistrySet = new Order(false, 72.50, ""Regular"");
    
    book.ship();
    chemistrySet.ship();
  }
}

Output:
High value item!
Shipping
Shipping cost: 1.75
Order not ready


public class Order {
boolean isFilled;
double billAmount;
String shipping;
public Order(boolean filled, double cost, String shippingMethod) {
if (cost > 24.00) {
System.out.println(“High value item!”);
}
isFilled = filled;
billAmount = cost;
shipping = shippingMethod;
}
public void ship() {
if (isFilled) {
System.out.println(“Shipping”);
System.out.println(""Shipping cost: "" + calculateShipping());
} else {
System.out.println(“Order not ready”);
}
}
public double calculateShipping() {
// declare conditional statement here
if (shipping.equals(“Regular”)){
return 0;
} else if (shipping.equals(“Express”)) {
return 1.75;
} else {
return 0.50;
}
}
public static void main(String args) {
// do not alter the main method!
Order book = new Order(true, 9.99, “Express”);
Order chemistrySet = new Order(false, 72.50, “Regular”);
book.ship();
chemistrySet.ship();

}
}
Here is my solution. Everything seems fine excepts that the console is printing out the statement “High value item!” and I’m not sure why given that the book cost is 9.99 when the book object is being created/instantiated.

yeah I’m confused as well.
The book object is being instantiated/created first, but the console prints out “high value item!” even though the book object has a cost of “9.99” which does not satisfy the if-else statement in the constructor method.

yes correct. We want to return a value, not the string that represents the value.

Hi there,
I managed to get it working by moving the if statement to the ship method. It seems the issue was being caused due to the if statement being inside the constructor method.
I’ve changed it from the variable cost to billAmount (which means if you were going to be expanding the program and billAmount was originally going to be cost + calculateShipping then you would need to declare a new variable i.e billTotal)


gist.github.com


https://gist.github.com/codecademydev/a8b2e25f71cb5b60c8cd51cc4060b6f5
Order.java
public class Order {
  boolean isFilled;
  double billAmount;
  String shipping;
  
  public Order(boolean filled, double cost, String shippingMethod) {
    isFilled = filled;
    billAmount = cost;
    shipping = shippingMethod;
  }
This file has been truncated. show original








I have the same issue, I’m so confused.
"
62,FAQ: Hello World: Java - Hello Java File!,"Get Help,Git",hello-world,34,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Hello Java File!” exercise from the lesson “Hello World: Java”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Hello Java File!


What programming language should I choose?

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
learn about in future lessons. String args is a placeholder for information we want to pass into our program. This syntax is necessary for the program to run but more advanced than we need to explore at the moment

This lesson is not explained well in the exercise instructions, specifically the lack of mentioning the semicolon after the close parenthesis of the print line. The semicolon to close out that line of code should be mentioned at the very least, if not highlighted for the beginner. It is very easily overlooked, and then if you click on “show me the correct answer” it simply replaces the code you wrote without showing you exactly what you did wrong.
The explanation of your name replacing “someName” in the instructions was also confusing to me. It gave me the impression that I was literally supposed to enter “someName” and then have another line of code that replaces “someName” with my own name.
The “Hint” section even further confused me by changing “Hello someName” from the instructions to “Howdy World!”… WTF?? Keep things simple, don’t keep changing things! This is the f*cking introduction for people who do not have the first clue about writing code or programming language!
Conclusion:
For a free trial section that’s supposed to entice people to spend their money on the rest of the program, it’s not going to convince many people that their money will be well-spent if they can’t even get through the introduction with a solid understanding of basic code structure.

Java is a very difficult first programming language, given its completely OOP, which means there a lots of concepts to grasp at once.
is this the first programming language you learn?

Yes it is rather difficult- that’s why I made the remarks I made. I feel the instructions need to be made more clear.
I have had an introduction to JavaScript, so I do have some basic understanding of programming language. This is the only reason that I realized I had left out my semicolon which I mentioned above; the tutorial did not guide me in this aspect to help me realize that I had forgotten to add a semicolon. I’m just saying there is room for improvement.

Step 2 won’t let me type. And I need help with it.

System.out.printIn(“Hello Diamond!”);
The code above is my own typed code. It was wrong.

This code is a solution. But it’s System.out.printIn is different than mine. It has this different type of “I” when I typed the code. Yet, mine is wrong and the solution is correct. Is this some sort of bug or it’s intentional?

Why do we use double quotes in system.out.println and what does it denotes?

double quotes are used for a string in Java

what is the function of the semicolon ( ; )?

The semicolon marks the end of a statement.

Yes I have to agree with many of the people above. This course is horribly explained. It is definitely not meant for beginners, otherwise it would explain much better than it does, because I got stuck on the 2nd part of the 1st course I even decided to try.

It would be really nice if I could get some help please… Still stuck on that same 2nd part and I have tried putting semicolon’s everywhere, all kinds of brackets, tried even typing it in different places and still doesn’t work. Where is everyone? I thought this was supposed to be an online academy where I can learn things and get help when I need it.

And where the ■■■■ is this ‘show me the correct answer’  button? I could probably see where I went wrong if I could see the correct answer, but there is no option to view the correct answer. So far I’m not very impressed here and I will probably find somewhere else that is much more useful, even if I do have to pay more. At least then I may learn something. If I don’t hear back from someone soon on this, then you just lost me as a paying customer.

Hello, @text1541353265. If you’ll post a link to the exercise you’re stuck on, and paste your code using the </> button. I’ll try to help you out.

Press Enter to go to a blank line, click that icon, and you will see this:





 text1541353265:

Still stuck on that same 2nd part and I have tried putting semicolon’s everywhere, all kinds of brackets, tried even typing it in different places and still doesn’t work.


Is this where you are having the problem?

The text editor has a file, HelloYou.java , that contains a HelloYou class with a main() method.
Inside main() , add a statement which prints Hello someName! , with your name replacing someName .
For example, if your name were “Maria,” the program would print Hello Maria! .


Thank you Midlinder! I appreciate your response very much. I apologize for the delay in responding to you; I am finally home from work. This is the code I have written down. I have followed the instructions exactly, or at least what instructions there are. Apparently I am missing something,  I would love and appreciate the help.
`public class HelloYou {
public static void main(String[Hello Mitch!] args); {
System.out.println(“Hello Mitch!”);
}
}`

I have read and re-read the text many times, but there is no instructions on where to even begin typing the code. I mean do I have to erase what is already typed on there and completely start with all of my own code? Or is there a particular spot where the code needs to be entered? There is no explanation of any kind that I have been able to find. Once again, I really appreciate the response and help. I was pretty discouraged earlier, but I am regaining my confidence in this course.

I understand this can be quite confusing at first. Java is a pretty big challenge if it is your first programming language. In this exercise, your code will go inside the ‘main()’ method. When we refer to the ‘inside’ of a method, we are referring to the curly braces that immediately follow the method declaration. For example:
public class HelloYou { //this is the opening curly brace for the class: HelloYou
  public static void main(String[] args) { //this is the opening curly brace for main()
  //Your code for the exercise goes here
  //everything between the opening { and closing } is inside the method
  } //this is the closing curly brace for main()
} //this is the closing curly brace for HelloYou

In this line which is the method declaration:



 text1541353265:

public static void main(String[Hello Mitch!] args); {


you made a few changes that will need to be changed back. You can click the ‘reset’ at the bottom of the screen where you typed your code that looks like this:

to reset the exercise, or you can change it manually to look like this:
public static void main(String[] args) {

There should be no semicolons on this line, and there shouldn’t be anything between the [ ]'s. Once you get the main() method declaration fixed, this line from your code should work as expected: System.out.println(“Hello Mitch!”);. Make sure you keep the semicolon at the end. That should be the only semicolon in the code editor when you’re finished.
let me know if this helps, or if you need additional assistance. Just FYI, Java, as I stated earlier, is not the easiest language. I’ve noticed that there aren’t a lot of fellow forum members who chime in to help with questions in Java. I myself am not by any stretch an expert in Java. I know C# pretty well, and Java is quite similar, so I am able to be of some assistance. I am happy to help when/if I can. Good luck && happy coding!


image.png1920×1080 231 KB

"
63,FAQ: Hello World: Java - Java Review: Putting It All Together,"Get Help,Git",hello-world,10,"

This community-built FAQ covers the “Java Review: Putting It All Together” exercise from the lesson “Hello World: Java”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Java Review: Putting It All Together


How do Java and JavaScript compare to one-another?

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","

image.png1366×768 130 KB


i think the error you get is quite descriptive: TimeLine.java:18: error ‘{’ expected
it tells you what is missing, as well where you forgot the curly bracket.

Hello,
follow op question to this screenshot. I get this error a lot, but codeacademy still excepts the solution, just as you see there. What is up with that? Also I don’t see how you can tell from this error where curly brackets are missing.


Where am I going wrong?

step 3 of the instructions is:
Inside of the curly braces for the main() method
i don’t see curly brackets for your main method


image.png2872×1654 370 KB

I’m not getting any errors within the terminal, but I continue to get the red text informing me of how to use “single line comment syntax”.  Currently, I am stuck on the third problem for this page.  Any tips?

The word “task” you lack “s”

want to thank you all who do some hints for us noobs.
it is worth

Review.java:2: error: ‘;’ expected
public static void main(String args) //The main method executes the tasks of the class
^
1 error
it gave me the go ahead… but also an error.
take your time answering. im gonna step away for a bit. ive got a headache.
Edit: im asking if im supposed to have an error and if not what is wrong. my code:
public class Review {
public static void main(String args) //The main method executes the tasks of the class
system.out.println(My first Java program from scratch!)
Review
}
"
64,FAQ: Conditionals and Control Flow - If-Then-Else,"Get Help,Git",,4,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “If-Then-Else” exercise from the lesson “Conditionals and Control Flow”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise If-Then-Else


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
You can also find further discussion and get answers to your questions over in #get-help.
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head to #get-help and #community:tips-and-resources. If you are wanting feedback or inspiration for a project, check out #project.
Looking for motivation to keep learning? Join our wider discussions in #community
Learn more about how to use this guide.
Found a bug? Report it online, or post in #community:Codecademy-Bug-Reporting
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
public class Order {
public static void main(String args) {
boolean isFilled = false;

// Write an if-then-else statement:

if (isFilled){
  System.out.println(""Shipping"");
} else {
  System.out.println(""Order not ready"");
  
}

}
}
Here is my solution for exercise 3/6

Why is the solution for
if (isFilled) {
  System.out.println(""Shipping."");

when is Filled is set to be a false Boolean value? Is it simply testing whether isFilled exists and can be called and if so it prints the String “shipping”?
if (isFilled = true) {
  System.out.println(""Shipping."");

However I also get the same message response for setting isFilled to true as the conditional when the value of isFilled is set to false (as given when you start the exercise.)

It’s a boolean variable, so it automatically checks if it’s true or not. By only putting if (isFilled), it is automatically checking if (isFilled==true).
isFilled=true would be incorrect, since you’re changing the variable to true as you’re doing it, so according to the lesson you wouldn’t get the right result.
"
65,FAQ: Learn Java: ArrayLists - Creating ArrayLists,"Get Help,Git",,3,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Creating ArrayLists” exercise from the lesson “Learn Java: ArrayLists”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Creating ArrayLists


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
You can also find further discussion and get answers to your questions over in #get-help.
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head to #get-help and #community:tips-and-resources. If you are wanting feedback or inspiration for a project, check out #project.
Looking for motivation to keep learning? Join our wider discussions in #community
Learn more about how to use this guide.
Found a bug? Report it online, or post in #community:Codecademy-Bug-Reporting
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
// import the ArrayList package here:
import java.util.ArrayList;

class ToDos {
  
  public static void main(String[] args) {
    
    // Create toDoList below:
    ArrayList<String> toDoList = new ArrayList<String>();
    
    
  }
  
}

My solution for step 2/9
very straightforward, the hint for question 1 will give you the answer and the explanation before the questions shows you how to declare and initialize array lists on separate lines and it will give you a template on how to do both in one line of code.

The examples are in the lesson helps big time but also those leads me to the below   rhetorical questions…
The lesson asks us to import certain things and to create a new arraylist. Now, there is one or two things to highlight when we do the latter. I was looking at the examples and I found this:
// Declaring:
ArrayList ages;
// Initializing:
ages = new ArrayList();
// Declaring and initializing in one line:
ArrayList babyNames = new ArrayList();
The above two lines seems to do the same things although in different ways I guess. Doing it in one line or two separate one should not matter? right? Maybe not Cuz I tried both and the top one is not working.
Another thing, so to quote the lesson:
2.
Create a new  ArrayList  that will contain  String  elements and call it  toDoList .
Maybe again it’s just me but I took it word by word so I created a new one. I don’t have to say that didnt work without initializing it as well…
So we can’t just create one but we have to initialize it too and we can only do it in one line? Otherwise it would have been a very straight forward lesson… 
"
66,FAQ: Learn Java: ArrayLists - Removing an Item,"Get Help,Git",,11,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Removing an Item” exercise from the lesson “Learn Java: ArrayLists”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Removing an Item


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
You can also find further discussion and get answers to your questions over in #get-help.
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head to #get-help and #community:tips-and-resources. If you are wanting feedback or inspiration for a project, check out #project.
Looking for motivation to keep learning? Join our wider discussions in #community
Learn more about how to use this guide.
Found a bug? Report it online, or post in #community:Codecademy-Bug-Reporting
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
My solution for step 7/9:
// Remove each to-do below:
    // Remove ""visit the crime scene"" from 
    // sherlocksToDos and poirotsToDos using remove().
    
    sherlocksToDos.remove(""visit the crime scene"");
    poirotsToDos.remove(""visit the crime scene"");
    
    // remove ""play violin"" from sherlocksToDos 
    sherlocksToDos.remove(""play violin"");


Due to the many advantages of the ArrayList over a simple array, are there cases at all in what i should prefer an array over an arrayList?
Thx for your input and support.

Is it possible to remove two items from Sherlock’s with one line of code?
I tried as below
sherlocksToDos.remove(0, 1);
and it gave me :

ToDos.java:27: error: no suitable method found for remove(int,int)
sherlocksToDos.remove(0, 1);
^
method Collection.remove(Object) is not applicable
(actual and formal argument lists differ in length)
method List.remove(Object) is not applicable
(actual and formal argument lists differ in length)
method List.remove(int) is not applicable
(actual and formal argument lists differ in length)
method AbstractCollection.remove(Object) is not applicable
(actual and formal argument lists differ in length)
method AbstractList.remove(int) is not applicable
(actual and formal argument lists differ in length)
method ArrayList.remove(int) is not applicable
(actual and formal argument lists differ in length)
method ArrayList.remove(Object) is not applicable
(actual and formal argument lists differ in length)
1 error

I wanted to try both solutions so below is how I wrote my code :
    sherlocksToDos.remove(0);
    sherlocksToDos.remove(0);
    poirotsToDos.remove(""visit the crime scene"");

it wouldn’t allow me to write as below, as (I guess) I’ve already removed the 0 index with the first line of code :
sherlocksToDos.remove(0);
sherlocksToDos.remove(1);
poirotsToDos.remove(“visit the crime scene”);




 wxxy118:

Is it possible to remove two items from Sherlock’s with one line of code?


possible, have you tried to use google to find the information you require?
what you want to do is not possible using remove, if you look at the documentation, you can verify this

Thanks for the reply and also for reminding me about google.
I got used to checking the Forum.
Found that with remove(), I can only remove one item, and to remove multiple, I can use removeAll().
Thanks again.

So you can remove by specifying the index, or the value, to remove.  That’s great and all, but the first thing that pops into my mind is, what if it is an array list of integers?
ArrayList example = new ArrayList();
example.add(4);
example.add(12);
example.add(0);
example.add(1);
example.remove(1);
Will it remove the element at index 1, leaving me with 4, 0, 1?  Or will it remove the element with the value 1, leaving me with 4, 12, 0?  And whichever one of those ends up being the case, how do I make it work the other way if I need to?

Given you already have the code, would be simple to find out? Simple print the array list to see which value/index got removed. Or consult the documentation on the remove method (which very likely include the working of the method)

What if I declare an ArrayList of Integers, When I use .remove by specifying the value to remove my question is  how Java differentiate between is it an index or is it a value remove?

It says we can remove using the index # or by specifying the value.
What would be the case if we were removing items from a integer array list. Would it assume that I want to remove a certain number or that I am referring to the index number, as they are both integers.

import java.util.ArrayList;
class ToDos {
public static void main(String args) {
// Sherlock
ArrayList<String> sherlocksToDos = new ArrayList<String>();

sherlocksToDos.add(""visit the crime scene"");
sherlocksToDos.add(""play violin"");
sherlocksToDos.add(""interview suspects"");
sherlocksToDos.add(""solve the case"");
sherlocksToDos.add(""apprehend the criminal"");

// Poirot
ArrayList<String> poirotsToDos = new ArrayList<String>();

poirotsToDos.add(""visit the crime scene"");
poirotsToDos.add(""interview suspects"");
poirotsToDos.add(""let the little grey cells do their work"");
poirotsToDos.add(""trim mustache"");
poirotsToDos.add(""call all suspects together"");
poirotsToDos.add(""reveal the truth of the crime"");

// Remove each to-do below:
sherlocksToDos.remove(1);
poirotsToDos.remove(0);
sherlocksToDos.remove(0);

 
  
System.out.println(sherlocksToDos.toString() + ""\n"");
System.out.println(poirotsToDos.toString());

}
}
** It’s possible to remove members from the Array-list with their sequence number, but then you need to start removing from the highest number. If you remove the member 0, the last member in the position 1 transfer to the position 0, which changes the whole sequence.**
"
67,FAQ: Conditionals and Control Flow - Switch Statement,"Get Help,Git",,8,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Switch Statement” exercise from the lesson “Conditionals and Control Flow”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Switch Statement


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
You can also find further discussion and get answers to your questions over in #get-help.
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head to #get-help and #community:tips-and-resources. If you are wanting feedback or inspiration for a project, check out #project.
Looking for motivation to keep learning? Join our wider discussions in #community
Learn more about how to use this guide.
Found a bug? Report it online, or post in #community:Codecademy-Bug-Reporting
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
I am troubled by this exercise pls somebody help me.
https://www.codecademy.com/courses/learn-java/lessons/java-conditionals-and-control-flow/exercises/switch?action=resume_content_item

Hey @yokel2473029837, welcome to the forums!
Would you please look at this topic and add a little bit more to your question?




How to ask good questions (and get good answers) Getting Started


    In general, your post will get a good answer if you’ve remembered to do the following: 


Always search for existing answers first.
Provide as much information and context as possible.
Format your code.
Follow the Community Guidelines.


Before Starting a Topic, Search for Existing Answers
Before you start a new topic, check existing posts and use Google to see if your questions have already been addressed.  This will very often give you an immediate answer! Cryptic error messages are particular…
  


  
  public double calculateShipping() {
    double shippingCost;
	 	// declare switch statement here
    switch (shipping) {
      case ""Regular"":
        shippingCost = 0;
        break;
      case ""Express"":
        shippingCost = 1.75;
        break;
      default:
        shippingCost = 0.50;
    }
    
    return shippingCost;
 }
  

My solution for the exercise 5/6
The reason I used the “shipping” variable inside the paranthesis of the switch block is because…
when we create/instantiate the objects “book” and “chemistrySet” in the main() method…
the shipping preferences “Regular” and “Express” are stored in the “shipping” variable
( you can see this in the constructor method).

Why do we need the break in this case? Can someone explain more about break? Why don’t the switch just stop by itself? Thanks!

Essentially, a switch will match an expression’s value to a case clause, and return the associated statement.
switch (expression) {
  case 1:
    // statement to be executed
  case 2: 
    // statement to be executed
  default:
    // default statement to be executed
}

When it finds what it’s looking for, it gives you back the information that you need.
But what if you had hundreds of cases? You’d have to go through all of them, every time.
Let’s say that you have 500 cases in your switch. And case 1 matches the given expression.
Well you’d still have to go through all other 499 cases. Just to return the statement of case 1.
That’s not efficient at all.
So we add break statements to break out of the switch and return the information we were looking for.
switch (expression) {
  case 1:
    // statement to be executed
    break;
  case 2: 
    // statement to be executed
    break;
  ...
  case 500:
    // statement to be executed
    break;
  default:
    // default statement to be executed
}

If case 1 matches the expression’s value, it will break and return the associated statement, without going through all the other cases. 499 of them in this example.
Much more efficient.
By default the switch won’t just stop by itself. It’s not that smart, you have to tell the program what to do in each situation. It doesn’t think, it executes commands.
Hope this answers your question 

Thanks! That’s really easy to understand. I have one more question: is there any case that the dev get creative and doesn’t use break? Maybe to return more than one statement?

Hi All,
I am looking for the cheatsheet for ‘Conditionals and Control Flow’. The link says it is not ready yet but I am not sure if this is correct. The link is as follows:
https://www.codecademy.com/learn/learn-java/modules/learn-java-conditionals-control-flow-u/cheatsheet
Thanks,
Igneos
"
68,FAQ: Inheritance and Polymorphism - Child Classes in Arrays and ArrayLists,"Get Help,Git",,13,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Child Classes in Arrays and ArrayLists” exercise from the lesson “Inheritance and Polymorphism”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Child Classes in Arrays and ArrayLists


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
You can also find further discussion and get answers to your questions over in #get-help.
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head to #get-help and #community:tips-and-resources. If you are wanting feedback or inspiration for a project, check out #project.
Looking for motivation to keep learning? Join our wider discussions in #community
Learn more about how to use this guide.
Found a bug? Report it online, or post in #community:Codecademy-Bug-Reporting
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
My solution to the problem 8/9:
// Add your code below:
    Noodle[] allTheNoodles = {spaghetti, ramen, pho};
    
    for (Noodle noodle : allTheNoodles) {
      System.out.println(noodle.getCookPrep());
    } // end for-each loop


I got the right answer just following the syntax in the example, but I don’t quite understand the usage of the colon ( : ), and I don’t believe it was explained earlier. Can someone please walk me through it? I can kind of infer how it works, but would appreciate someone who actually knows explain it so I don’t get it wrong. Thanks!

I think it is explained in the for-each lesson of loops. The syntax(element:b) means that ‘for the element  in a list of elements in b’ in which it does an operation or something to each element in b. Like the above example~
for (Noodle noodle : allTheNoodles) {
System.out.println(noodle.getCookPrep());
}
infers that for each noodle in allTheNoodles (do something to each noodle, print etc)!

There’s this section in the instructions:
Monster dracula, wolfman, zombie1;

dracula = new Vampire();
wolfman = new Werewolf();
zombie1 = new Zombie();

Monster[] monsters = {dracula, wolfman, zombie1};

I don’t understand the syntax at the top, or what its function is. Does it set dracula, wolfman, and zombie1 as Monster types? Can this code run without that line?

Thanks for explaining it! I have been looking at a few other resources (after having completed the Codecademy Java lessons) and it cemented what I had originally inferred. I think I originally was confused as “noodle” was not defined anywhere else and the syntax just threw me for a bit of a loop (no pun intended). Thanks again for explaining it, much appreciated!!

Under the subject Inheritance, can someone please advise me how I can create a child class (file) that compiles in IntelliJ IDEA? I do not have problems with the code. My problem is in linking the Child to the Parent and achieve compilation.
Below is the code for the 2nd lesson on Inheritance:
class Noodle {
double lengthInCentimeters;
String shape;
String texture = “brittle”;
public void cook() {
this.texture = ""cooked"";

}
public static void main(String args) {
Spaghetti spaghettiPomodoro = new Spaghetti();

System.out.println(spaghettiPomodoro.texture);

}
}
I googled for a solution, the only advise that was close to what I needed was from StackOverflow, and I qoute:
"" If you are already in the Project View, press Alt+Insert ( New ) |  Class . Project View can be activated via Alt+1.
To create a new class in the  same directory  as the current one use Ctrl+Alt+Insert ( New… ).
You can also do it from the Navigation Bar, press Alt+Home, then choose package with arrow keys, then press Alt+Insert.
Another useful shortcut is View | Select In (Alt+F1), Project (1), then Alt+Insert to create a class near the existing one or use arrow keys to navigate through the packages.
And yet another way is to just type the class name in the existing code where you want to use it, IDEA will highlight it in red as it doesn’t exist yet, then press Alt+Enter for the Intention Actions pop-up, choose  Create Class .""
I tried this: ctrl + alt + insert. This took me to a GUI where I was asked to name the class, and, in addition,  choose from “Class”, “Interface”, “Enum” and “Annotation”. For name I typed in “Spaghetti” and for “Kind”, I selected “Class”. This created a seemingly child class “Spaghetti” as a sub-file to “Noodle”. I was happy as there were no red squiggles in my code, but my happiness was short-lived as compilation failed. Can someone tell me what am I doing wrong?

Thanks guys. I made a breakthrough. Simply press Ctrl + Alt + Insert, name your child class, and select “class”.  Back to your main IDEA environment, highlight parent file choose compile (Parent file name) and you are done. The trick was on which file to compile. DO NOT compile the child file, but the parent file.

Hi! in the line of code where we have
for (Noodle noodle : allTheNoodles) {}
how can we use “noodle” in the for-each loop if it hasn’t been defined yet?

You’re not exactly defining anything here. You’re basically just telling the computer to make noodle equal whatever item in the list the loop is currently on.

Nice, thank you for explaining this. I was looking for the same thing.

It is the same as following:
Monster dracula = new Vampire();
Monster wolfman = new Werewolf();
Monster zombie1 = new Zombie();
You can also declare them as
Vampire dracula = new Vampire();
Werewolf wolfman = new Werewolf();
Zombie zombie1 = new Zombie();

You are essentially casting each member of allTheNoodles to a Object Type on the fly.
"
69,FAQ: Learn Java: Arrays - String[] args,"Get Help,Git",,8,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “String args” exercise from the lesson “Learn Java: Arrays”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise String[] args


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
You can also find further discussion and get answers to your questions over in #get-help.
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head to #get-help and #community:tips-and-resources. If you are wanting feedback or inspiration for a project, check out #project.
Looking for motivation to keep learning? Join our wider discussions in #community
Learn more about how to use this guide.
Found a bug? Report it online, or post in #community:Codecademy-Bug-Reporting
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
Here in line #12
Newsfeed feed;
What we are doing here? Can anyone please expalain it

I was confused at first too but then it clicked.
Usually when we’ve been creating objects with our constructor methods, we’ve named it and defined it on the same line, for example:
Student james = new Student(19, ""English"");


but just like variables, we don’t need to define them right away. We can do it on two lines:
Student james;
james = new Student(19, ""English"")'

So since we don’t know what Strings exactly feed is going to contain yet, we’re merely putting it out there that there is going to be a new object for Newsfeed. Then depending on which if code block runs, we fill in the new object with its info later.

Why does line 32 contain feed.topics? Why reference topics here?

because it use ‘String array’ in class Newsfeed

Hello,
If we can understand the ‘if, else if, and else’ statements running their respective line of code depending on what the argument is typed in the terminal, we can trace back to the information that is passed up in this entire code.
For example:
Terminal input: java Newsfeed Human
If we start reading our code at the main method, we can trace back this line of code:
feed = new Newsfeed(humanTopics);
This line uses ‘humanTopics’ as an argument, which is then passed to the constructor:
public Newsfeed(String initialTopics) {
topics = initialTopics;
}
This makes ‘humanTopics’ into ‘topics’:
topics = initialTopics;
which traces back to the Newsfeed class:
String topics;
meaning that to print the array that we choose in the terminal (Human) in the ‘if else’ lines of code, we have to use the ‘feed’ object along with the code ‘topics’ (feed.topics). Otherwise, if we experiment with this, we can try using (feed.humanTopics) instead and go straight to printing it right out of the ‘if else’ statement. The problem with doing this is that not only do we get an error, but logically we are always going to have the ‘humanTopics’ array printed out regardless if we input java Newsfeed Robot in the terminal. I suggest experimenting with this in a notepad with this java class and terminal because Codecademy in this module saves your progress in a manner that might hinder anyone to continuously experiment outside the module curriculum.
I hope this makes it clear for every one and thank you for helping me understand your response about the ‘Newsfeed feed;’.
Respectfully,
Reddzl J Tuano

After completing the instruction for this exercise I ran the code and typed in the terminal

java Newsfeed Robot

But I all I got was

Error: Could not find or load main class Newsfeed
Caused by: java.lang.ClassNotFoundException: Newsfeed

I don’t know why this comes up.
Please help.
Icdrasyl

Hi icdrasyl,
You will have to first compile the java class in bash using the following command:
javac Newsfeed.java
Thereafter you will be able to execute the following:
java Newsfeed Robot
java Newsfeed Human
"
70,FAQ: Debugging - Syntax Errors,"Get Help,Git",,4,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Syntax Errors” exercise from the lesson “Debugging”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Syntax Errors


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
You can also find further discussion and get answers to your questions over in #get-help.
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head to #get-help and #community:tips-and-resources. If you are wanting feedback or inspiration for a project, check out #project.
Looking for motivation to keep learning? Join our wider discussions in #community
Learn more about how to use this guide.
Found a bug? Report it online, or post in #community:Codecademy-Bug-Reporting
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
Still get error after semi-colon ( is added… see attached screen-shot.
Capture|690x305

Seems like forum software changed the semicolon ; into an emoticon!?

I have found the error in syntax, but it seems to me as if the code runs perfectly fine regardless.
"
71,FAQ: Hello World: Java - Compilation: Creating Executables,"Get Help,Git",hello-world,33,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Compilation: Creating Executables” exercise from the lesson “Hello World: Java”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Compilation: Creating Executables


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
I  need help with running the list on the terminal. I keep entering 1s but it never works for some reason

Hi,
Its a L not a 1.  Don`t worry I did the same mistake. 

but it is not working

Hello, @mega3707257709! Welcome to the forum.
Did you type ls in the far right panel after the $ prompt, and then click enter?

same thing happened to me, if I type 1s, it doesn’t work, if I copy the 1s written by them and paste it in, it does… No idea why…

It’s ls not 1s => lowercase L and s not the number 1 and s. It’s a command that is short for list.

oh, sorry. Thank you :).

No worries. The distinction between l and 1 is pretty subtle, and without a coding background it’s pretty easy to mistake what the instructions are asking for.

Hello, the same thing happened to me, Solution: type ls and ENTER

What is the compilation command

Hello I am having a similar issue. I write the command ls, i get the list but the step doesnt complete. I am using firefox.

Hello, @stopmyego. Welcome to the forum.
Did you click the Check Work button at the bottom of the console window after executing the ls command? You’ll need to click Check Work after each step in this exercise.

On a few occasions when trying to run the terminal I get an error even though I think I’m inputting exactly what I need to. This happened on the previous exercise as well, I had to restart the exercise and input the exact same thing for it to succeed.
Or I’m crazy, can somebody check this work?

CompilingError.jpg1913×848 158 KB

Thanks!

For step 2 I am entering “javac Compiling.java” and it won’t work (I did’t type in the quotations). Anyone know why it is not working?

I Have successfully compile and execute the program terminal shows the correct output but  i cant go for next option.

Hello, @tag4411326920. Welcome to the forum.
Did you also click the Check Work button at the bottom of the console after executing the program?

I’ve done all the necessary things in order for me to complete the task but the “Next” Button won’t light up ??? 
Capture.PNG1355×596 63.8 KB


WELLLPP IT BUGGED. I refreshed the browser anddd there the button lighten up.

Having the same problem here executive the file after compiling : https://www.codecademy.com/courses/learn-java/lessons/hello-world-java/exercises/compilation-creating-executables?action=resume_content_item
"
72,FAQ: Learn Java: ArrayLists - Adding an Item,"Get Help,Git",,3,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Adding an Item” exercise from the lesson “Learn Java: ArrayLists”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Adding an Item


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
You can also find further discussion and get answers to your questions over in #get-help.
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head to #get-help and #community:tips-and-resources. If you are wanting feedback or inspiration for a project, check out #project.
Looking for motivation to keep learning? Join our wider discussions in #community
Learn more about how to use this guide.
Found a bug? Report it online, or post in #community:Codecademy-Bug-Reporting
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
import java.util.ArrayList;

class ToDos {
    
  public static void main(String[] args) {
    
    ArrayList<String> toDoList = new ArrayList<String>();
    String toDo1 = ""Water plants"";
    // Add more to-dos here:
    String toDo2 = ""Clean gutters"";
    String toDo3 = ""Grocery shopping"";
    
    // Add to-dos to toDoList
    toDoList.add(toDo1);
    toDoList.add(toDo2);
    toDoList.add(toDo3);
    
    System.out.println(toDoList);
      
    
  }
  
}

my solution for step 3/9… You have to choose/create the “tasks” strings on your own. These two are things I have to do soon, so I chose those for my program.

when we print arrayList why it not printing out the location of its memory like the way it did with Array?
"
73,FAQ: Java: Introduction to Classes - Classes: Constructor Parameters,"Get Help,Git",,11,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Classes: Constructor Parameters” exercise from the lesson “Java: Introduction to Classes”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Classes: Constructor Parameters


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
so  confusing. how am i the first person to post a reply on this discussion board?

the FAQ feature is reasonable new, many people still make new topics rather then replying to a FAQ topic.
wiki-bot made this topic, we both posted a reply in this topic. But the forum has many topics, so what do you mean by discussion board? Here is a list of the latest topics:
https://discuss.codecademy.com/latest
see? Quite a bit of activity
Anyway, do you have an actually question?

Hi.  Thanks for your reply.  Im just going through the lessons and then visiting the discussion board associated with each lesson to get clarification on the lessons.  Several of them don’t have any comments yet.  I didn’t realize others were posting questions elsewhere.  I’ll Look at those other questions. 
Jon H

what is the difference between constructor parameter and main() method’s parameter? are they same?

the main method is called by the Java compiler/JVM. Without main, our program won’t run
while the constructor allows you to set instance fields.

I noticed that in the examples the instance field names are usually different from the instance parameters, while at the same time they are all being mapped. Is there any naming convention? I imagine in theory they could all have the same names (eg. product = product;).

why is it not necessary to write - Store  variableName = new Store() but just new store() ? how does that work?

I am wondering why keyword .this is ommited in the explanation for that lesson when assigning parameter value to the field. Why is that? And what difference does it make if .this would be added?
public class Car {
  String color;

  // constructor method with a parameter
  public Car(String carColor) {
    // parameter value assigned to the field
    color = carColor;
  }
  public static void main(String[] args) {
    // program tasks
  }
}

Looking on exercises for next lessons ( INHERITANCE AND POLYMORPHISM for example) all constructors use .this:
class Noodle {
  
  double lengthInCentimeters;
  double widthInCentimeters;
  String shape;
  String ingredients;
  String texture = ""brittle"";
  
  Noodle(double lenInCent, double wthInCent, String shp, String ingr) {
    
    this.lengthInCentimeters = lenInCent;
    this.widthInCentimeters = wthInCent;
    this.shape = shp;
    this.ingredients = ingr;
    
  }
}

Can somebode explain that please?

Hi! 
I believe this is a rather basic question, but this is something I can’t figure out. I’m still struggling with the basics, I’m afraid 
Looking at the following code in the exercise:
public class Car {
String color; // constructor method with a parameter
public Car(String carColor) {
// parameter value assigned to the field
color = carColor;
}
public static void main(String[] args) {
// program tasks
}
}

I believe I understand what’s going on. I declare the class Car, and then I create a new instance of the class using the constructor within the class. This class accepts a string variable to define the car color. So, if later, I use the following code:
new Car(""blue"");
// carColor references ""blue"" inside constructor
new Car(""yellow"");
// carColor references ""yellow"" inside constructor

I can create an instance of Car of blue color or yellow color. So far, so good.
But, what’s the meaning of  String color;  right after declaring the  public class Car {  ? In other words, why do I need to declare a string variable  color  and then assign the value of  color  to  carColor  in the constructor? Why not simply declaring the  String color  variable inside the constructor?
This  String color  inside the Car class and  color = carColor  inside the constructor looks redundant to me.
Many thanks!

String color right after public class Car  is a member variable/field.



 system5403004511:

Why not simply declaring the String color variable inside the constructor?


scope rules. Declaring a variable within a method makes it local. Then we can’t access the color in other methods
the member variable/field can be accessed in other methods of the class. So we could make a printColor method which would print something like: the color of the car is: [color], where [color] is the member variable/field
Maybe that is a good challenge? Go ahead and implement this method 
There is more to member variables/fields (with inheritance and so forth), but that is for later
"
74,FAQ: Learn Java: Variables - String,"Get Help,Git",,7,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “String” exercise from the lesson “Learn Java: Variables”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise String


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
I don’t understand what this is asking me to do. I can’t remember the concept from the previous screen and it’s really frustrating not being able to learn such a simple language.

I understand your frustration. Learning to code or to program can be very challenging, but don’t worry: that’s the fun of being a Programmer   Keep practicing and making those mistakes. That’s what Programmers do all the time. It’s a lifestyle and practice makes perfect. Making mistakes is how Programmers learn to be good Programmers. Stick with it. So far, so good 

I’m not sure I could commit to a programming ‘lifestyle’, trying to understand this stuff is seriously making me crazy. I just wanted to learn some skills to be more employable. I spend hours each day working on these tutorials, I can’t really commit beyond the time I have 

I understand. While Java is generally not the first coding language one would want to go with while learning to code, I highly recommend JavaScript: Drawing & Animation as a first coding language. Best wishes!

Thank you for the recommendation, I’m currently doing the Intro to JavaScript course for at least the 3rd time…it’s not easy at all. I’m thinking I may not be suited to programming, i wish I didn’t need it to have a job.

Is there a reason why String is capitalized, but all the other data types are lowercase? This seems like an infuriating inconsistency.
"
75,FAQ: Learn Java: Methods - Returns,"Get Help,Git",,8,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Returns” exercise from the lesson “Learn Java: Methods”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Returns


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
Instead of just using the return keyword, wouldn’t it just be possible to simply type in System.out.println(tires) and then call that method in main? By the way this is related to the example that they put in the instructions.

As you progress through learning Java and other languages should you choose to do so, you’ll find that returning values is extremely useful. You could just print the number of tires to the console, but if you wanted to do something else with that value it would be lost if the method didn’t return it to the line of code where the method was called. When returned, we could use the value in an equation, assign it to a variable for later use, send it as an argument to be used as a parameter in another method, etc.

Basically I get the systematic of  the taskflow among the main() method and the other methods. But why does not need the  “getPriceWithTax” method parameters?

There is nothing to input. We already have the price defined for the entire class. As a defined variable it is accessible everywhere, so we’re taking that price and using a mathematical equation to include taxes. Nothing is needed to be input into that method for this equation.

Coming from Python, it’s interesting to note that I could not write
return double price + price * 0.08;

It just seems weird to generate a local variable that shouldn’t be strictly necessary.




 method2021067789:

shouldn’t be strictly necessary


It isn’t. This would have worked:
return price + price * 0.08;

It probably wouldn’t pass the SCT for the exercise, but it would be syntactically correct.
Your problem was trying to declare a new double variable named price, make an assignment to it including it’s own unassigned value and return it all on one line.

Ah, thank you for the clarification! I saw Java’s need for explic…ency? and hoped for consistency. Not the case, I guess.
"
76,FAQ: Conditionals and Control Flow - Review,"Get Help,Git",,27,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Review” exercise from the lesson “Conditionals and Control Flow”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Review


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
You can also find further discussion and get answers to your questions over in #get-help.
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head to #get-help and #community:tips-and-resources. If you are wanting feedback or inspiration for a project, check out #project.
Looking for motivation to keep learning? Join our wider discussions in #community
Learn more about how to use this guide.
Found a bug? Report it online, or post in #community:Codecademy-Bug-Reporting
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
I don’t really understand what they’re asking us to do in this exercise.

That is up to you, its a review exercise. You can use this to fiddle around with the code and test the code.
The exercise suggests to make different orders to test all the different scenarios/condition you have.

The code appears to be broken. It only returns high or low value item. Are we supposed to fix the code or is that a mistake?

What code do you have? This FAQ belongs to a review exercises, theses exercises allow to fiddle with what you just learned

Hi! I have  a problem in the Review of Conditionals and Control flow. We need to create different Order instances and see if we can run the code in all the different conditional blocks.
In main, I have created:
Order myOrder = new Order(true, 134.50, ""Express"");
    System.out.println(myOrder.calculateShipping);

And it shows a mistake. What am I doing wrong?

calculateShipping is a method, calling a method requires parentheses.
also, the syntax you currently use is for accessing instance fields:
System.out.println(myOrder.billAmount);


Thanks a lot! Now it´s working;))

Hello, just wanted to ask why the cheatsheet to this lesson isn’t available.

Order myOrder = New Order(true, 5.99, “Express”);
  System.out.println(myOrder.billAmount);

I don’t understand what’s wrong. (I wrote this in main as an instance and it isn’t working)

Can i see your full code?

Nevermind, it works now, thanks for replying.

So, I’m don’t understand exactly how i do orders.
Can someone send some help?

i feel stuck when i try to calling methods

you create an instance ( ex. Order gamingMouse = New Order (true, 15.99, “Express”);
System.out.println(gamingMouse.shipping);
Once you’ve created the instance, call in the method (I guess, hope this helps its hard to explain, you can also look at older messages in this forum and see if it helps)

My code will only say 21.0 can anyone help
Order lemonade = new Order(false, 21, “”);
System.out.println(lemonade.billAmount);




 design4838383578:

My code will only say 21.0 can anyone help


What else did you expect then?

uhh for there to be the false and for there to be the default thing




 design4838383578:

uhh for there to be the false


and why? I don’t understand what the problem is. The code works, and does what you expect.



 design4838383578:

and for there to be the default thing


sorry, could you clarify this? I have no idea what you mean by “and for there to be a default thing”. Could mean anything.

in the code there is boolean isFilled and String shippingMethod but the only one that shows in text is double cost
"
77,FAQ: Learn Java: Manipulating Variables - Review,"Get Help,Git",variable-data-type,5,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Review” exercise from the lesson “Learn Java: Manipulating Variables”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Review


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
For the love of God, fix question 4.

I had the same problem. It says “expected to see A” printed and it actually did but I didn’t pass that question. Why?

did you remember to add the “…” on the end of the line?

I tried that too and it doesn’t work.
"
78,FAQ: Learn Java: Methods - Adding Parameters,"Get Help,Git",,4,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Adding Parameters” exercise from the lesson “Learn Java: Methods”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Adding Parameters


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
what if we do not use the constructor method ? Can we still use for example: public void startEngine method?

hey program starts from main(), so we have to call methods in class from main().  to use class features you have to define a object. therefore, you have to create a object .

Hey @beta9836886690, @giga3691109859, welcome to the forums! @giga3691109859 is right… you have to define a main method otherwise Java will throw an error. (that is where the program starts from, after all.)
"
79,FAQ: Learn Java: Arrays - Length,"Get Help,Git",,5,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Length” exercise from the lesson “Learn Java: Arrays”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Length


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
You can also find further discussion and get answers to your questions over in #get-help.
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head to #get-help and #community:tips-and-resources. If you are wanting feedback or inspiration for a project, check out #project.
Looking for motivation to keep learning? Join our wider discussions in #community
Learn more about how to use this guide.
Found a bug? Report it online, or post in #community:Codecademy-Bug-Reporting
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
import java.util.Arrays;

public class Newsfeed {
  
  String[] topics = {""Opinion"", ""Tech"", ""Science"", ""Health""};
  int[] views = {0, 0, 0, 0};
  
  public Newsfeed(){

  }
    
  public String[] getTopics(){
    return topics;
  }
  
  public int getNumTopics(){
    return topics.length;
    
  }
  
  public static void main(String[] args){
    Newsfeed sampleFeed = new Newsfeed();
    
    System.out.println(""The number of topics is ""+ sampleFeed.getNumTopics());
   
  }
}


my solution for exercise 6/8

What is the different between length in a String class and length in Array Class

How come when I write “System.out.println(topics.length);” I get an error?

The lesson said to to return the length.
"
80,FAQ: Learn Java: ArrayLists - ArrayList Size,"Get Help,Git",,5,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “ArrayList Size” exercise from the lesson “Learn Java: ArrayLists”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise ArrayList Size


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
You can also find further discussion and get answers to your questions over in #get-help.
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head to #get-help and #community:tips-and-resources. If you are wanting feedback or inspiration for a project, check out #project.
Looking for motivation to keep learning? Join our wider discussions in #community
Learn more about how to use this guide.
Found a bug? Report it online, or post in #community:Codecademy-Bug-Reporting
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
Hi Guys,
Actually I understood for the task: “So who has more to do? Print the name of the detective whose to-do list is longer. Was it Sherlock or Poirot?”
… that we should implement code that checks which ArrayList is bigger and then print it.
I would really like to know how to do that.
And I don’t mean by using a simple
if (“Sherlock > Poirot”) {
“print Sherlock”
} else {
“print Poirot”
}
I mean code that works for any amount of input ArrayLists.
Thanks in Advance

Hello, @davidgiuliano8613870.
Welcome to the forums.
You’re getting a little ahead of the tutorial, but something like this may be what you’re inquiring about.

    if(sherlocksToDos.size() > poirotsToDos.size()) {
      System.out.println(""Sherlock"");
    } else if(sherlocksToDos.size() < poirotsToDos.size()) {
      System.out.println(""Poirot"");
    } else {
      System.out.println(""Both Sherlock and Poirot have the same number of things to do."");
    }

Happy coding!


import java.util.ArrayList;

class ToDos {
    
  public static void main(String[] args) {
    
    // Sherlock
    ArrayList<String> sherlocksToDos = new ArrayList<String>();
    
    sherlocksToDos.add(""visit the crime scene"");
    sherlocksToDos.add(""play violin"");
    sherlocksToDos.add(""interview suspects"");
    sherlocksToDos.add(""solve the case"");
    sherlocksToDos.add(""apprehend the criminal"");
    
    // Poirot
    ArrayList<String> poirotsToDos = new ArrayList<String>();
    
    poirotsToDos.add(""visit the crime scene"");
    poirotsToDos.add(""interview suspects"");
    poirotsToDos.add(""let the little grey cells do their work"");
    poirotsToDos.add(""trim mustache"");
    poirotsToDos.add(""call all suspects together"");
    poirotsToDos.add(""reveal the truth of the crime"");
    
    // Print the size of each ArrayList below:
    
    System.out.println(sherlocksToDos.size());
    System.out.println(poirotsToDos.size());  
    
    // Print the name of the detective with the larger to-do list:
    System.out.println(""poirot"");
  }
  
}

My solution for exercise 4/9, both question’s solutions can be found in this code

Hello. My question is… Why do we use  the size() method for ArrayLists instead of the .length property for Arrays? Any help would be appreciated.
"
81,FAQ: Inheritance and Polymorphism - Inheriting the Constructor,"Get Help,Git",,3,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Inheriting the Constructor” exercise from the lesson “Inheritance and Polymorphism”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Inheriting the Constructor


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
You can also find further discussion and get answers to your questions over in #get-help.
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head to #get-help and #community:tips-and-resources. If you are wanting feedback or inspiration for a project, check out #project.
Looking for motivation to keep learning? Join our wider discussions in #community
Learn more about how to use this guide.
Found a bug? Report it online, or post in #community:Codecademy-Bug-Reporting
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
Thanks everyone!
So in this “inheriting the Constructor” topic, “Noodle.java” is the parent class and in a different file, “Pho.java” is the child class, are there any rules to link two different files without importing one file in the other? I mean, for example…once the Pho class inherits from Noodle in Pho.java, we go back to Noodle.java and create a new Pho object. I understand they are linked, but is there any rule? Do They have to be in the same directory? or only with the name is enough??

Hey @patodeville, maybe I can help you. I am not on this lesson yet, but  usually you have to specify the full file path if the file you are trying to import is not in the same directory.
Hope this will help!
But, if the file is in the same directory…
you can use
import ./<filename>

where filename is the name of the file.
P.S. I may not be correct, as I am not on this lesson yet
"
82,FAQ: Learn Java: Arrays - Introduction,"Get Help,Git",,2,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Introduction” exercise from the lesson “Learn Java: Arrays”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Introduction


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
You can also find further discussion and get answers to your questions over in #get-help.
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head to #get-help and #community:tips-and-resources. If you are wanting feedback or inspiration for a project, check out #project.
Looking for motivation to keep learning? Join our wider discussions in #community
Learn more about how to use this guide.
Found a bug? Report it online, or post in #community:Codecademy-Bug-Reporting
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
Why do array indices start with zero not one?
"
83,FAQ: Learn Java: Methods - Reassigning Instance Fields,"Get Help,Git",,19,"

This community-built FAQ covers the “Reassigning Instance Fields” exercise from the lesson “Learn Java: Methods”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Reassigning Instance Fields


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
Ok, I’m getting “Non static variable price cannot be non-static variable price cannot be referenced from a static context
System.out.println(price);”
Error. I’ve obviously goofed something, but I can’t see what the goof is! HELP! (Be gentle, I’m sure it’s going to be something stupid, because I’m on caffeine and nervous energy with this exercise)
public class Store {
// instance fields
String productType;
double price;
// constructor method
public Store(String product, double initialPrice) {
productType = product;
price = initialPrice;
}
// increase price method
public void increasePrice(double priceToAdd){
double newPrice = price + priceToAdd;
double price = newPrice;
}
// main method
public static void main(String args) {
Store lemonadeStand = new Store(“Lemonade”, 3.75);
System.out.println(lemonadeStand.price);
lemonadeStand.increasePrice(1.5);
System.out.println(price);
}
}

Hi!
This is copy-paste from the lesson.
public static void main(String args){
SavingsAccount myAccount = new SavingsAccount(2000);
System.out.println(myAccount.balance);
SavingsAccount.deposit(100);
System.out.println(myAccount.balance);
}
Could you please check if there this line is correct…
SavingsAccount.deposit(100);
Shouldn’t it be: myAccount.deposit(100)?
tnx 

Hi,
try with
System.out.println(lemonadeStand.price);
also in the last line of the main method
Br, M.

Came across the same thing, you can’t call SavingsAccount.deposit(100) in the same way that we can’t use Store.increasePrice(1.5), so I think that needs to be looked into

Hi adriennewrn,
The issue is when you created an object of the class Store i.e. “Store lemonadeStand = new Store(“Lemonade”, 3.75)” the name of the thing we need to call the “price” method on is “lemonadeStand”
Such that, what martinam080 said should fix the error as he is now (with dot notation) calling the “price” method on the variable lemonadeStand. It’s also worth noting that when you did create this object aka instance variable you declared with it, it’s type which in this case was Store. Thinking about it this way helps me so I thought it might help you too. In all variable declarations we always include the type whether that is “int,” “double,” “string,” or in this case “Store”
Hope that helps

Hey guys,
I use VSCode to do additional Java coding and sure enough when I tried to compile this code it produces that same error. So yup you guys are right. Needs to be changed to:
myAccount.deposit(100)
Most learners may not catch that, especially since you can’t run that code, unless the person is proficient enough to change the class name to match the name of the default folder that’s in the browser.

Had the same issue, this was very confusing to me. Because “SavingsAccount.deposit(100);” or would this mean you would deposit “100” to every instance of SavingsAccount?
But then ddcbill’s code should also work, which it doesn’t.

Just thought it worth mentioning, on the last step I had the code:
// main method
public static void main(String args) {
Store lemonadeStand = new Store(“Lemonade”, 3.75);
lemonadeStand.increasePrice(1.5);
lemonadeStand.price;
Which correctly supplied an error, yet still considered the task as complete without needing to provide the correction of the line lemonadeStand.price to be System.out.println(lemonadeStand.price), since it technically did not satisfy the request to print out the line until the correction is done.

Instead of the clunky:
  public void increasePrice(double priceToAdd){
    double newPrice = price + priceToAdd;
    price = newPrice;
  }
Why not use:
  public void increasePrice(double priceToAdd){
     price += priceToAdd;
  }
It looks far more readable and doesn’t declare new unnecesary variables.

how is price being accessed in the increasePrice()  method without using this keyword?

price is an instance field of the current class. If you type no information about where to find the thing you named, like “price”, Java will look at things in the current context by default.
Notably, it will check if the current class doesn’t have fields of this name. Since the current class does have a field named “price”, then Java takes that as being what you meant with the name “price”.
the keyword this is useful in cases where Java would not look at the right place.
Let’s see for example a method like this one:
  public void increasePrice(double price){
     price += price;
  }

In that case, there are two things named “price”. The current class field, but also the current method’s parameter. Java will first look at the current method’s context, and therefore the method’s parameter named “price” will shadow the class’ field “price”. Which means that despite you wanted to update the field, you’re not. You’re just changing the value contained in the parameter variable.
You can solve that situation by telling where to take the thing named “price”, using the this keyword. this means “the current instance of the current class” and this.price means “the field price of the current instance of the current class.”
Therefore, the correct code would be
  public void increasePrice(double price){
     this.price += price;
  }



image.png515×569 37.1 KB

how can price be equal to both intialPrice and newPrice? It doesnt make sense to me that price can be set equal to two different variables.

I have noticed that the grader of these lessons sometimes doesn’t care if I put my semicolons in. It probably should. I am used to writing in kotlin where there are no semicolons.

Hi,
This code (copy pasted from the exercise):
public class Store {
// instance fields
String productType;
double price;
// constructor method
public Store(String product, double initialPrice) {
productType = product;
price = initialPrice;
}
// increase price method
public void increasePrice(double priceToAdd){
double newPrice = price + priceToAdd;
price= newPrice;
}
// main method
public static void main(String args) {
Store lemonadeStand = new
lemonadeStand.increasePrice(1.5);
Store(“Lemonade”, 3.75);
}
gets me this error:
Store.java:21: error: package lemonadeStand does not exist
lemonadeStand.increasePrice(1.5);
^
Store.java:22: error: cannot find symbol
Store(“Lemonade”, 3.75);
^
symbol:   method Store(String,double)
location: class Store
2 errors
Could someone please explain where I’m going wrong? Thank you!

This exercise makes no sense to me. I don’t know how it works or why it’s written the way it is.
I’m reading it very slowly, but one parameter (or instance? - there is so much jargon to keep straight) at a time, but I just don’t get it. Maybe its because there are too many similarly named variables (price, newPrice, initialPrice, priceToAdd).
I’m not sure why priceToAdd is created because it’s not called again.
I’m not sure why just typing (1.5) increases the price.
Can anyone explain this to me another way?
Thanks

Should be:
Store lemonadeStand = new Store(“lemonade”, 3.75);

Hi,
Why are we creating and using the newPrice variable inside of the incrisePrice() method if we can get the same result using price = price + priceToAdd;? Am i missing something?

Is the first line in the example code missing a class declaration? Ie. shouldn’t it be
public class SavingsAccount{
double balance;
public SavingsAccount(double startingBalance){
balance = startingBalance;
}
"
84,FAQ: Learn Java: Methods - The toString() Method,"Get Help,Git",,30,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “The toString() Method” exercise from the lesson “Learn Java: Methods”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise The toString() Method


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
I don’t understand how System.out.println knows to connect with the toString method.  What would we do if we had several classes that we wanted to print different messages about in main()?

When we print out Objects, we often see a String that is not very helpful in determining what the Object represents. In the last lesson, we saw that when we printed our Store objects, we would see output like:
Store@6bc7c054

where Store is the name of the object and 6bc7c054 is its position in memory.
This doesn’t tell us anything about what the Store sells, the price, or the other instance fields we’ve defined. We can add a method to our classes that makes this printout more descriptive.
When we define a toString() method for a class, we can return a String that will print when we print the object
so the toString method is useful to see what an object represents, what you want would require defining methods to call on the object.

Is toString a reserved word?  What would have stopped me inadvertently making a toString() method to do something entirely different, only to find out that it was invoked when I tried to print the object?




 grahamam107:

What would have stopped me inadvertently making a toString() method to do something entirely different, only to find out that it was invoked when I tried to print the object


some things are the the developers responsibility, as developer you are mostly in control, so nothing would have stopped you



 grahamam107:

Is toString a reserved word?


its an existing method yes, which you just overwrote for this object
toString is always invoked when printing an object.

How does control passes to toString() method from main since we haven’t called it exclusively.

its explained  nicely here:
https://www.javatpoint.com/understanding-toString()-method
java calls toString automatically when you print an object.

I copied the solution to atom, and when I compile it I get the error : invalid method declaration; return type required
public Store(String product, double initialPrice)
Any idea why? It runs fine on the website?

The only way I could reproduce this error was by having store in lowercase on the constructor.
  // constructor method
  public Store(String product, double initialPrice) {
    productType = product;
    price = initialPrice;
  }

The above doesn’t raise a error.

Hi all.  What exactly am I doing wrong here?

upload pic.JPG1298×436 60.6 KB


can someone help me understand why it says I completed the lesson yet I still have an error
2019-08-07.png1920×1080 275 KB


i think the the closing curly bracket on line 36 closes the class, so the curly bracket on line 37 needs to removed. You have would have to verify.
Difficult to say for sure, given i can’t see the full code and the code isn’t perfectly indented.

You’re only supposed to print out lemonadeStand

Why the output of this program contains null? what is the problem?
public class Car {
	//Instance fields
	String color;
	int topSpeed;
	String carModel;
	
	//constructor method
	public Car(String carColor, int maxSpeed, String typeCar) {
		carColor = color;
		maxSpeed = topSpeed;
		typeCar = carModel;
	}
	
	public String toString() {
		return ""This is a ""+ color + "" "" + carModel + "" with a top speed of "" + topSpeed; 
	}
	
	public static void main(String[] args) {
		
		Car buggati = new Car(""blue"", 500, ""buggati"");
		Car lamborghini = new Car(""black"", 400, ""lamborghini"");
		
		System.out.println(buggati);
		System.out.println(lamborghini);
		
	}
}


in the constructor, you assign the instance fields (which are null) to the parameters of the constructor, why?

Thanks XD, I get it now what you meant , and it fixed the issue. Many thanks 

Hi! Is there anytime we would want to keep displaying the memory and class name, and if so, could we do it even if we had changed the toString() method?

Thank you. This answered my question too. It would be nice if this link was included somewhere in the lesson

""its an existing method yes, which you just overwrote for this object
toString is always invoked when printing an object.""
Thank you. that was an important piece of information that was missing for those of us not trying to just memorize everything but to understand the hows and whys.

flip801 is wrong, the step clearly states you need to print out both lemonadeStand and cookieShop.
I can’t tell what you’ve done wrong, the screenshot may be too cropped and it’s hard to tell if you maybe used the wrong character. However this is my answer and it was correct:

"
85,FAQ: Inheritance and Polymorphism - Using a Child Class as its Parent Class,"Get Help,Git",,13,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Using a Child Class as its Parent Class” exercise from the lesson “Inheritance and Polymorphism”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Using a Child Class as its Parent Class


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
You can also find further discussion and get answers to your questions over in #get-help.
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head to #get-help and #community:tips-and-resources. If you are wanting feedback or inspiration for a project, check out #project.
Looking for motivation to keep learning? Join our wider discussions in #community
Learn more about how to use this guide.
Found a bug? Report it online, or post in #community:Codecademy-Bug-Reporting
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
Hi Codecademy
Here are my questions:

Is is true that using a Child Class as its Parent Class (ParentClass childInstance = new ChildClass()) is just another way to create instance of a child class (ChildClass childInstance = new ChildClass())?
What are the real benefits of using this unusual way of creating a child instance compared to the normal way? As you mentioned in the lesson “using the explicit child as parent syntax is most helpful when we want to declare objects in bulk”, I still don’t get what you really mean

The course is superb and meticulously prepared by the way
Thanks

I had the same questions. I hadn’t seen this before.
After googling a bit I found this is referred to as “up casting”. The examples I saw involved saving instances of ChildClass in an array of ParentClass. When the objects are retrieved from the array they are treated as instances of ParentClass unless they are “down cast” to the ChildClass.
If the down cast is invalid (the object is not an instance of ChildClass) you get a ClassCastException.  The getClass() method can be used to determine the actual class of the object so your code could avoid the exception.

In no way am I trying to lecture anyone on solutions. I post these with my interpretations for personal reasons, mostly making sure that I’m understanding what I’m doing. My professor has mentioned many times that trying to explain a concept is the best way to see where the gaps in your own knowledge are.
Dinner class with notes
class Dinner {
  
  private void makeNoodles(Noodle noodle, String sauce) {
    
    noodle.cook();
    
    System.out.println(""Mixing "" + noodle.texture + "" noodles made from "" + noodle.ingredients + "" with "" + sauce + ""."");
    System.out.println(""Dinner is served!"");
    
  }
  
  public static void main(String[] args) {
    
    Dinner noodlesDinner = new Dinner();
    // Add your code here:
    Noodle biangBiang = new BiangBiang();
    // BiangBiang is after the keyword ""new"" because that is the object we are        instantiating
    // Noodle is the parentclass relative to the BiangBiang class. One level higher.
    // The compiler will think the variable/reference ""biangBiang"" is just a ""Noodle"" object. However, at runtime it will create the ""BiangBiang"" object we set out to create. 
    
    // The overall superclass is the Dinner class where our main() method is stored. That is what our program is ultimately created for. The Noodle and the type of noodle is just one type of dinner possibility. 
    noodlesDinner.makeNoodles(biangBiang, ""soy sauce and chili oil""); 
    
    
  }
  
}

Noodle class; nothing changed here. Still contains the fields, the constructor, and the one method it had from the outset.
class Noodle {
  
  protected double lengthInCentimeters;
  protected double widthInCentimeters;
  protected String shape;
  protected String ingredients;
  protected String texture = ""brittle"";
  
  Noodle(double lenInCent, double wthInCent, String shp, String ingr) {
    
    this.lengthInCentimeters = lenInCent;
    this.widthInCentimeters = wthInCent;
    this.shape = shp;
    this.ingredients = ingr;
    
  }
  
  public void cook() {
    
    this.texture = ""cooked"";
    
  }
  
}

Nothing has changed in the child class BiangBiang either; same code that was given
class BiangBiang extends Noodle {
  
  BiangBiang() {
    
    super(50.0, 5.0, ""flat"", ""high-gluten flour, salt, water"");
    
  }
  
}


Could someone clarify this for me:
When we instantiate a ChildClass object as a ParentClass object, as follows:
Noodle biangBiang = new BiangBiang();
And then, we pass the arguments for the object biangBiang in the class BiangBiang. The code works fine.
However, if you try to directly pass the arguments when instantiating the object, as follows:
Noodle biangBiang = new BiangBiang(50.0, 5.0, “flat”, “high-gluten flour, salt, water”);
You get an error. Why is that?

You only pass in arguments for the constructor method when instantiating the object, but if you look at the BiangBiang.java tab, there are no parameters for the constructor method.

Can someone explain what does it mean to use a child class as its parent class and what purpose does this serve?
I don’t really understand this concept.

Object Casting is an Important concept in java which covers upcasting and downcasting in java.In this video, we are going to cover upcasting in depth.We are going to understand the meaning of Parent p = new Child() Statement step by step.We are going to learn how to upcast manually and why explicit upcasting in not necessary in Java.So let’s understand upcasting in java which where we will also cover the dynamic method dispatch concept.
runtime polymorphism in java:
Assume we have a Parent class named ‘Parent’ and a child class named ‘Child’.
Parent p = new Child();
here ‘p’ is parent type reference and 'new child()’ is the runtime object.
So method overriding in java which is also called as runtime polymorphism is generally dealing with runtime object.So in java as we can store child class object in the parent class reference(which is called upcasting).When we call a method with parent type reference(‘p’ in our case), during runtime jvm checks for the runtime object and based on that a specific method get called.It depends on whether the method you are calling has been overridden in the child class. If the method you are calling overridden in the child class, then the child-specific method will get called otherwise the parent-specific method gets called.
So we can say in general in runtime polymorphism in java , object linking happens in the runtime.
rules :
Parent p = new Child(); //upcasting


During compilation, the compiler only checks for the method that we are calling is available in the parent class or not.If yes, then compilation successful otherwise we will get compile time error saying the method is not available in the parent reference.So the calling method should be available in the parent class if we are calling the method using the parent reference.


If the calling method is overridden in the child calss( inheritance in java ) then the child-specific method will be get called which is called as dynamic method dispatch.


In this video, we will also talk about dynamic dispatch in details with a tons of example.
Object casting in java :
When we talk about upcasting in java, we have to understand that the upcasting is safe and it is implicit.There is no need to do upcasting in java explicitly as jvm does it internally.
for an example :
casting sub type to a supper type is called upcasting :
Child c = new Child();
now is c is a subtype.let’s cast it to supper type
Parent p = (Parent)c;
now we have casted it to supper type which is parent type.Here we have done upcasting manually which is not necessary.so we can directly do
parent p = c ;
because upcasting is implicit, or we can directly do
Parent p = new Child();
remember that p is storing the child class object.
with ‘p’ reference we can only call parent-specific methods but to call child specific method, we have to downcast.
so we are going to talk about downcasting in java in the next video.
Note: - upcasting and downcasting are two important things in java which is used so much in real time.
Important: To perform upcasting and downcasting the two classes must have the relationship or they must extend to each other (inheritance in java);

BiangBiang biangBiang = new BiangBiang():

what the absolute f u c k?

nvm it’s
 Noodle biangBiang = new BiangBiang(); 

also i messed up the semicolon last time.

It is an instance creation of child class.

And Noodle biangBiang = new BiangBiang(); is upcasting only where we are creating instance of BiangBiang and upcasted it to Noodle which is a parent class.

Codecademy was not made in the US lol
"
86,FAQ: Learn Java: Arrays - Creating an Array Explicitly,"Get Help,Git",,6,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Creating an Array Explicitly” exercise from the lesson “Learn Java: Arrays”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Creating an Array Explicitly


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
You can also find further discussion and get answers to your questions over in #get-help.
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head to #get-help and #community:tips-and-resources. If you are wanting feedback or inspiration for a project, check out #project.
Looking for motivation to keep learning? Join our wider discussions in #community
Learn more about how to use this guide.
Found a bug? Report it online, or post in #community:Codecademy-Bug-Reporting
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
public class Newsfeed {
  
  
  public Newsfeed(){
    
  }
  
  // Create getTopics() method below:
  public String[] getTopics() {
    String[] topics = {""Opinion"", ""Tech"", ""Science"", ""Health""};
    return topics;
  }
    
  

  public static void main(String[] args){
    Newsfeed sampleFeed = new Newsfeed();
    
    String[] topics = sampleFeed.getTopics();
    System.out.println(topics);
    
  }
}


My solution for step 2/8

it seems I am a bit confuse the result i got was “[Ljava.lang.String;@2aae9190” .
I thought we were suppose to see “Opinion”, “Tech”, “Science”, “Health” on the console from the System.out.println(topics);
public Newsfeed(){
}
public String getTopics() {
String[] topics = {""Opinion"", ""Tech"", ""Science"" , ""Health""};

return topics;

}
public static void main(String args){
Newsfeed sampleFeed = new Newsfeed();



String[] topics = sampleFeed.getTopics();

System.out.println(topics);

}
}

ah nevermind it seems the answer to my question is explained in the next lesson 

I had this code but it would not take it
public String getTopics(){
}
any idea why




 webslayer01669:

it seems I am a bit confuse the result i got was “[Ljava.lang.String;@2aae9190” .
I thought we were suppose to see “Opinion”, “Tech”, “Science”, “Health” on the console from the System.out.println(topics);


you can’t see any results when the method Newsfeed() which is empty! So remember that methods are the behavior of the class.
"
87,FAQ: Conditional Operators - Conditional-And: &&,"Get Help,Git",,11,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Conditional-And: &&” exercise from the lesson “Conditional Operators”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Conditional-And: &&


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
You can also find further discussion and get answers to your questions over in #get-help.
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head to #get-help and #community:tips-and-resources. If you are wanting feedback or inspiration for a project, check out #project.
Looking for motivation to keep learning? Join our wider discussions in #community
Learn more about how to use this guide.
Found a bug? Report it online, or post in #community:Codecademy-Bug-Reporting
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
Why is the boolean set to “open” in the reservation class? I thought booleans could only be true or false?

what type does open have?

Got it. Thanks for the pointer

im confused because i have the else if () {} thing done but it keeps on pointing to the parentases saying illegal start of expression

public class Reservation {
  int guestCount;
  int restaurantCapacity;
  boolean isRestaurantOpen;
  boolean isConfirmed;
  
  public Reservation(int count, int capacity, boolean open) {
    guestCount = count;
		restaurantCapacity = capacity;
		isRestaurantOpen = open;
  }  
  
  public void confirmReservation() {
    /* 
       Write conditional
       ~~~~~~~~~~~~~~~~~
       if restaurantCapacity is greater
       or equal to guestCount
       AND
       the restaurant is open:
         print ""Reservation confirmed""
         set isConfirmed to true
       else:
         print ""Reservation denied""
         set isConfirmed to false
    */
    if (restaurantCapacity>=guestCount&&isRestaurantOpen){
      System.out.println(""Reservation confirmed"");
      isConfirmed = true;
    } else {
        System.out.println(""Reservation denied"");
        isConfirmed = false;
    }
  }
  
  public void informUser() {
    System.out.println(""Please enjoy your meal!"");
  }
  
  public static void main(String[] args) {
    Reservation partyOfThree = new Reservation(3, 12, true);
    Reservation partyOfFour = new Reservation(4, 3, true);
    partyOfThree.confirmReservation();
    partyOfThree.informUser();
    partyOfFour.confirmReservation();
    partyOfFour.informUser();
  }
}

With the output of:
Reservation confirmed
Please enjoy your meal!
Reservation denied
Please enjoy your meal!


why do we add the instance “is confirmed” in the confirmRestaurant method ?

I think it’s to be a trigger for you to correct this. I corrected this with:
public void informUser() {
if(isConfirmed == true){
System.out.println(“Please enjoy your meal!”);
} else {
System.out.println(“We’re sorry but we’re full, hope to see you next time!”);
}
}

I can’t see your code but I stumbled across the same problem. The solution for me was to look into the indentations plus the positions of the curly braces {}. Then I also checked for typos.  The best is if you open up the “Introduction to Conditional Operators” page in a separate tab and compare that code with yours. That code is also the whole thing that you will be going through anyways so it’s like a cheat that you can use to peek back on. Hope this will help. 

if (restaurantCapacity>=guestCount&&isRestaurantOpen){
System.out.println(“Reservation confirmed”);
isConfirmed = true;
} else {
System.out.println(“Reservation denied”);
isConfirmed = false;
}
}
This is the section of code I had a problem in. Should’nt the if statement be if(restaurantCapacity>=guestCount&&isRestaurantOpen==true) because the restaurant should be open for the reservation to be made.

Hello @bit7080368435 and welcome to the Codecademy Forums!
Please format your code; instructions are in this article. How do I format code in my posts?
isRestaurantOpen is a boolean, meaning that it takes a value of either true or false. The if conditional takes in an expression that evaluates to true or false.
It is not necessary to use isRestaurantOpen == true because isRestaurantOpen has a value of true. When using any boolean as a condition for an if statement, you can simply input the boolean since the if statement will evaluate whether the boolean is true or false.
Although both if (restaurantCapacity >= guestCount && isRestaurantOpen) and if (restaurantCapacity >= guestCount && isRestaurantOpen == true) will work and give the same result, the == true is redundant and not necessary.
Hope this helps! If I explained it in a way that’s a bit confusing, please let me know!
"
88,FAQ: Learn Java: Variables - Static Checking,"Get Help,Git",variable-data-type,18,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Static Checking” exercise from the lesson “Learn Java: Variables”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Static Checking


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
Why does a string variable require an upper case “S”, when other variable types begin with a lower case letter?

That was actually briefly evoked on the exercise that starts using String variables.
The types we had been using so far, int, double, char and so on, were the so-called primitive types.
String was referred to as somewhat different, as Strings are objects.
When gaining experience in Java the difference between these two becomes absolute and obvious, but so far all we should try to get is that they are different.
(Though, String and the others we’ve seen so far, should feel very different for one reason. Primitives like int or double or so, are atomic. Scalar. They contain one thing that is its own thing. int contains one number, double also contains one number though it can be decimal, char contains one character, boolean contains one true or false. But String is a sequence of stuff, a sequence of characters. It is a compound of stuff that are separate from one another, not atomic. It should feel different.)
The primitive types, are the ones that Java allows, and no more than that. There are 8 of them and that’s it. They are named as Java decided would be their names, int, double, char and so on. All entirely lowercase. They are actually keywords of the Java language, and all keywords are entirely lowercase (at least up to Java 12. Could change later).
Object types, well Java provides some of them that we can use, such as String, but anyone can create new Object types. That’s actually what we do every time we write
class SomeName { /* stuff here */ }
Because anyone can make more of these, it is preferable that some naming conventions are respected. One of these conventions is that these type names start with an uppercase letter.
Java follows that convention with the classes it provides, as can be seen with String, which starts with a capital S.

I used a “Clear” command to erase the compilation error message associated with the first question in the exercise to gain typing space, but to my amazement, the 2nd exercise ticked a green mark indicating that the compilation has been run successfully without errors while in actual fact, I have done no compiling yet. can I get an explanation to this?

The text in this excercise says that “The program will not compile if the declared type of the variable does not match the type of the assigned value”.
However, in line 5 the variable isn’t the correct type as it says

int genre = ‘C’

instead of char but it is possbile to compile the file with this mistake. Why is it so?

public class Mess {
public static void main(String args) {
String title = “Shrek”;
double runtime = 1.58;
int number = 2;
boolean good = true;
char type = ‘A’;
}
}
What is wrong?

Exactly Why do you do it so hard for us? It s confusing.

I don’t understand this at all. Again, what is it asking me to change? Why is it so hard to learn a simple ;language?
public class Mess {
public static void main(String args) {
String year = 2001;
double title = “Shrek”;
int genre = ‘C’;
boolean runtime = 1.58;
char isPG = true;
}
}

There is a mismatch between how the variables (year, title, genre, runtime, isPG) have been declared AND the values assigned to them. For example, year has been declared as a String but it has been assigned an integer value 2001. If you change the statement from String year = 2001; to int year = 2001; this will fix the mismatch. Similarly, go through all the statements and fix the declared type so that there is no mismatch. “Shrek” is a string but it has been assigned to title which is of type double. If we edit statement to String title = ""Shrek""; this will fix the statement. Do the same for the rest of the statements.

Thank you for the reply. I’m really lost, Is there a mistake in the tutorial files i need to fix before trying the exercise? I know there were some issues like that with another bootcamp I tried. As far as what you suggested…I keep reading this over and over but i can’t figure it out, the changes… double, string, statement? Do I need to learn another language before learning javaScript?

I’m starting the lesson over. I wish I could share exactly what it is but I’m not even sure what’s confusing, like literally everything in the lessons makes no sense at all. I don’t know why this is so hard for me. I always had problems remembering weird concepts like this in school too.

I don’t think this is realistic, programming is for smart people but i’m a dropout. I don’t even know what to ask about? I don’t understand a single thing in the tutorials. it says:
Use string concatenation to concatenate a string with a space  ' '  between the two other words: Use the  +  operator to join three separate strings:
console.log(‘string1’ + ’ ’ + ‘string2’)
concatenation? I only see string1 and string2
How do i figure out what this means? I’m not a math person at all. I still don’t even know what JavaScript does actually, I keep reading about it but it doesn’t make sense.

I’m confused about the first part. I put in javac Mess.java into the terminal on the right, but it says it’s wrong. IDK what to do next or what the solution is.

After you type in javac Mess.java in the terminal, do you see the green check mark next to Step 1 of the instructions?
If you do see the check mark, then you should ignore the errors and proceed to Step 2. The errors are expected behavior, because there are mistakes in the file which have to be fixed in Step 2. Once you have successfully fixed the errors, you should see there are no more warnings after compilation.

No, I don’t see a green check mark. It has a red x next to it, and it says I haven’t put it in the terminal, even though I have. I’ve checked that I’ve proper spelling and punctuation, since it seems to case sensitive, but nothing seems to be working

All I can suggest is to reset the exercise via the reset button next to ‘Run’. If that doesn’t fix the issue, then I don’t have any idea.
I just reset the exercise and tried completing the exercise again. It worked fine for me. After I typed javac Mess.java in the terminal and pressed enter, 4 errors were shown in compiling but a green check mark appeared next to Step 1. After I fixed the errors and hit the Run button, I was able to complete Step 2. In Step 3, I compiled the file through the terminal. If the reset doesn’t work for you, I don’t know what is going wrong.

it’s telling me cannot find symbol
string title = “Shrek”;

Instead of string title = ""Shrek"", use String title = ""Shrek""
At the beginning of this thread, you can see a reply from ajax about why Java requires the S in String to be capitalized.
"
89,FAQ: Conditional Operators - Review,"Get Help,Git",,7,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Review” exercise from the lesson “Conditional Operators”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Review


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
You can also find further discussion and get answers to your questions over in #get-help.
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head to #get-help and #community:tips-and-resources. If you are wanting feedback or inspiration for a project, check out #project.
Looking for motivation to keep learning? Join our wider discussions in #community
Learn more about how to use this guide.
Found a bug? Report it online, or post in #community:Codecademy-Bug-Reporting
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
As the code is written now, if you would enter a count number of <1 || >8 for a reservation in the main method, the outcome would be (if restaurantCapacity >= guestCount && isRestaurantOpen is true):
Invalid Reservation
Reservation Confirmed
Please enjoy your meal!
So what could you add to the code so that if the reservation is invalid the reservation isn’t then confirmed?
Many thanks for a response:)

I changed it to:
if (count < 1 || count > 8) {
System.out.println(“Invalid reservation!”);
} else {
guestCount = count;
restaurantCapacity = capacity;
isRestaurantOpen = open;
}

I’m having trouble creating instances in main, here’s my code
Reservation burger = New Reservation(8, 12, true, true);
System.out.println(burger.restaurantCapacity);

any help would be appreciated.

You don’t need to mark isConfirmed in main() as it is classified in confirmReservation(). Your reservation should only read

Reservation burger = New Reservation(8, 12, true);

.

Hi! 
I’m adding the following sample code in main():
  public static void main(String[] args) {
    // Create instances here
    Reservation individualReservation = new Reservation(1, 4, true);
    Reservation groupReservation = new Reservation(20, 8, true);
    System.out.println(""For the individual reservation, status is "" + individualReservation.confirmReservation());
    System.out.println(individualReservation.informUser());
  }

but I’m getting back the error:
Reservation.java:38: error: 'void' type not allowed here
    System.out.println(""For the individual reservation, status is "" + individualReservation.confirmReservation());
                                                                                                              ^
Reservation.java:39: error: 'void' type not allowed here
    System.out.println(individualReservation.informUser());
                                                       ^
2 errors

I’ve checked against other sample code and can’t understand what’s wrong. Why is main() complaining about a void type not allowed when neither confirmReservartion() nor informUser() accept parameters?
Thank you! 

i am completely sure, but i guess what you doing is trying to print a print statement. callling individualReservation.confirmReservation() already prints out a statement but then again you are printing the print statement. maybe thats whats causing the errors.
"
90,FAQ: Conditional Operators - Conditional-Or: ||,"Get Help,Git",,8,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Conditional-Or: ||” exercise from the lesson “Conditional Operators”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Conditional-Or: ||


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
You can also find further discussion and get answers to your questions over in #get-help.
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head to #get-help and #community:tips-and-resources. If you are wanting feedback or inspiration for a project, check out #project.
Looking for motivation to keep learning? Join our wider discussions in #community
Learn more about how to use this guide.
Found a bug? Report it online, or post in #community:Codecademy-Bug-Reporting
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
I dont understand how come when i use the guestCount <  1 , i get a true result while the count <  1  gives a false?

I was thinking maybe because all the instance fields are set to 0 as default, but i’m not sure.

if we do System.out.writeln, we can see guestCount being zero. So that seems to be the default value.
but you should really use count, you know why, right?

because  the objects invoke the constructor first with its given values and only then the code inside the constructor runs.
if   guestCount = count;   was placed before the condition you could use guestCount <  1
right? also what does System.out.writeln  mean?




 course4978996266:

if guestCount = count; was placed before the condition you could use guestCount < 1


exactly 



 course4978996266:

if guestCount = count; was placed before the condition you could use guestCount < 1


yes, you seem to understand everything very well



 course4978996266:

right? also what does System.out.writeln mean?


i meant System.out.println, i program in Java too little.

public class Reservation {
  int guestCount;
  int restaurantCapacity;
  boolean isRestaurantOpen;
  boolean isConfirmed;
  
  public Reservation(int count, int capacity, boolean open) {
    // Write conditional statement below
    if (count<1||count>8) {
      System.out.println(""Invalid reservation!"");
    }
    
    guestCount = count;
		restaurantCapacity = capacity;
		isRestaurantOpen = open;
  }  
  
  public void confirmReservation() {
    if (restaurantCapacity >= guestCount && isRestaurantOpen) {
      System.out.println(""Reservation confirmed"");
      isConfirmed = true;
    } else {
      System.out.println(""Reservation denied"");
			isConfirmed = false;
    }
  }
  
  public void informUser() {
    System.out.println(""Please enjoy your meal!"");
  }
  
  public static void main(String[] args) {
    Reservation partyOfThree = new Reservation(3, 12, true);
    Reservation partyOfFour = new Reservation(4, 3, true);
    partyOfThree.confirmReservation();
    partyOfThree.informUser();
    partyOfFour.confirmReservation();
    partyOfFour.informUser();
  }
}


with output:
Reservation confirmed
Please enjoy your meal!
Reservation denied
Please enjoy your meal!


Well considering the fact that this is around 6 months old, maybe this wont be much help but then maybe for someone who might have the same problem in the future.
the reason why you are getting Please enjoy your meal! after reservation being denied is because in the informUser()  method there is no if condition preventing it from not being printed. and also you are calling Party0fFour.informUser() even after reservation being denied in the confirmReservation() method, which doesnt make much sense. hope it helps
"
91,FAQ: Learn Java: Arrays - Creating an Empty Array,"Get Help,Git",,13,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Creating an Empty Array” exercise from the lesson “Learn Java: Arrays”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Creating an Empty Array


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
You can also find further discussion and get answers to your questions over in #get-help.
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head to #get-help and #community:tips-and-resources. If you are wanting feedback or inspiration for a project, check out #project.
Looking for motivation to keep learning? Join our wider discussions in #community
Learn more about how to use this guide.
Found a bug? Report it online, or post in #community:Codecademy-Bug-Reporting
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
So far we’ve only seen arrays that store one type of data. Is there another object that can group instances of multiple types?

String[] favoriteArticles;
  
  public Newsfeed(){
    // Initialize favoriteArticles here:
String[] favoriteArticles = new String[10];
  }

Gives nullpointer exception.
String[] favoriteArticles = new String[10];
  
  public Newsfeed(){
    // Initialize favoriteArticles here:
  }

Works

The way to initialize within the constructor method is as follows:
String favoriteArticles;
public Newsfeed(){
// Initialize favoriteArticles here:
favoriteArticles = new String[10];
}
Since the array has already been assigned String outside of the constructor, you can omit String within constructor. Within constructor favoriteArticles = new String[10]; will work without returning any exceptions.

public void setFavoriteArticle(int favoriteIndex, String newArticle){
// Add newArticle to favoriteArticles:
favoriteArticles[favoriteIndex] = newArticle;
}
I fail to understand how favoriteIndex plays in to this line of code and how it changes the behaviour of the Array

This Code works as well
String topics = {“Opinion”, “Tech”, “Science”, “Health”};
int views = {0, 0, 0, 0};
String favoriteArticles;
public Newsfeed(){
// Initialize favoriteArticles here:
favoriteArticles = new String[10];
}

What does the second part mean. I have tried linking to the array, but it gives error

Question 1)
This is how I changed the constructor:
// The "" Newsfeed"" constructor
  public Newsfeed(){
    // Initialize favoriteArticles here:
    favoriteArticles = new String[10];
    
  }

The output was:
[null, null, null, null, null, null, null, null, null, null]


which is consistent, an array with 10 "" locations "", ranging from index = 0 to index = 9

Question 2)
Here is how I changed the setFavoriteArticle() method:
public void setFavoriteArticle(int favoriteIndex, String newArticle){
    // Add newArticle to favoriteArticles:
    
    favoriteArticles[favoriteIndex] = newArticle;
    
  }

The variable favoriteArticles[favoriteIndex] will evaluate to a String value because the array "" favoriteArticles "" is just an array full of String values (the name of the articles in this case). Then we can change this String value to a different String value without any errors. The exercise wants us to change the String value already in the array to the String value that the parameter "" newArticle "" evaluates to.
We want to use the parameters we are supplying it, we want to do something with the information we are feeding the program in the main() method. Why bother supplying the program with input/data if we aren’t gonna do anything with it.
The final array looked like this in the output:
[Oil News, null, Humans: Exterminate Or Not?, Organic Eye Implants, null, null, null, null, null, null]

This is consistent with the three setFavoriteArticle() method calls written inside of the main() method. The first call line we are trying to change the article name at index value 2 (which would be the third item in the array). The second call line we are trying to change the article name at index value 3 (which would be the fourth item in the array). The third and last call line we are trying to change the article name at index value 0 (which would be the very first item in the array). And the last line in the main() method simply prints out the new array that we have manipulated in all that code we wrote for this exercise. Remember the array was empty to begin with it looked like this:
[null, null, null, null, null, null, null, null, null, null]

The point of our program was to fill in the empty array with the data/parameters supplied inside the main() method.

It’s so that when we call up this method using
sampleFeed.setFavoriteArticle(2, “Humans: Exterminate Or Not?”);
we are saying that for this particular case the variable favoriteIndex = 2
which when put into favoriteArticles[favoriteIndex] = newArticle;
assigns the 2nd index of favoriteArticles to the String newArticle;
This seems a little useless for a program of this size but I think the purpose is to prepare us for the usefulness of this when working on more complex projects.

Can anyone tell me why have we initialized the empty array in the constructor method and why not outside it?

Thanks. This worked.

because that’s where we initialize it so that initialized array can be used throughout the program. initializing it in a method section does not allow us to use it anywhere else other than in the method itself (scope of  the method) unless we return it using the return commands.
"
92,FAQ: Learn Java: Manipulating Variables - Greater Than and Less Than,"Get Help,Git",variable-data-type,6,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Greater Than and Less Than” exercise from the lesson “Learn Java: Manipulating Variables”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Greater Than and Less Than


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
I love codeacademy, but the variable names in the Learn Java course are absolutely atrocious. I’m getting carpal tunnel syndrome trying to type them.

i just popped my middle finger trying to wright graduate capital.

I agree  some of these things are crazy.

Any reason as to why in this section in the statement “System.out.print()” the “ln” is left out is that okay? Or is this just a mistake by Codeacademy. Thanks 

Hello @muazilyas and welcome to the Codecademy Forums!
Both System.out.println() and System.out.print() are valid statements that take in arguments and display them to the console. System.out.println() outputs the argument to the console and moves the cursor to the next line. System.out.print() also outputs the argument to the console but simply moves the cursor to the end of the text, not the next line. This article might be helpful.
"
93,FAQ: Learn Java: Loops - Iterating Over Arrays and ArrayLists,"Get Help,Git",,6,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Iterating Over Arrays and ArrayLists” exercise from the lesson “Learn Java: Loops”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Iterating Over Arrays and ArrayLists


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
You can also find further discussion and get answers to your questions over in #get-help.
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head to #get-help and #community:tips-and-resources. If you are wanting feedback or inspiration for a project, check out #project.
Looking for motivation to keep learning? Join our wider discussions in #community
Learn more about how to use this guide.
Found a bug? Report it online, or post in #community:Codecademy-Bug-Reporting
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
import java.util.ArrayList;

class CalculateTotal {
  
  public static void main(String[] args) {
    
    ArrayList<Double> expenses = new ArrayList<Double>();
    expenses.add(74.46);
    expenses.add(63.99);
    expenses.add(10.57);
    expenses.add(81.37);
    
    double total = 0;
    
    // Iterate over expenses
    for(int i = 0; i < expenses.size(); i++) {
      total = total + expenses.get(i);
    }
    
    System.out.println(total);
    
  }
  
}

The output is:
230.39
I have verified the total by hand and with a calculator as well

import java.util.ArrayList;

class CalculateTotal {
  
  public static void main(String[] args) {
    
    ArrayList<Double> expenses = new ArrayList<Double>();
    expenses.add(74.46); // [0]
    expenses.add(63.99); // [1]
    expenses.add(10.57); // [2]
    expenses.add(81.37); // [3]
    
    double total = 0;
    
    // Iterate over expenses
    for (int i = 0; i < expenses.size(); i++) {
        total += expenses.get(i);
    }
    
    System.out.println(total);
    
  }
  
}


Hello,
Can anyone explain the second instruction (2. Inside the  for  loop, add the item’s value to  total.) and how they knew  to use a compound assignment operator or the syntax "" total = total + expenses.get(i); "" I see that others have figured this out but I want to know the reasoning behind it because I don’t think I’m understanding what instruction 2 is asking for. Check out my code below and if someone could break this down to me it would be greatly appreciated.
import java.util.ArrayList;
class CalculateTotal {
public static void main(String args) {
ArrayList<Double> expenses = new ArrayList<Double>();

expenses.add(74.46);

expenses.add(63.99);

expenses.add(10.57);

expenses.add(81.37);



double total = 0;



// Iterate over expenses

for (int i = 0; i < expenses.size(); i++){

 total = expenses.get(i); 

 expenses.set(i, total + 1);

    

System.out.println(total);

}

}
}
The output is the list of arrays and the lesson is asking, Did you add the current item to total ?

Hi there,
I have the same doubt!

alright,so where you are going wrong is when you are trying to set the total value you have got during each loops added with 1 to the i’th index of the arraylist i,e at this line expenses.set(i, total+1). therefore for that line of code total value+1 is being assigned to the new value for the i’th index of the list.
As of for how what its asking is the total sum of all expenses. And for that total = total + expenses.get(i) does the  work. how? initially total is assigned to 0.0, so during the first loop - total = 0.0 + 74.46 happens and total takes the value 74.46. In 2nd loop - total = 74.46 (from previous loop) + 63.99 happens. similarly at 3rd loop - total = 138.45 (74.46+63.99) + 10.57 is whats happening. finally at 4th loop - total = 149.02 + 81.37. during the next loop, it breaks cause i(=4) isnot < expenses.size() and you get your final value for total (230.39)
hope this makes sense
"
94,FAQ: Inheritance and Polymorphism - Inheritance in Practice,"Get Help,Git",,6,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Inheritance in Practice” exercise from the lesson “Inheritance and Polymorphism”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Inheritance in Practice


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
You can also find further discussion and get answers to your questions over in #get-help.
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head to #get-help and #community:tips-and-resources. If you are wanting feedback or inspiration for a project, check out #project.
Looking for motivation to keep learning? Join our wider discussions in #community
Learn more about how to use this guide.
Found a bug? Report it online, or post in #community:Codecademy-Bug-Reporting
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
This is regarding the question in the 2nd exercise, where the parent class is ‘Noodle’ and the child class is ‘Spaghetti’.
How were we able to create an object (spaghettiPomodoro) without defining its constructor in the spaghetti class? All we did was define a class. No constructor was defined.
I searched on google and confirmed that we cannot create an object without a constructor. Is it a mistake in the IDE or am I missing something?

Java provides a default constructor in the case if do not explicitly add one. And yes you are right about object cannot be created without constructor but the java itself defines default constructor without any parameters

What is the code this.texture means and perform in the second exercise in line 9?

“this.” refers to the class instance in question. You may have several types of spaghetti in your program, but want the texture of a specific instance.
If you’re familiar with Python, this. is analogous to self.

I’m stuck on step 3. How do I print the String, “texture,” if it’s already stated.
"
95,FAQ: Java: Introduction to Classes - Classes: Review,"Get Help,Git",,12,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Classes: Review” exercise from the lesson “Java: Introduction to Classes”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Classes: Review


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
In the output screen of this review code, I’m not sure why “Constructor Invoked!” is printed 2 times after “Main method started”…is it because two new Dog instances (Fido and Nunzio) are being created? Thanks! 02%20PM|690x498

Yes. Any instance creation calls the constructor, and the constructor is the one that prints “Constructor Invoked!” when it is called.

Hello, might be a stupid question…
Why is it necessary to create additional variables in the constructor and assign them the values of the original ones and not keep refering to the original variables?

I thought the same thing.  The reason is you don’t want to change your variables sometimes.  So you keep one constant and then you can make separate variables as needed.

There is an error in the code example, the last line fido.breed; when compile, “error: not a statement”.
Maybe it should be: System.out.println(fido.breed);

How to add color to the dogs?

public class Dog {
String breed;
boolean hasOwner;
int age;
String color;
public Dog(String dogBreed, boolean dogOwned, int dogYears, String dogColor) {
System.out.println(“Constructor invoked!”);
breed = dogBreed;
hasOwner = dogOwned;
age = dogYears;
color = dogColor;
}
public static void main(String args) {
System.out.println(“Main method started”);
Dog fido = new Dog(“Poodle”, false, 14, “White”);
Dog nunzio = new Dog(“Shiba inu”, true, 12, “Dark Brown”);
boolean isFidoOlder = fido.age > nunzio.age;
int totalDogYears = nunzio.age + fido.age;
System.out.println(""Two dogs created: a "" + fido.breed + "" and a "" + nunzio.breed);
System.out.println(""The statement that fido is an older dog is: "" + isFidoOlder);
System.out.println(""The total age of the dogs is: "" + totalDogYears);
System.out.println(fido.breed + ""s are "" + fido.color + "" and "" + nunzio.breed + ""s are "" + nunzio.color + “.”);
System.out.println(“Main method finished”);
}
}

Ah, String​:ok_hand: fml… TY
På torsdag 6. februar 2020, 19:16:33 CET skrev Ramanpreet81 via Codecademy Forums codecademy@discoursemail.com følgende:

ramanpreet81
    February 6

public class Dog {
String breed;
boolean hasOwner;
int age;
String color;
public Dog(String dogBreed, boolean dogOwned, int dogYears, String dogColor) {
System.out.println(“Constructor invoked!”);
breed = dogBreed;
hasOwner = dogOwned;
age = dogYears;
color = dogColor;
}
public static void main(String args) {
System.out.println(“Main method started”);
Dog fido = new Dog(“Poodle”, false, 14, “White”);
Dog nunzio = new Dog(“Shiba inu”, true, 12, “Dark Brown”);
boolean isFidoOlder = fido.age > nunzio.age;
int totalDogYears = nunzio.age + fido.age;
System.out.println(""Two dogs created: a "" + fido.breed + "" and a "" + nunzio.breed);
System.out.println(""The statement that fido is an older dog is: "" + isFidoOlder);
System.out.println(""The total age of the dogs is: "" + totalDogYears);
System.out.println(fido.breed + ""s are "" + fido.color + "" and "" + nunzio.breed + ""s are "" + nunzio.color + “.”);
System.out.println(“Main method finished”);
}
}

Yes, that is the answer.

Is there any way to prevent this repetition?

At the review stage I commented out the original statements that assigning  constructor parameter values to corresponding instance fields.  This code trial ran just as before commenting out these variables’ assignments.
"
96,FAQ: String Methods - concat(),"Get Help,Git",,3,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “concat()” exercise from the lesson “String Methods”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise concat()


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
You can also find further discussion and get answers to your questions over in #get-help.
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head to #get-help and #community:tips-and-resources. If you are wanting feedback or inspiration for a project, check out #project.
Looking for motivation to keep learning? Join our wider discussions in #community
Learn more about how to use this guide.
Found a bug? Report it online, or post in #community:Codecademy-Bug-Reporting
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
There are a few solutions to this that seem like they should work but don’t for some reason.
The first solution I used was
String firstName = ""Bob"";  

String lastName = "" Ross"";

String fullName = firstName.concat(lastName);

System.out.println(fullName);

Which prints “Bob Ross” as expected. I then tried changing lastName to…
String lastName = "" "" + ""Ross"";

…which prints correctly and then tried changing the concat method to…
String fullName = firstName.concat("" "" + lastName);

…which also prints correctly.
I believe I know what it wants me to put into the code…
System.out.println(firstName.concat("" "" + lastName));

…but it seems weird that 3 seemingly valid solutions were rejected. Maybe it’s just because I’m new to coding so they only seem right to me but actually aren’t? I can kind of understand why the first two solutions wouldn’t be acceptable though why not the 3rd?

public class CombineNames {
public static void main(String[] args) {

// Add your first names:
String firstName = ""My"";  
String lastName = ""Name"";

// What's the full name?
System.out.println(firstName.concat("" "" + lastName));

That is my answer
"
97,FAQ: Inheritance and Polymorphism - Method Overriding,"Get Help,Git",,4,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Method Overriding” exercise from the lesson “Inheritance and Polymorphism”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Method Overriding


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
You can also find further discussion and get answers to your questions over in #get-help.
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head to #get-help and #community:tips-and-resources. If you are wanting feedback or inspiration for a project, check out #project.
Looking for motivation to keep learning? Join our wider discussions in #community
Learn more about how to use this guide.
Found a bug? Report it online, or post in #community:Codecademy-Bug-Reporting
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
class Noodle {
protected double lengthInCentimeters;
protected double widthInCentimeters;
protected String shape;
protected String ingredients;
protected String texture = “brittle”;
Noodle(double lenInCent, double wthInCent, String shp, String ingr) {
this.lengthInCentimeters = lenInCent;
this.widthInCentimeters = wthInCent;
this.shape = shp;
this.ingredients = ingr;

}
public void cook() {
System.out.println(""Boiling."");

this.texture = ""cooked"";

}
public static void main(String args) {
Noodle maggi = new Noodle();
maggi.cook();

}
}
what is the error in this !?

Noodle.java:41: error: illegal character: '\u201c'
protected String texture = “brittle”;
                           ^
Noodle.java:41: error: illegal character: '\u201d'
protected String texture = “brittle”;
                                   ^
2 errors

These are the errors.
The double-quotes surrounding the word brittle are left- and right-facing, where the compiler is expecting straight-facing quotes (’\U0022’). Hope this helps.

I did this and it seemed to work:

class Spaetzle extends Noodle {
Spaetzle() {
super(3.0, 1.5, ""irregular"", ""eggs, flour, salt"");
this.texture = ""lumpy and liquid"";

}
// Add the new cook() method below:
@Override
public void cook() {
System.out.println(“Grinding or scraping dough.”);
this.texture = “cooked”;
}
}

"
98,FAQ: Debugging - Debugging Techniques,"Get Help,Git",,10,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Debugging Techniques” exercise from the lesson “Debugging”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Debugging Techniques


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
You can also find further discussion and get answers to your questions over in #get-help.
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head to #get-help and #community:tips-and-resources. If you are wanting feedback or inspiration for a project, check out #project.
Looking for motivation to keep learning? Join our wider discussions in #community
Learn more about how to use this guide.
Found a bug? Report it online, or post in #community:Codecademy-Bug-Reporting
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
im looking at the Debugging Techniques section 7 of 8 where im reviewing the AreaCalculator program. I ran through all the different shapes to find the area. One place im not certain is the if , else if code block. why after calling the different methods they have (5,6) for triangle,  for rectangle there is (4,5) i see they are passes as parameters, but once we run through the code will our entry from passing our set values override the ones in the code? Are they just temporary place holders?
if (shape == 1) {
area_triangle(5,6);
} else if (shape == 2) {
area_rectangle(4,5);
} else if (shape == 3) {
area_circle(4);
} else if (shape == 4) {
quit();
break;

after testing and commenting things out, makes sense… those are “default values” if you were to remove/comment  scanner section . and of course those values can change up to you if you decide not to have user input
//Scanner keyboard = new Scanner(System.in);
	//System.out.print(""Length: "");
	//length = keyboard.nextInt();

	//System.out.print(""Width: "");
	//width = keyboard.nextInt();

Hmm… Was there a bug? I got correct answers for all shapes each time I tried different numbers 

yeah I didn’t get any bugs either lol

Mine also ran however it’s because the bug is a logic error. Thus, the debugger will not be able to catch it.
This occurs in the area_triangle method:

public static double area_triangle(int base, int height) {
Scanner keyboard = new Scanner(System.in);
System.out.print(""Base: "");
base = keyboard.nextInt();
System.out.print(""Height: "");
height = keyboard.nextInt();
System.out.println();
// What you want: (Divided by 2, not * 2)
// int A = (base * height)/2;
int A = (base * height) * 2;
System.out.println(""The area is "" + A + “.”);
return A;
}

If you put base and height as 2, you would get the area as 8. However, the area of a 2x2 triangle is 2. In this case, using print statements has allowed us to catch an error because our expected answer is different than what the code is giving us.

I can’t find the bug.

I had a play and the triangle area rounds to an integer when it could be a decmial for example base 7 and height 5 gives an area of 17 instead of 17.5.
I solved it by changing the traingle area calculation to:
double A = (double)base * (double)height * 0.5;
There might be a tider way to fix it as typing double three times seems wrong but I can’t find it.

Something must have been changed recently because the lesson completes as soon as I do anything and when doing 2x2 for the Triangle as you said, it still comes out as the correct answer of 2. The same goes for all of the other shapes.
Checking the code for the Triangle after resetting the workspace:
public static double area_triangle(int base, int height) {
Scanner keyboard = new Scanner(System.in);
System.out.print(""Base: "");
base = keyboard.nextInt();
System.out.print(""Height: "");
height = keyboard.nextInt();
System.out.println();
int A = (base * height) / 2;
System.out.println(""The area is "" + A + ""."");
return A
}

So it already properly divides rather than multiplying now.

There is no bug here, all the shapes output their respective area correctly.
"
99,Learn Java – Introduction to Java – What's your name?,"Get Help,Git",,2,"

This community-built FAQ covers the “What’s your name?” exercise in Codecademy’s lessons on Java.
FAQs on the Java exercise What’s your name?


You can help contribute to this section by offering your own questions or feedback on the exercise!
Unlock your understanding, and share that aha moment with someone else!  Teaching others and answering their questions is one of the best ways to learn.
Questions about formatting, syntax, or conceptual understanding are just a few avenues you may consider exploring.

Join the Discussion. We Want to Hear From You!
Have a new question or can answer someone else’s?  Reply () to an existing thread!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources about Java in general? Go here!
Want to take the conversation in a totally different direction? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account, billing, Pro, or Pro Intensive? Reach out to our support team!
None of the above?  Find out where to ask other questions here!
","
Other FAQs
The following are links to additional questions that our community has asked about this exercise:

This list will contain other frequently asked questions that aren’t quite as popular as the ones above.
Currently there have not been enough questions asked and answered about this exercise to populate this FAQ section.
This FAQ is built and maintained by you, the Codecademy community – help yourself and other learners like you by contributing!

Not seeing your question?  It may still have been asked before – try searching for it by clicking the spyglass icon  () in the top-right of this page.  Still can’t find it?  Ask it below by hitting the reply button below this post ().
"
100,FAQ: Debugging - Run-time Errors,"Get Help,Git",,3,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Run-time Errors” exercise from the lesson “Debugging”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Run-time Errors


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
You can also find further discussion and get answers to your questions over in #get-help.
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head to #get-help and #community:tips-and-resources. If you are wanting feedback or inspiration for a project, check out #project.
Looking for motivation to keep learning? Join our wider discussions in #community
Learn more about how to use this guide.
Found a bug? Report it online, or post in #community:Codecademy-Bug-Reporting
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
Instead of “find”, the failure popup says “finde”.

Instructions unclear in this one. I compiled and ran the file, got the div/0 error, fixed the error by setting to non-zero, ran successfully… Not sure what they want from us on this one.
"
101,FAQ: Learn Java: Methods - Scope,"Get Help,Git",,1,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Scope” exercise from the lesson “Learn Java: Methods”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Scope


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
",
102,FAQ: Learn Java: Manipulating Variables - .equals(),"Get Help,Git",variable-data-type,1,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “.equals()” exercise from the lesson “Learn Java: Manipulating Variables”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise .equals()


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
",
103,FAQ: Learn Java: Manipulating Variables - Addition and Subtraction,"Get Help,Git",variable-data-type,1,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Addition and Subtraction” exercise from the lesson “Learn Java: Manipulating Variables”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Addition and Subtraction


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
",
104,FAQ: Learn Java: Variables - Naming,"Get Help,Git",,1,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Naming” exercise from the lesson “Learn Java: Variables”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Naming


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
",
105,FAQ: Learn Java: Variables - char,"Get Help,Git",,1,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “char” exercise from the lesson “Learn Java: Variables”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise char


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
",
106,FAQ: Learn Java: Methods - Introduction,"Get Help,Git",,1,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Introduction” exercise from the lesson “Learn Java: Methods”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Introduction


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
",
107,FAQ: Learn Java: Methods - Defining Methods,"Get Help,Git",,4,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Defining Methods” exercise from the lesson “Learn Java: Methods”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Java
FAQs on the exercise Defining Methods


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
For this lesson(https://www.codecademy.com/courses/learn-java/lessons/learn-java-methods/exercises/defining-methods) that I am currently taking, the question says “In between the constructor and the  main()  method, add a method called  advertise()  to the  Store  class.”, but the advertise() isn’t actually in the Store class, but it is below it. May I know the reason why?

We are instructed to write the method above the main() method. It will be a method of the Store class, will it not?

Hello,
I was wondering as well for this problem of defining methods. The solution to the problem below is: public void advertise(){
System.out.println(“Come spend some money!”);
System.out.println(""Selling "" + productType + “!”);
My answer before is: public void advertise(){
System.out.println(""Selling "" + productType + “!”);
System.out.println(“Come spend some money!”);
if the order of the output reads: “Selling productType!”
"" Come spend some money!""
Is my code correct why is the solution the reverse of these two ?
2.
Inside the  advertise()  method, type two print statements. They should result in the printouts:
“Selling productType!” “Come spend some money!”
where  productType  is replaced with the value in the variable  productType .
However, we’re not going to see these Strings printed out yet! We’ll see in the next exercise how we can make these printouts actually run.
"
