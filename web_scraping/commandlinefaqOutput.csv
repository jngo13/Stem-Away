,Title,Categories,Tags,Replies,Post,Comment
0,About the Command Line FAQ category,"Get Help,Git",,3,"
Command line is a powerful and precise mouse-free tool for interacting with a computer; it is often deemed near-essential for accomplishing advanced coding tasks. This forum category covers the content of Codecademy’s command line courses.
","
Can you give an example why a coder would use command line?
Thanks !!

Can you give an example why a coder would use command line?
Thanks !!
"
1,What does 'pwd' mean and why is it useful?,"Get Help,Git",,2,"
Question
What does ‘pwd’ stand for and what makes it useful?
Answer
It stands for ‘Print Working Directory’ and it comes in handy when you want to ensure you’re in the right directory.
If you find yourself confused about where you’ve navigated to in future lessons or in the real world, it’s helpful to use pwd to see where you are, and ls to see what’s available to move into.
","
very helpful command indeed
"
2,Do I have to type the full name of a directory to navigate to it?,"Get Help,Git",,4,"
Question
Do I have to type the full name of a directory to change into it every time? It seems like a lot of repeated, unnecessary typing.
Answer
It is unnecessary! Luckily, you can save a lot of time and keystrokes by typing enough of the directory name for it to know which to select and then just press tab.
For example, say you type ls and see that you have three directories available to cd into:
myFolder, yourFolder, myOtherFolder
If you type in myF and then press tab, you’ll see that it autocompletes myFolder! That comes in handy, especially with long file names.
","
While you do need the full name, and to follow the syntax closely. As mentioned, tab is a useful tool to help save time. Another useful tool is the up-arrow key. This will bring forth commands that you have used earlier that you wish to reuse or modify slightly. This also saves time if you made a mistake in your command and need to edit it, without needing to type out the full command again.

This is so useful that it should be on the regular course. 

Agreed. I found out about the tab-shortcut after trying (and failing) to use the short command from windows cmd prompt (“cd m~” to “cd myFolder” (or whatever file/directory starting with m))
"
3,"Pipeline ""|"" versus output redirection "">""","Get Help,Git",,16,"
Question
The uses of output redirection, >, and pipelining, |, seem similar. What is the distinction in their use?
Answer
The distinction here is between storage and use as input. Consider the following example
cat volcanoes.txt | wc
from this lesson. Here we’re using the result of the left side, cat volcanoes.txt, as input to the right side, wc. If we instead wrote
cat volcanoes.txt > wc
then we would use the result of the left side and store it into a file called wc. This is a very different behavior than what we did with | above.
","



 zjedwin:

The uses of output redirection, > , and pipelining, |


I was confused by this lesson:
$ cat volcanoes.txt | wc | cat > islands.txt
if we want to “pipe” the standard output of volcanoes.txt to islands.txt, could we write
$ cat volcanoes.txt | wc > islands.txt  ? cat islands.txt turns out the same result as the lesson.
And please explain to me what the difference between storage and use as input?

I’m confused about this as well. Could someone help plz?

wc fav-cities.txt > cities.txt appears to do the same thing. Is the piping just to create a use case for it? Is there a better example of piping that does not contain a command such as wc, since wc gives output already?

I am joining the earlier question. Also, confused about the role of wc in this setting. It was written in the initial explanation "" the  wc  command outputs the number of lines, words, and characters in  volcanoes.txt , respectively"", but still I am not really getting it.  @zjedwin I would appreciate more information on this redirection command.

So… Is it safe to say that  …

$ cat boats.txt | sort > sorted-boats.txt

Just means …

Display contents of “boats.txt”


WHILE - organizing the content inside “boats.txt”


THEN - Create a new .txt called “sorted-boats.txt” with the contents that we organized in “boats.txt” inside

???




 bsmithmj:

organizing the content inside “boats.txt”


Drawing on (reading) the content from boats.txt, sorting it and storing it in sorted-boats.txt. The original file will remain untouched.

The lines
cat volcanoes.txt | wc | cat > islands.txt
and
cat volcanoes.txt | wc > islands.txt
do the same thing. There will often be many ways to accomplish any task. No need to be confused.
For the difference between “storage” and “use as input”, simply note that there is a difference between saving something for later and using it immediately and then throwing it away.
With x | y, you’re saying: take the output of x and use it as the input for y. You don’t save the output of x; you’re just passing it along to y. So you’re using it as input rather than storing it someplace.
On the other hand, x > y says: save, i.e. store, the output of x into the location defined by y.

wc is not a redirection command. It simply provides some statistics on an arbitrary file that is passed to it. In particular
number_of_lines number_of_words number_of_characters file_name
Simply test what the output of this function shows for an arbitrary file on your machine. Like this:
wc my_file
Redirection comes from operators like | and > which simply allow you to chain commands together.

I think I understand the use of the pipeline command well but what I don’t understand is why some of the exercises add unneccesary steps like doing
$ cat text_file.txt | sort ETC.
instead of just starting with
$ sort text_file.txt ETC.
I was able to complete these challenges without the extra useless steps and wasn’t sure what the point of those steps were; was it just to make it easier for beginners to understand by showing the whole flow of steps?, or to get us used to a certain conventional way of using the command line?, or just an accident?




 bsmithmj:

$ cat boats.txt | sort > sorted-boats.txt


can I also write this then?
$ sort boats.txt  > sorted-boats.txt

Yes I have the same question too!
Would this work too?:
$ sort boats.txt > sorted-boats.txt

Can we consider ‘wc’ as a temporary variable where we save our result of cat volcanoes.txt?

wc is a command literally ‘word count’, you need specify input for it to do the count on. in our example cat volcanoes.txt | wc | cat > islands.txt

output content of volcanoes.txt file to the terminal
count words what was outputted in step 1
output to terminal the result of word count from step 3 (actually redundant step as was outlined before)
save output to file islands.txt





 zjedwin:

The lines
cat volcanoes.txt | wc | cat > islands.txt
and
cat volcanoes.txt | wc > islands.txt
do the same thing. There will often be many ways to accomplish any task. No need to be confused.


I get that the course was trying to show the chaining of pipes in that example. But if it does exactly the same thing as the other one, it’s not a good example imo. Could you show a situation where it clearly shows the point of chaining?

What is the difference then between redirecting stdin and piping?
"
4,"What is a good use of input redirection ""<""?","Get Help,Git",,8,"
Question
The example given for the use of input redirection here:
cat < lakes.txt
Doesn’t seem particularly helpful since is does the same thing as cat lakes.txt. Please share a case where the use of input redirection, <, makes an important contribution.
Answer
There’s redundancy in the above example because most of the built-in functions that we would want to use in redirecting input, cat and sort for example, already directly accept files as input. So we won’t get any added benefit from using <. However, if a function is designed to simply read from the standard input, then < helps us out.
Let me be more explicit. Suppose you write a function which expects some user input. The typical ways that we do this in a programming language reads directly from stdin. It’s tedious to test or interface with this function completely through the standard input. So we may either write a collection of test input in a file or aggregate real input to this program in a file, prior to calling the function. How do we then make the program believe that it’s reading from stdin while it’s actually reading from the file we made? We accomplish this by using < where on the left side, we have our (executable) program and on the right we have the file we created. In this way, we pass all of the input to the function at once. This proves to be extremely handy in testing and interacting with programs in the command line.
","
Hello CC Moderator,
It is great that this question is addressed in FAQ section, however the part after

Let me be more explicit …

did not make any sense to me.
I am not sure whether this is because it is addressed to the audience, who is more advanced in Web Development or Computer Science.
Can a simpler explanation/example be provided on relevance of the use of < command?
Thank you!

Hi zachg131,
I’m not an experienced developer, just like you, and I didn’t get the difference between those two commands. So I tried to google this topic and here’s what I found. It seems this explanation makes sense:

In the first case, cat opens the file, and in the second case, the shell opens the file, passing it as cat’s standard input.

Try to type “cat file.txt” command and point it out to the nonexisting file. You’ll get an error message from cat:

cat: test.txt: No such file or directory

Then try to type “cat < file.txt” command and point it out to the nonexisting file. You’ll get an error message from bash:

-bash: text.txt: No such file or directory

Basically, if I understood it right, this means that in the first case, cat opens the file, in the second case bash opens the file first and then passes the result to cat.
Here are some more details:

Technically, they could have different effects. For instance, it would be possible to have a shell implementation that was more (or less) privileged than the cat program. For that scenario, one might fail to open the file, while the other could.


That is not the usual scenario, but mentioned to point out that the shell and cat are not the same program.

Hope this helps.

Hi zachg131,
I may know what you mean.
You want to know why do we use ‘<’ if we can cat xxx.txt (rather than
cat < xxx.txt).
The scenario which advisor mentioned is like this:
When you ‘cat xxx.txt’ with content  1, 2, 3, it prints 1, 2, 3
If you have a file abc with a function “def abc(x, y, z)” and you want to test the function with inputs 1, 2, 3 (pass 1, 2, 3 values to variables x, y, z ) that are stored in xxx.txt. you can use “cat abc < xxx.txt” instead of type 1, 2, 3. ( I am also a beginner so I don’t know what usually is an executable programme`s extension name and how exactly to test it.)

To expatiate, and as hinted in the lessons, commands (that take in user input/parameters) in bash typically read from a standard input (think of this as a formatted input that a command can easily process to give an answer - essentially, when one types an input to a command, that input gets formatted to a standard form, and then processed by the command. For example, in ‘cat volcanoes.txt’, ‘volcanoes.txt’ is formatted to a standard form for the cat command to process).
The results of any command are then pushed to either a standard output or standard error. The workings of showing the result are just in the same vein, similar to as you have in reading from standard input.
As an aside, one of the the themes that makes computing technology very efficient is implementing interfaces that abstract the internal workings of a system, command, function but require standard interfaces. Bash adheres to this theme with the use of standard input, standard output, and standard error.
To the question at hand:
cat lakes.txt: typical use of the cat command.
cat < lakes.txt: here, ‘<’ redirects the file ‘lakes.txt’ to a standard input and then cat works on the standard input to output a similar result as we would have seen in the first case of ‘cat lakes.txt’.
As zjedwin alluded, this approach lends itself easily to scenarios where ‘lakes.txt’ isn’t a file but say a complex command or the result of a command. In such case the complex command is evaluated, its output is then redirected by ‘<’ as a standard input to the cat command. To achieve the same result with the first approach would require a complex syntax - which is undesirable in writing efficient programs.

I found some nice tutorial series here about terminalstrong text
 

hope this will be helpful.

amazing explanation. thank you brother.

Corey Schafer is a gifted teacher , much more talented than sadly many of the teachers at Codecademy (a great programmer does not necessarily make a great teacher - and vice versa). 
"
5,Is it wise to edit or write in the bash profile?,"Get Help,Git",bash-scripting,9,"
Question
Is it wise to edit or write in the bash profile?
Answer
It all depends on a couple of factors: how comfortable we feel with the command line; if we know what kind of result the change will come about; and how helpful the change will be.
Most of the time the only changes we will need to make in our bash profile is to create aliases (simpler or memorable shortcuts to existing commands or command combinations)  or to write environment variables, which are variables that can be available from anywhere and any file inside your local machine, which allows for a higher level of safety, commonly used for sensitive data, like API keys, or certain URLs.
It is advisable to interact with it creating our own aliases, so it can feel more comfortable, we will notice that the .bash_profile  in our local machine is different than the one in  Codecademy, but do not worry, while what is already there is important, if we read through the comments we will see that it has a designated section for aliases and another one for environment variables. At the end it is our own bash profile, and since we are learning programming, it is something that we should not worry or fear.
","
how do I see all the aliases already created ?

Just type the “alias” command on the command line.

i have question.
i must use only bash_ profile as environment of can i create any environment with any name ?

Yeah, I think so because I have tried one with naming the environment with ~/.hello and it works.
$ source ~/.hello
$ pd /home/h1manshu


nano ~/.bash_profile


source ~/.bash_profile

Instead of typing it everytime, we can also make alias of it and make it much more easier.
First

nano ~/.bash_profile

Second

alias bp=“nano ~/.bash_profile”
alias sou=“source ~/.bash_profile”
echo “Created Successfully”

Third

Press Ctrl+O and Hit enter for Save
Ctrl+X for  exit as you have learned

Fourth
Now to activate it we have to write

source ~/.bash_profile

Now you have Successfully created alias for nano and source
But i will recommend that you type the whole command everytime as it will be more beneficial.

When I want to save the nano file with ^O it always opens a window asking me to select a file from the computer. Why is that the case. I can therefore only save with ^X.
I am really confused.
Help would be greatly appreciated. 

https://www.codecademy.com/courses/learn-the-command-line/lessons/environment/exercises/bash-profile
I tried to start from the beginning.  Now when I call the profile it says “permission denied”

no it isn’t advisable.  I just did it and now I can’t go back and I can’t go fhttps://www.codecademy.com/courses/learn-the-command-line/lessons/environment/exercises/bash-profile.  Help!
"
6,'ls' Command Not Working On Windows,"Get Help,Git",,17,"
Question
Why doesn’t the ‘ls’ command work when I try it on my computer or in the Codecademy terminal?
Answer
If your computer is running Windows, you’ll need to make sure you’re trying this command inside PowerShell. Otherwise, the command for Windows to do the same thing is dir.
If you’re trying the command in Codecademy’s environment and find it isn’t working as expected, make sure you’re typing it exactly as asked: ls. Note that Ls will not work – commands are case-sensitive! Any other variation will not work.
","
Try reloading the page. The command line wasn’t appearing for me until I did this.

To access the Windows command prompt just type **cmd**  on your start button. Then type  dir.

Powershell’s ‘ls’ command is an alias of a command-let, “Get-ChildItem”. Command-lets are built-in functions that perform specific tasks!
For further reference: https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/get-childitem?view=powershell-7

I tried it on PowerShell but didnt see the typed text. Instead, it just skipped to the next line.

Hi palinalyze,
Can you tell us what you have typed in Powershell?

Thanks for the promptness. I realize that for PowerShell, I do not need to type the Shell Prompt ($) just the command “ls”. As soon as I did, it displayed a directory of my location…
One question @tbruck, so PowerShell is sufficient for taking this section of the course? I dont need a unix-based system?

You’re right, the prompt $ does not have to be typed in the command line.
Regarding your question, I am not sure, I am not associated with Codecademy, nor a frequent user of Windows-based systems, but from what I know Microsoft has tried to mimic basic bash functionalities in PowerShell, so I think you will be fine with what you learn in the course.
If you’re interested in how PowerShell and bash are different, here’s an article I’ve found that tries to compare PowerShell to bash:


TheShellNut – 30 Sep 15



PowerShell equivalents for common Linux/bash commands
The majority of my colleagues have more of a Linux background than Windows. So their cat and their grep are near and dear to their heart and their first refl...





Microsoft also seems to (plan to) implement bash on Windows 10,



PowerShell – 1 Apr 16



Bash for Windows: Why it's awesome and what it means for PowerShell | PowerShell
This week at Build, Microsoft announced that we will be enabling you to run “Bash on Ubuntu on Windows” as a developer tool for Windows 10. It will natively support Ubuntu userspace and GNU/Linux utilities, including the apt-get package manager that...






The courses teaches bash. Codecademy provides the environment to run bash in the lesson.
If you rather want to use powershell, you should learn powershell.
powershell is very powerful, especially when used with c# and .net.
If you want to run bash on windows, there are several options, like WLS (windows linux subsystem).

Which Codecademy courses would you recommend for Windows based users if that is the case?

Codecademy doesn’t have a powershell course so far i know, cmd isn’t much
but i am sure there are powershell tutorials on the internet 

Does it mmean that the Command Line course at Codecademy will not be helpful for windows users? I really want to learn and pratice it, I’m also a pyhton learner and a pro-member)) … what could you please recommend?

There isn’t really a fixed answer for that. If never need a *nix system, then you are very likely better of learning powershell.

hello again, I decided to continue learning this chapiter “eventhough i was thinking comand lines in macs or *inux are != windows …” just to realise that the last point in the chapiter suggests “git gui” on windows with the same “comands” I’ve learned.
Thank Jesus !!! Thank you #Codecademy.

Actually, there are a bunch of different solutions. Git bash works, but windows 10 also has WSL (windows linux subsystem), given this was created with collaboration between microsoft and Canonical (company behind ubuntu, one of the most popular Linux distros), I would give WSL a try
I personally run a dual boot (two operating system installed along each other on the same machine), at boot you simply select the OS you want to run

Can’t we also use VM box or VM WARE where we can virtually run linux OS instead of WSL?

That is certainly possible, each approach has its pros and cons. You could even install Linux alongside windows.
"
7,How can I use these commands on a Windows computer?,"Get Help,Git",,36,"
Question
When I try to use touch on my Windows computer, it says the command is not found. How can I use this on Windows?
Answer
A good program for emulating a Linux environment is the Git Bash terminal. That article will show you how to set it up on Windows – don’t worry about the Git stuff. That’s another tool you should definitely become familiar with, but the Git Bash terminal will allow you to use touch, mkdir, etc.
","
Hey guys, don’t use touch. A more tradition way would be to use help for listed commands.
If your computer runs slowly, here’s a list!
help - Displays this message
mkdir - Makes a directory in the specified folder
echo - Prints a message
color - Changes the color of the screen


Hi, what is your reasoning behind not using ‘touch’ - especially as it is taught in the Command Line Course. Additionally, I’m afraid I don’t see the correlation between using ‘touch’ on BASH and ‘help’ on Windows. Could you clarify please?

Hi,
I was also looking for Windows equivalent and found something on this link:



Jon Gallant



Linux Touch Equivalent for Windows AKA How to Create a File Without a Name in...
Windows Explorer doesn’t allow you to create a file without a name:

Windows doesn’t have a native “touch” equivalent, which is a native Linux program that allows you to create empty files and change






If you have an updated Windows 10, then you can use WSL(Windows Subsystem for Linux). It is available for free from the Windows store. Just search for Ubuntu in Windows store and install it. For more information, check Microsoft’s website.
If you have any other version of windows, you can use emulator like cygwin.

Hi Guys.

What if I just want to work on cmd. It comes with windows and I don’t have to download any thing else.
What is the difference between cmd and WSL ( should i even be comparing these, sry! I am new to all this)
Why should i learn Command line for unix based systems while i work on windows all the time? I mean what are the advantages of this?
Are the skills learnt for unix transferable to other systems? I mean i couldn’t use any of the navigation commands learnt so far on cmd.





 rdb20:

What if I just want to work on cmd. It comes with windows and I don’t have to download any thing else.


then use powershell, its a lot more powerful and is also included in windows



 rdb20:

What is the difference between cmd and WSL ( should i even be comparing these, sry! I am new to all this)


WSL (windows subsystem for linux) is just linux running on windows. So then you still have a *nix based system.



 rdb20:

Why should i learn Command line for unix based systems while i work on windows all the time? I mean what are the advantages of this?


because a lot of servers (for websites) run linux another unix derivative, which all use POSIX standards, which means a command working on linux also works on macOS and solaris. And servers often don’t come equipped with a GUI, so you will need to use the command line.



 rdb20:

Are the skills learnt for unix transferable to other systems? I mean i couldn’t use any of the navigation commands learnt so far on cmd.


windows doesn’t honor POSIX standards, so yes, it makes sense you can’t use *nix commands on windows.

Awesome. Thank you so much. It makes sense now. thank you.

Use Windows PowerShell. If I knew this I wouldn’t waste my time installing WSL or Git Bash terminal. I’m not saying those two programs aren’t any good, I’m just finding it is easier to use Windows PowerShell to run the command lines teaching here instead of trying to install something that I, admittedly misunderstand its usage, and got mad when I couldn’t use it the way I want. I’m not gonna go into detail of my problems here to keep the answer short, but I just wanna say that knowing those programs are useful is good, but as a newbie – using Window PowerShell is way easier. I will learn to use those two programs in the future when I am more familiar with command lines.




 discreteloner:

using Window PowerShell is way easier.


powershell doesn’t have the simplicity of bash. But true, if you use a windows ecosystem you are better of with powershell
on the other hand, its interesting to ask yourself why windows is embracing linux so much

When I am more familiar with command line, is it better to continue using Windows PowerShell or is downloading WSL a better option?




 stetim94:

simplicity of bash


What is bash?
I just tried powershell ( searched poweshell in start menu - windows 7) and tried all commands learned so far. It worked.
As I haven’t yet completed the course , its use is still not apparent to me as it seemed to be a simple file management system. On Wikipedia it says that it can be used to automate tasks. What kind of tasks are we talking here?




 rdb20:

I just tried powershell ( searched poweshell in start menu - windows 7) and tried all commands learned so far. It worked.


powershell is maybe even more powerful then bash (dunno, haven’t used powershell much), but especially with the .net eco-system from what i have heard/gathered.



 rdb20:

its use is still not apparent to me as it seemed to be a simple file management system


file management is the thing you learn first, but you can do so much more. All kind of tasks can be automated. You can research it on the internet, its too broad for me to answer on this forum what bash is all capable of.

If you want to create new file,
other then using “touch”, which will not work in command prompt.
Use:
echo. > filename.txt
OR
type null> filename.txt

I think the best way to start diving into Linux is to get VirtualBox or somelike virtualization program and follow tutorial to get an Ubuntu system running in a window, in your Windows system.
Also you can dual boot.
Regards,

This is pretty annoying. I don’t use Mac, I use Windows. I’m now paying to learn commands I’ll never use.

Maybe not on your personal computer, but if you go into web development, you will find that many servers run linux. So knowing these commands can useful
there is a good change you will run into a *nix based operating system if you become a developer.
finally, you could be right and always use windows. Then this course is maybe not for you, that of course is a possibility.

I am also a windows user and am just starting out trying to learn SQL and then python.  As I went through the course I got to the section to create my development environment on my computer and so got directed to take the command line course.  I started to use Power shell.  It seems to work, but found that “touch” does not work. I found I can use a function “fsutil”  like this:
C:>fsutil file createnew emptyfile.txt 0
as long as I am running it as administrator.  It produced this:
File C:\emptyfile.txt is created
Also found that in command prompt without being an administrator I can use:  C:>type nul > empty.txt
Other commands seem to work: ‘ls’ works the same as ‘dir’; ‘md’ and ‘mkdir’ both work.
However, I don’t know if I will run into problems as I learn more commands.  Should I stay with Powershell, or switch to something else?  As a newbee it is hard to figure out and I can spend a lot of time spinning my wheels.
Thaniks
.

Once you gain enough experience, languages just become tools, and you use the right tool for the job.
If i had to develop an application in C# + .net, i would also use powershell, it juts fits together really well.
So in the end, it doesn’t matter. Learn what you need to do for the task at hand. If your intention is to build a web application with python (django, flask) and mysql or postgressql, hosting is more common on linux servers, so then learn bash.

Use Windows Linux Subsystem - https://docs.microsoft.com/en-us/windows/wsl/install-win10
It gives you everything you need.  (no need for cygwin anymore !!)
"
8,Why would I want to use nano?,"Get Help,Git",,6,"
Question
Why would I want to use nano?
Answer
On a regular basis, nano will not substitute our best text editor, but it used to be the text editor before there was a Graphical User Interface, it had stayed as part of the command line for the simplicity, while we could probably use Word for most of our document needs, if we are working already on the command line and we need to make a quick adjustment to one of our files, nano will be one of our best tools for the job, once we get the hang of a few of the commands needed,  the time spent updating a text file would be two times as fast in comparison to using any other known text editor.
It might not be a replacement for what we have been using now, but it is a helpful tool when we need to make quick updates or text files.
","
Thank you for this answer, really helpful.

If I want to update a word document from the command line, how can I do it?
I get only hieroglyphics.

Word files are not stored in plain text like .txt files, but in a binary or XML based format that is not properly readable by a plain text editor like nano.
For more information, have a look at


https://docs.microsoft.com/en-us/deployoffice/compat/office-file-format-reference,
https://wiki.fileformat.com/word-processing/


So what can you use nano for? For instance, can you adjust js files?




 silvith:

s?


You could. Code is generally stored in plain text even if it’s .js, .py, .cpp, etc…
Plenty of files are stored in plain text, basically when the output format of the text isn’t really something you want to waste resources saving.
"
9,What are practical uses of the echo command?,"Get Help,Git",,1,"
Question
We see here that the echo command can print to the standard output (usually the terminal) whatever we pass to it as an argument:
$ echo Hello!
Hello!
$

How do we practically utilize this command?
Answer
Let’s keep in mind here that the value of the command line functions is not only that we can use them in the terminal, but that we can write programs, called shell scripts, with them.
The echo command plays the same role as the print function in other languages. Along with printing common strings, “Hello!”, we can print the values of environmental variables to the standard output with echo. For example echo $PATH, will print the value of PATH: your search path. In this way, echo is as practical as any other print function.
",
10,How helpful could aliases be?,"Get Help,Git",q-a,7,"
Question
How helpful could aliases be?
Answer
Helpfulness will vary on how much we use the command line, often times we will notice that most commands are already quite small, like: cd, pwd, ls,  and ., but sometimes we will find ourselves writing the same combination of commands, for example, if we are using Chrome as our default browser, most likely chrome is the command to open the browser, and chrome [filename] is how to open a file on the browser, using this knowledge I rather have a three letter command, so I would go to my bash_profile and set an alias for it:
alias crm=""chrome""

once saved, we only need to source the bash profile and then we can use crm to access the Chrome browser.
another alias I could create is because I need to know my IP address often, and thus I need to use curl ifconfig.me on the command line, but instead of all those characters, I will change it with an alias:
alias mip=""curl ifconfig.me""

As we can see, the more we use our command line, the more helpful aliases become, yet it is also just about personal preferences.
","
I use an alias to open the bash profile.
Ex. alias nbp=""nano ~/.bash_profile

You could also create a .bash_aliases file which is the preferred method  in most for cases to store your aliases.  Then source it like this  . .bash_aliases the first dot means “source”

you are genius buddy

This is really interesting. Did not thnik of it at all.

It’s exactly which i made now and I found your to be same…coincidence. I’ve used nbp for nano ~/.bash_profile and sbp for source ~/.bash_profile 
alias nbp=""nano ~/.bash_profile""
alias sbp=""source ~/.bash_profile"" ```

can we use ./.bash_profile instead ~/.bash_profile because . and ~ both represent directory I guess and when I tried both worked. So, why we don’t use the former.?
"
11,FAQ: Learn Bash Scripting - Loops,"Get Help,Git",,58,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Loops” exercise from the lesson “Learn Bash Scripting”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Web Development
Learn the Command Line
FAQs on the exercise Loops


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
I didn’t understand any of this lesson. I had no idea what to do and all of the words didn’t make any sense. The only thing I finally understood was the solution, but that was after I had given up on the exercise. Given the little knowledge in programming that I have, how was I supposed to know how to do what the lesson was asking me to do?

I agree, the lesson in no way explained nor gave an example on “how to” nest a conditional “if” statement within a while loop.  It was inferred that running an echo command was no different than including an if conditional within the while loop. I don’t believe someone trying to learn Bash would “just” pick up on that.
This is problematic with tutorials, at least so I have found, where Bash, Linux etc are concerned. Sometimes programming as well, it is done in a way that is not very beginner friendly. There are terms and behaviors that do not always get very well defined.
Perhaps a better explanation of what loops are, how they work and how/when to use them  would be beneficial before doing an exercise on nesting conditional within conditionals. It may also be nice to see an example of the nesting of one conditional into another before asking a novice to perform.
I have been a Linux user for years, written plenty of Bash scripts and to be quite honest the way this exercise was presented was a bit confusing.

I agree with both of the above users. I have been scripting for a while now and the way these instructions are written would be very confusing for a beginner and just confusing in general. Unless you know about nesting if then statements into loops, this exercise will just be frustrating and make the user want to quit.

I’d also agree with this sentiment. This is a nice Bash refresher, but this would be extremely tough without some Linux and Bash knowledge already ingrained. The if statement provided in this lesson does not even provide indentation which will increase confusion.
Similarly, I’m not sure how the answers are being calculated. It does not look to be comparing STDOUT in the terminal, as my results are the expected output yet the solution states it’s incorrect. It’s a nice start but these could be fine tuned some.

I have to agree with everything that has been stated.  I want to be able to apply what I have learned in real-life situations.  Understanding conditions, loops and how they work is important to writing meaningful scripts.  Not to mention, they lay the ground work when utilizing them in other programming languages. This lesson needs to be reviewed and adjusted from a Beginner perspective.

Just wanted to add my voice to the group of people stating their confusion and frustration at this exercise. I managed to complete it, but I have no idea what I just did and why.
Compared to the Python 3 course, the Command Line course feels like an afterthought and the way some lessons are laid out are weird as heck. The instructions will ask you to write and run some commands without knowing what they are or what they do, THEN they will explain what you have just done. Wouldn’t it be better to begin by explaining some basic principles, asking the user to perform the task and then review the material again to make sure it sinks in properly?

My thoughts exactly. Before starting Python3, I had absolutely no coding experience, but was eventually able to figure everything out even if i had to restart a lesson. With the command line lessons, I always have to do them twice and still do not feel I am getting enough repetition for all the the concepts to stick long term.
My goal is to be able to use what I learn in a conversation with the computer, not to buzz through a course “by the end of the semester.”
Maybe our feedback will alter the design of the CLI course

Super NOT impressed with this particular lesson. Way too much assumed by the writers on what the users know/don’t know about CLI.

Lesson 4 of 7, Bash Scripting Loops
I think I had the correct solution on my own. I just wish I had copied my solution prior to asking for the solution so I could compare the two.
Funny (bug?) when I ran the script, I think the output was wrong. It prints the first greeting and then the second greeting twice (three lines in total).

I 100% agree with this. I’ve been staring at this lesson for days and with no prior knowledge of programming before the Python 3 course, and this is extremely confusing for me.

Lesson 4 (loops), ex 1 has a bug on line 5, or what seems to be a bug to me:
while [ $greeting_occasion -lt 3 ]  #this works
while [$greeting_occasion -lt 3] #this does NOT work
Is bash really this picky about white space?!

Reading all these comments even from people with programming experience makes me feel a million times better as a total beginner who was wondering if I was just plain stupid 

I didn’t even start with this lesson, instead I tested the if/then/else statement. My code is as follows:
#!/bin/bash
first_greeting=""Nice to meet you!""
later_greeting=""How are you?""
greeting_occasion=2
if [ $greeting_occasion -lt 1 ]
then
  echo $first_greeting
else
  echo $later_greeting
fi

The only thing I’m changing is the value of greeting_occasion, then I type ./script.sh into the terminal and the output is always “Nice to meet you!”, even if greeting_occasion equals 1 or more. To be honest, I don’t see a point in contiuning if not even the if/then/else statement works properly… Or am I missing something here? Is there a typo or anything in my code?

There are three boxes on your page. First box: Instruction; Second: script file; Third, terminal;
The only reason I can think of is, you did not run the second box - There is an orange button for you to update your script file.
Write your code in script file >> Update your file >> terminal run: “chmod +x ./script.sh” >> terminal run: “source ./script.sh”
According to your code, you are doing the previous assignment. The result is supposed to be “How are you?” Let me know if it works!

Wow, that was the problem! Thank you!
I didn’t know I needed to press “Run” every time I make a edit in my code. I think this wasn’t explained anywhere… I’m happy that the community is so kind 

Yeah, they could have explained it better. I did not know either, hahaha.
Don’t know about the community. Just felt like helping 

I don’t recall this lesson stating exactly how to go about nesting conditionals.  I got frustrated and took the solution, compared to my code and the only difference is that mine did not contain the indentations.  How many spaces are we to use 2? 4? Use the tab key?  In the provided solution they indent 2 spaces.  Make sure you follow that convention going forward…
while …
do
–if …
–then
----echo…
–else
----echo…
–fi
…
done
Frustrating for sure.

@danieljc8888 thanks a lot for the explanation of what I should write in the terminal to be able to run script.sh Now I can finally see the output. Before I didn’t get it and was doing:
$ ./scrpit.sh
bash: ./scrpit.sh: No such file or directory

Now, thanks to you all good:
$ chmod +x ./script.sh
$ source ./script.sh
Nice to meet you!
How are you?
How are you?
$

Good stuff. Thanks for helping 

What’s the function of “in” within the for conditional statement?
I didn’t saw an explanation on what does “in” do, i appreciate you to explain it to me.
Thanks.
"
12,"What makes stdin, stdout, and stderr ""standard""?","Get Help,Git",,1,"
Question
The introduction to standard input (stdin), standard output (stdout), and standard error (stderr) in this lesson seem to be the same thing as the usual input, output, and error. Why the distinction of standard?
Answer
The distinction of standard has to do with where our input is being read from and where our output/error are being written to. When we speak about stdin, stdout, and stderr, we’re implicitly talking about the default locations in an environment where our programs will interact with. Being default, we don’t control where these locations are which makes input/output redirection particularly useful and important.
",
13,Is it just a convention or all environment variables have to be uppercase?,"Get Help,Git",,1,"
Question
Is it just a convention or all environment variables have to be uppercase?
Answer
There is a general consensus on how to write environment variables or shell variables which is all uppercase with underscores if needed multiple words. This will help us and the computer to differentiate between them and other variables, for example, Google’s styleguide states:

All caps, separated with underscores, declared at the top of the file.
Constants and anything exported to the environment should be capitalized

Now, this is not something written in stone and some other companies and teams have their own terms and flexibility around the subject, so I recommend that at least to start with, it would be good practice to keep our environment variables in all caps and with underscores, then as we are more comfortable, adjust to what feels more comfortable for us, and whatever guide the teams we work with maintain.
",
14,FAQ: Learn Bash Scripting - Review,"Get Help,Git",,23,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Review” exercise from the lesson “Learn Bash Scripting”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Web Development
Learn the Command Line
FAQs on the exercise Review


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
The BASH CLI course is far too narrow and, AFAIC, incomplete.

It really seems like this Bash Scripting course stops short. Can somebody tell me about, for example, functions?
I’ve done some research, but I can’t get my function to return anything. When I call the function, instead of returning a number, it apparently returns the name of the function.
Here’s my code:
#!/bin/bash

get_number() {
	return 6
}

boolean_number=get_number
echo $boolean_number

Out of the code above, all I get in the terminal window is get_number
Can someone help me, please?

That’s not the name of the function, that’s just text which happens to be the same characters as the name of the function. You’d need to evaluate that expression to obtain its result.
You might also want to write the result of your function to stdout rather than setting an exit value.

Well, how do I properly call the boolean_number function and assign it’s return value to the boolean_number variable?
Also, can you confirm that I don’t have any syntax errors in my function?

You…don’t. They’re not conventional functions. They’re more like programs.
If you wanted such behaviour you should likely be looking for something like perl/python/ruby/whatever.
bash isn’t a programming language as much as it is just glue between other programs
You can certainly encode logic with it but err. Yeah. That’s not quite what it is.

So, the first thing to note is that your expectations don’t apply.
But you can get similar behaviour. Like mentioned, you’d probably print the result instead. You can also set a variable which the caller can look at afterwards.
add() {
    echo ""$1 + $2"" | bc
}

echo $(add 1 2)


add() {
    returnvalue=$(echo ""$1 + $2"" | bc)
}

add 1 2
echo $returnvalue
unset returnvalue

Oh and getting quoting right is a bit of a nightmare so, again, you might want to prefer to just not, and instead use some… uh. you know. programming language.

Oh. Okay. That’s too bad

Hello to everyone!
Could someone please be so kind as to explain some things to me?
So far I had no trouble understanding other lessons but this one in particular I cant understand. For example I don’t understand the meaning behind this part of code “index=$((index + 1))”…why do we write that, what is its purpose, why “+1”…Other lessons breakdown each command word by word and explain what each word does basically, what is the logic behind it. Here I have no clue what this means and what is its purpose. As a result, I do not understand the result that is produced from the code we build in this chapter.
while [ $greeting_occasion -lt 3 ]
do
if [ $greeting_occasion -lt 1 ]
then
echo $first_greeting
else
echo later_greeting
  fi
  greeting_occasion=((greeting_occasion + 1))
done
Why does it produce just 2 “How are you?” statements if this is a loop? the variable does not change (remains equal to 1). If I am not mistaken the while loop basically loops the same output over and over again as long as the variable meets a certain condition.
Then we go to Inputs…here I cant even begin to understand what I want to ask…The exercise tells us to get user input and assign it to the variable greeting_limit…and replace the number 3 with that variable(prepended $)…is ‘read’  adopting whatever ‘echo’ follows? I am lost…
Please if someone could shed some light for this particular last chapter(5) of Learn command Line… I wish I could ask better questions but I am too confused. And again this is the first time I felt this way into a lesson.
Thank you in advance!

I agree. The course was great, and provided explanations for each command as well as how it might be useful when coding IRL. But this Bash section just confused me, and I can honestly say that I have no idea why I did what I did, what the purpose of the commands is exactly IRL, and how input arguments, aliases, conditionals, loops, or anything else in this section, fits together. This was horrible. And it began at the beginning with the first command: #!/bin/bash  (pray tell what does the “#” do, or even the “!”). This was frustrating, and not at all worthy of being approved for beginners.

Glad to see I am not the only one who struggled with this…I was so frustrated and was starting to believe I am a dummy hahaha

Just had the exact same thoughts. Spent a few days working through the course and understanding it all more or less, but the bash scripting section referenced so many things without telling us what they are, what they mean or why they did them. Suddenly felt like I skipped ahead 10 lessons.

Hi
Okay, so I have a couple of questions regarding the purpose of bash scripts. The tutorial states that all code that can be run in terminal can also be run using a bash script, so I don’t quite get why they need both… What do bash scripts have that terminal doesn’t have?
Also, there seems to be some connection between bash scripts and the ./bash_profile that I don’t understand… Is this correct or am I overinterpreting?
Lastly, could someone please explain to me what the purpose of the read command is (btw, if there is an acknowledged guide explaining all of the function, it would be awesome if you could share that). It says in the tutorials that it “prompts the used for input in order to access data external to the bash script file itself”. - I do not understand what that means. Below is the example that they gave in the exercise:
echo “Guess a number”
read number
echo “You guessed $number”
Thanks in advance

A script is code stored in a file for later use.
If you just want to fire off some one-off commands then you’d have no reason to store the commands in a file.
On some systems bash is analogous to your mouse pointer, it is how the computer is interacted with. For some systems there isn’t even a choice, they aren’t plugged to a monitor and therefore don’t draw pretty pictures for anyone to click on.
Many programs come with manuals, if you run
$ man read

On a system that has both man and manpages installed then you’ll find a description on what it does…You can also google for that manpage.
.bash_profile and .bashrc can be used to run commands every time bash is started, think of it as settings, except there are no settings, instead you run commands to modify the environment to your liking.
bash’s man page has information about them.
$ man bash


What would be really helpful is if someone could post the code for the three ideas suggested in the exercise to help with our learning:
""Some ideas:
** ask the user for different greetings*
** add more than two greetings*
** add more conditions to adjust the greetings over time*""
Thanks

Echoing the sentiment from others on this lesson. Extremely confusing with very little real-world examples of applications. Anyone can follow the instructions in this, but it seems the “WHY” is missing entirely. I worked through the entire thing and have read all of these comments – still no idea why I’d create bash scripts for, say, building a SaaS application.

I too had a problem with this code and mine looks the same as yours but it keeps telling me im wrong. These instructions are deeply flawed




 pvas888:

“index=$((index + 1))


if you been into while loops in other programming languages so far , basically it’s just needed to determinate when the loop has to stop .
If you look at the while loop condition you wrote $greeting_occasion -lt 3 , the while will keep running till greeting_occasion reaches the value of 3 , which you are incrementing by 1 at the bottom of the loop ( greeting_occasion=((greeting_occasion + 1)) ).




 pvas888:

Why does it produce just 2 “How are you?” statements if this is a loop? the variable does not change (remains equal to 1)


That’s cause you have a syntax error , it should be   greeting_occasion=$((greeting_occasion + 1))  
you forgot the “$”.

Was just “awarded” the Badge for “learning” Bash Scripting, and reader, let me tell you that this is the first badge I feel like I should send back, lol. This was terrible. I’m a big believer in absorbing concepts properly before moving on to the next, but I feel like I’m in quicksand here, and I’ll be stuck here forever unless I just move on and hope for the best.
On to Python, and leave this mess behind. I paid good money for Codecademy Pro but I think I’m going to go to another source to properly learn bash scripting so it doesn’t completely undermine me while learning Python.
What a chore this was. Scrap it and start over.

This would be highly appreciated @ionatan and any other person that understands what we need to do
"
15,Why does the uniq function only work for adjacent lines?,"Get Help,Git",,5,"
Question
We learn in this lesson that in producing the unique entries in a file, uniq will only compare lines which are adjacent and so it is best used along with sort. Why doesn’t uniq actually return unique entries or simply call sort on our behalf?
Answer
One possible response to this question has to do with the so called Unix Philosophy which, in brief, focuses on (1) designing small functions with one well-defined purpose and (2) chaining these functions together to accomplish more complex tasks. With this in mind, let’s think about uniq. An entry in a file is unique if it is not equal to any other entry. This statement is easy to make but invites many different potential solutions. One of which is to first sort the entries and then compare adjacent lines. Remembering that each function should do one thing, uniq shouldn’t sort your file since sort can do this. It should only do the check for adjacent pairs.
This decision is a subjective, of course, but similar decisions are made with many command line utilities and so it is helpful to keep this perspective in mind.
Furthermore, note that this decision is not necessarily bad. maybe you know that all duplicates are adjacent and you don’t want the overhead of sorting your file. Then uniq will still be appropriate for this case.
","
The Unix philosophy is a big part of it. It’s also worth noting that ‘uniq’ might just be a bad name. You don’t necessarily only use it for producing unique lines.
For example, if I write a list of instructions like “Go home, go to the shops, go home”, then the instructions probably make sense. I don’t want to delete the final instruction. But if the instructions were “Go home, go home, go to the shops” then that’s different. I can’t go home twice in a row. In a list like this,  I might want to delete adjacent duplicates (and only adjacent ones).
“Delete adjacent duplicate lines” is a decent utility to have. But that’s hard to boil down into a short name. It probably gets used with sort often enough, that “uniq” sounded like a better name.
That’s the point of small sharp tools: it gives you a broader range of options. If uniq automatically sorted the text first, then you wouldn’t have the option to use it on its own.

Hi Guys, I am using Git Bash on my personal windows computer but I am not able to type an “|” (pipe). I am using “strg + alt + |” but it is not working.
Please help how to use it.
Thank Felix

https://www.google.com/search?q=how+to+add+alt+symbols&oq=how+to+add+alt+s&aqs=chrome.1.69i57j33l7.5878j0j7&sourceid=chrome&ie=UTF-8

Thanks zjedwin,
much obliged for this explaination.
"
16,Why does this step not pass even if I'm in the right directory?,"Get Help,Git",,15,"
Question
I’ve navigated to the correct directory, 2014/dec/, but the step is still not marked as correct with a green check. Why is this, and how can I fix it?
Answer
Sometimes you’ll need to print the working directory or list the files to pass a step.
If you know for sure you’re in the right place, try doing pwd and ls and you should pass! If not, and you’re 100% sure you’re in the right place, try the following:

Make sure you’re using Chrome, as it’s typically the most reliable
Clear your browser’s cache and hard refresh the page (cmd + shift + R on Mac, ctrl + F5 on Windows)

","
I got the same issue. The reason you don’t pass is because of the way you decided to come there.  The command that it wants to see is ‘‘cd 2014/dec/’’, which means you have to be in the ‘‘blog’’ directory for it to work. =)

I got the same issue, I was in the right directory but it still didn’t work. I clicked “Get help” and “Give me the solution…” and I could pass into the next step.

When I did this, it wasn’t changing my directories and files but it was giving me the check mark.  When I moved on, everything wouldn’t change to what I needed to learn.  When I clicked the get help and the solution thing, it deleted my progress but gave me the check mark.

I had to back up using ""cd … "" a couple of times to get to the right spot. I kept getting an error (bash: cd: 2014: No such file or directory) just using “cd 2014/dec/”. Maybe that is incorrect and I should have used something else. This is ALL new to me, so highly possible. 

Thanks for sharing what the CC solution was expecting!
A shame that CC doesn’t recognize the solution of typing .. twice followed by 2014/dec in one same line, since we had just been introduced to cd ../feb on the previous page (6. cd II).

Don’t worry, you did the right thing 

Just make sure you get to the required directory in a single step.

That’s what I did as well. I typed cd …/…/2014/dec. It doesn’t matter whether you do it in a single step, it specifically wants you to type out the entire path which is a pain in the bum and imo should be fixed.

true, so why the exercise say that we go  to 2014/dec in ‘one step’? when i need 4 step, pwd, cd…, cd…, cd2014/dec

try:

cd ../../2014/dec



This was the first thing I did. I was really confused when it wasn’t accepted. Apparently it looks for the specific command ‘cd 2014/jan’.

Same here, I was happy to apply what I had just learned (that I could string .. into the path to back up instead of starting from home) and was disappointed it wasn’t recognized as a solution. Bumping this in the hopes that solutions is included as acceptable for future users.

Got similar issue and was stuck until i refresh the page

Did refreshing give you the desired solution or just the pass to move?
I did refresh although I got a PASS before the refresh but I did NOT get the desired result with the keyboard.txt as last in the directory list.
I am moving on after spending minutes repeating my code and calling for solution without result. It MUST be a bug. Just thinking it is a BUG.
"
17,How do we sort input not separated by newlines?,"Get Help,Git",,4,"
Question
We are introduced to the sort function here. Can we use sort for sorting input not separated by newlines?
Answer
Though the function sort only works to sort input separated by newlines, just as we have been able to chain together simple command line functions to accomplish complex tasks, we can do the same to sort input not separated by newlines. In order to do this, we will need to replace the symbols separating the input we would like to sort by newlines. To accomplish this, we can use the sed command (which we also learn about in this section). For instance, if our input, in.txt, is separated by spaces instead of newlines, we can sort the file by
sed -e ""s/ /\n/g"" in.txt | sort

","
Hello, @zjedwin!
Thank you a lot for your explanation. I understand the sed function and what it does. The things written in red however, are a bit unfamiliar to me. Is this some sort of regular expression -RegEx-? Can you, please, let me know what they mean?
Thank you & again, sorry to bother!
Alex

you can do:
man sed

which is the manual, which contains the information needed:
s/regexp/replacement/
Attempt to match regexp against the pattern space.  If  success‐
ful,   replace  that  portion  matched  with  replacement.   The
replacement may contain the special character & to refer to that
portion  of  the  pattern  space  which matched, and the special
escapes \1 through \9 to refer  to  the  corresponding  matching
sub-expressions in the regexp.
so the s means subtitle
/ is a delimiter
 is the regular expression, which is simple in this case, its only a space
\n is new line, so all spaces are replace by new lines.
g means global, without the global flag only the first occurrence in each line is replaced.

Whoaa! Thank you a lot, @stetim94!  This makes so much sense. I was looking on the internet also & somehow managed to understand portions of it. You confirming this made everything super clear & gave me a lot more support and made trust what I have learnt. I was about to finish the next challenge and a the last step found this:

image.png2048×1408 312 KB

Basically, is use sed to:

S - substitute
/ - delimiter
loss - all instances of the word ‘loss’ with
‘win’
g - apply those globally.

"
18,"What is all the information presented when I write ""ls -l""?","Get Help,Git",,2,"
Question
Here we’re told that ls -l shows us the file system that we’re working with. In the first exercise, we’re also shown the filesystem containing much less information than this command shows. What is this extra information that we are seeing?
Answer
The extra information that we’re seeing here is information fundamental to any file in a system. In order from left to right, these are

File privileges: If we can read (r) from or write (w) to the file. And finally if the file can be executed (x), for example as programs can.
File ownership: Who the file belongs to in the system.
File group: Which group within the system the file belongs to.
The size of the file in bytes.
The date the file was last modified.
File name.

","
I searched for ‘file permissions’ and came across this site: https://www.guru99.com/file-permissions.html
Read( r)  Write( w)  Execute( x)



Read:  This permission give you the authority to open and read a file. Read permission on a directory gives you the ability to lists its content.

Write:  The write permission gives you the authority to modify the contents of a file. The write permission on a directory gives you the authority to add, remove and rename files stored in the directory. Consider a scenario where you have to write permission on file but do not have write permission on the directory where the file is stored. You will be able to modify the file contents. But you will not be able to rename, move or remove the file from the directory.

Execute:  In Windows, an executable program usually has an extension “.exe” and which you can easily run. In Unix/Linux, you cannot run a program unless the execute permission is set. If the execute permission is not set, you might still be able to see/modify the program code(provided read & write permissions are set), but not run it.


"
19,FAQ: Manipulation - Generalizations,"Get Help,Git",,2,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Generalizations” exercise from the lesson “Manipulation”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Web Development Data Science
Learn SQL
FAQs on the exercise Generalizations


Are there any other commonly used SQL commands?

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
I think it’d be easier to remember all these clauses if they were introduced in the following order:

SELECT

We need to know how to view the data after adding, modifying, deleting rows and columns, to check whether we have done it correctly. So SELECT is the first thing to learn.


CREATE (and discuss constraints)

The topic on constraints is a bit advanced, but it should come right after we learn CREATE.

INSERT
UPDATE
DELETE

These three clauses all deal with rows. They should be taught together.

ALTER TABLE

This one deals with columns, and in this sense is different from the above three on rows.
"
20,"What is a good use of the output redirection operator "">>""?","Get Help,Git",,1,"
Question
In this lesson, we are introduced to the >> operator which appends information to a file. That is, if file1.txt and file2.txt are two files
cat file1.txt >> file2.txt

adds the contents of file1.txt to the end of file2.txt. How do we benefit from using this operation?
Answer
The >> operator is a helpful extension of the normal standard output redirection provided by >. It is not uncommon for the data we want to store to be the result of multiple separate operations. Because of this, it is helpful to be able to build a file gradually: adding a first part, then adding another part at a later time, and so on like this without a necessary end. The ability to append these new parts with the existing file is the provided functionality of >>.
",
21,What does the | and grep commands do?,"Get Help,Git",,2,"
Question
what does the | and grep command do?
Answer
|
Is commonly called a pipe, and like the name sets it creates a way for data from the command written before it to be passed down to the command written after it, for example:
ls -l /etc | less
the first set of commands return a verbose (long) list of files and directories from the /etc directory which is where configuration files and directories are located, then the pipe passes that list to the less command which allows us to see the list in a more readable format.
grep
This command stands for global regular expression print, the value passed to it is an expression, and a second value will be a file, it will use the expression to compare it with the content inside the file, anything that contains a match will be returned to the console for us to see, for example, in the exercise the command
env | grep PATH
gets all the environment variables in our session and checks what matches the word PATH, returning all matches.
","
| is used for interprocess communication between two processes.
grep is a program which helps to find certain expressions based on a pattern.
So, to give something as input to grep we use |
"
22,"FAQ: Redirection - stdin, stdout, and stderr","Get Help,Git",,5,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “stdin, stdout, and stderr” exercise from the lesson “Redirection”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Web Development
Learn the Command Line
FAQs on the exercise stdin, stdout, and stderr


 The introduction to standard input (stdin), standard output (stdout), and standard error (stderr) in this lesson seem to be the same thing as the usual input, output, and error. Why the distinction of standard ?

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
Hello! Could someone explain me below? I didn’t understand one moment. Here
sort deserts.txt | uniq > **uniq-deserts.txt**

the file uniq-deserts.txt is created during the command execution or this file was created before and command just re-writes it’s content with the sorted deserts?
thank you!

excuse my ignorance but it says i have to type the command after the shell prompt. how do i do the shell prompt???

The emulator is not working with Firefox 68.0.2.

I guess shell prompt is nothing but $ sign here so everything we write in CLI is only after shell prompt. When shell prompt is visible then it means it is ready to accept the lines of codes for execution.
"
23,FAQ: Learn Bash Scripting - Aliases,"Get Help,Git",,25,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Aliases” exercise from the lesson “Learn Bash Scripting”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Web Development
Learn the Command Line
FAQs on the exercise Aliases


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
Hello. I am trying to find out what I did wrong here. This is a copy of my code. The first line starts at number 1.
#!/bin/bash
first_greeting=“Nice to meet you!”
later_greeting=“How are you?”
greeting_occasion=0
greeting_limit=$1
while [ $greeting_occasion -lt $greeting_limit ]
do
if [ $greeting_occasion -lt 1 ]
then
echo $first_greeting
else
echo later_greeting
  fi
  greeting_occasion=((greeting_occasion + 1))
done
When I try to run my code, I keep getting a unary operator expected error on line 6. Please advise on what I’ve done wrong, because I don’t understand it.

If you write
alias greet3=""./script.sh 3""
according to describing (!!on command line) and then write greet3 your script will work.
But I don´t understand why script it can´t be start by normal way???
And why
greeting_limit in the script is written in this way
greeting_limit=$1    ???
I hope I will figure out.

I think the $ sign in greeting_limit=$1 tells it to use the first number that is written by the user in the alias (the first input). So if you try to run it just by typing ./script.sh, you get an error because there is no number for it to use for the greeting_limit.
To complete this exercise, type alias greet3=’./script.sh 3’ in the bash terminal (not in script.sh), then type greet3 to run the script using this alias
You can run the script without the alias by typing ./script.sh and then a single number or a list of numbers, and the script will use the first number that you type. For example, if you type ./script.sh 1 2 3 then the script will run and will show you one greeting.
However - I thought that if you change the script.sh to include greeting_limit=$2 instead of $1 then it would use the second number in a list - but it still appears to use the first number. Any ideas anyone?

#!/bin/bash
first_greeting=“Nice to meet you!”
later_greeting=“How are you?”
greeting_occasion=$2
greeting_limit=$1
echo $greeting_occasion
echo $greeting_limit
this should allow you to understand it more, you can change the variable inputs and keep printing to the terminal. you have to hit run to save the code before running it in the terminal or the changes wont have taken affect. hope this helps, took me a few minutes to figure out how to test it myself.

Here my code. It works. But it is not verified as solution.
alias greet3=’./script.sh “3”’
what is the issue of doing it this way?
“” is necessary for string but is optional for integers?

That is how anyone would have tried to set their greet3 alias if they followed the syntax provided in the example. I did this also with the 3 inside quotation marks and couldn’t get past that section. Very frustrating…

this excercise is bugged. when you request the solution it shows litterally the same as  the start of this excercise…

you must first call the profile with this command:
source ~/.bash_profile
then you type greet3

The first exercise in this lesson show us a snippet of code:
./script.sh 5 #greets 5 times
What significance is this to the lesson? To the exercise? It does not seem related to anything in this lesson.  This is confusing, since that syntax has not been introduced anywhere previous.

Agree with you - it confuses your thinking for the first exercise.

It doesn’t change anything in the script file as there is nothing to change.
The only changes you make in this exercise should be made in the terminal NOT the script file.

It’s not super evident, but you have to create a bash_profile file using nano in the terminal, then type your greet3 alias into it, save, close, source the bash_profile, then run your alias command.

Thanks for the explanation. Like many other people got very frustrated with that question and the hints/solution are not clear at all.
Cheers

Hi! I’m wondering why I do not have to use source prior to using the new alias. I know I had to do that when creating/changing variables in the ./bash_profile . But for this example, I can create an alias and use it right away with the script file. Anyone have an idea?
Thanks in advance…

type the code in the terminal. Nothing needs to be done under the script file.

the source ./bash_profile command will run everything in the bash_profile, for instance the code to make a new alias. when you make an alias directly in the command line, you don""t have to run or source a file for this.

Is there any script change to be done to have the script run 3 times. How does bash know to run the script 3 times. By typing 3 in alias it doesn’t tell greeting occasion is 3 ? Please help . Appreciate your time on this . Thanks in advance.

 the code 
#!/bin/bash
first_greeting=""Nice to meet you!""
later_greeting=""How are you?""
greeting_occasion=0
greeting_limit=$1
while [ $greeting_occasion -lt $greeting_limit ]
do
  if [ $greeting_occasion -lt 1 ]
  then
    echo $first_greeting
  else
    echo $later_greeting
  fi
  greeting_occasion=$((greeting_occasion + 1))
done

 explanation 
edit bash profile file
nano ~/.bash_profile

add  alias “five”  ( alias is the new created command that will be runned in command line)
pass the argument 5 into script.sh in that alias

alias five='./script.sh ""5""'
save file and exit
ctrl+x
y
enter

don’t forget to update settings
nano ~/.bash_profile
now then you type: five
it will run the newly created alias, which will run script.sh with 5 as parameter, which will output
How are you?
How are you?
How are you?
How are you?

but why it’s only 4 but not 5? that’s different story (google: 0 index)

Question:  What happens to the aliases you set up in the command line (Not in the bash_profile) when you exit the terminal and login again? Does the alias stay or must it be redefined? are aliases set up through command line restricted to the directory you are in?
"
24,What's the difference between storing aliases and environment variables?,"Get Help,Git",,6,"
Question
What’s the difference between storing aliases and environment variables?
Answer
Aliases are simply a new way that we give to commands so we can use them on our own terms, for example, let’s say that we would like to always start  from the desktop and check location and see a list of files, but to do so we forcefully need to write cd ~/Desktop; pwd; ls every time. but with the alias we can simply say:
alias 2strt = cd ~/Desktop; pwd; ls
Now, after it is sourced we just need to run 2strt and it will direct us to Desktop, let us know that we are there and show the files and directories there.
On the other hand, environment variables are just like variables in programming languages, simply keywords that store data, in this case, usually sensitive data that we may want to keep offline.
Let’s say I have a route that I don’t want people to see me type if they are passing by, so I will create an environment variable for it in .bash_profile:
export MY_ROUTE='~/Documents/thisDir/otherDir/oneMoreDir/mySensitiveDir'
And so, after sourcing, I could say cd $MY_ROUTE and I will be taken to the location I need to work at.
So now we might find a little clearer where the differences are between aliases and environment variables, yes, they are both like keywords, but an alias holds a reference to a command and an environment variable just withholds data.
","
Does the
 $ 

really necessary when excuse the command
cd $MY_ROUTE

?

i’m confused. if its a secret, wouldn’t they see me type $MY_ROUTE?

they will see you type $MY_ROUTE, but they will not know where your “route” takes you, i.e. “~/Documents/thisDir/otherDir/oneMoreDir/mySensitiveDir”

If I create an alias, do I have to avoid spaces between “2strt”, “=” and “cd…”?
I tried it on my Mac and it seems that if I add spaces in between the above mentioned elements the terminal interprets it as if I want to create multiple aliases…

There must no be any space between the new alias and the “=” and the string containing the comand, it should always go this way:
alias new_alias=""my command""

You can see this article for more information: https://www.hostingadvice.com/how-to/set-command-aliases-linuxubuntudebian/
"
25,What does the 'source' command do?,"Get Help,Git",,2,"
Question
What does the source command do?
Answer
Source evaluates any file written after, the file if containing any commands to run, it will execute them in the order they were written in the file. for example if our file had:
echo 'This is the first one'
echo 'second'
echo 'and third'

when running: source <ourFilename> or . <ourFilename> (because . is the shorthand for the source command) we will see:
This is the first one
second
and third

of course, it does not only work with the echo command, but with any kind.
Something to keep in mind  is that source's . version is not the same as ./, dot  space and file name is the source command running the commands in the written file, but with ./ dot is simply a mark of origin, stating that the origin from which the path will be read is the current directory. Like: ./someDir/somefile means that someDir/ is in the same location that we presently are.
","
source command runs the script in the current shell only. If you do not use source, then it spawns a shell as a child process and executes commands in that.
For example-
If you want to set a proxy environment variable in terminal and you have written the command for that in a script named “export_connect.sh”
Now, if you use-
source export_connect.sh or . export_connect.sh - then the environment variable of the current shell will be set
If you use ./export_connect.sh , then the environment variable will not be set in your current terminal, as it opens a new shell and sets the environment variable in it and then closes it.
"
26,"What is a good use of the output redirection operator "">""?","Get Help,Git",,5,"
Question
The example given for the use of output redirection here:
cat oceans.txt > continents.txt
focuses on overwriting the contents of an existing file. What is another common use for this operation?
Answer
First, let’s note that > can also be used to create files. In the example above for instance, if we replace continents.txt by newFile.txt, where newFile.txt doesn’t already exist in the directory,
cat oceans.txt > newFile.txt

will create the newFile.txt, store it in the current directory, and make its contents the exact same as oceans.txt. With that in mind, another common use for > is to store the output of a program in a new file. It is likely that you have run a program at some time or other and watched as a lot of text speeds by on your screen. This is fine sometimes but in other cases you may want to store that text for further analysis. One way to do this on the command line is to run the program on the left side of > and add the name that you would like to call the new file (or an old file to be overwritten) on the right side. For instance, if the program executable is called a.out and I want the output to be stored in a file called out.txt, I write
./a.out > out.txt

","
cp a.txt b.txt seems to work the same as cat a.txt > b.txt, because both commands overwrite the content of b.txt with that of a.txt.
Is there any difference in usage/behavior between the two?

cp is kind of a COPY PASTE think about it that way - it copies file/directories. But it’s not transferring files (it’s not a cut paste) just copy paste. CAT is kind of a CUT PASTE. You are transferring file/directories from one file to the other. It also allows you create a new file in the process.

You are saying so but in the exercise we did cat glaciers.txt >> rivers.txt and it just copied and added some stuff from glaciers.txt to rivers.txt, it didn’t CUT anything as you are implying…




 7226321346:

Is there any difference in usage/behavior between the two?


Yes, but the difference is not that one works like a “cut and paste” whilst the other works like “copy and paste” as has previously been suggested…
Let’s look at what actually happens in each case.


cat a.txt > b.txt
There are several things happening in this short command:
1.1 cat a.txt is telling cat to read the contents of the file a.txt. Once it’s done so, cat's default behaviour is to output the contents to the standard output (stdout) which is the terminal usually.
1.2 > is the redirection operator, which tells cat that rather than sending it’s output to the terminal we want it go to somewhere else.
1.3 b.txt is where we are redirecting the output from cat to.

The end result here is we overwrite the content of b.txt with the content of a.txt.


cp a.txt b.txt
Here we are not doing as much. All we are doing is copying the entire a.txt file to b.txt.

The difference is that our cat command only changes the content of the file. If b.txt already exists, we change only it’s contents; if b.txt is a new file then we create a new file with the default permissions as defined by the system.
If we copy using the cp a.txt b.txt variation, we don’t just copy the contents of the file - we copy the entire file, including its permissions so if the original file was read-only then the copy will be also.
This may seem a subtle difference to you, but it’s actually quite significant. There’s more explanation available here.
"
27,What is a regular expression?,"Get Help,Git",,5,"
Question
We learn here that grep stands for “global regular expression print”. What is a regular expression?
Answer
A regular expression is a technique for encoding a string pattern. By sting pattern, I mean that you decide on a specific set of rules that any string matching your expression should satisfy. For instance, say I want all strings which contain “Codecademy” as a substring where the letters within “Codecademy” can be either capital or lower case. For example, “CODECADEMY” is fine as is “CodeCadEMY”. Regular expressions provide a compact way of encoding this logic into a sequence of characters.
Although the example I presented is easy to program into a reasonably small function, regular expressions provide a consistent interface for performing arbitrary string matches; many of which would require large, error-prone, functions. The particular sequence which encodes a regular expression is similar but not the same across all languages. Because of this, if you’re interested in experimenting with regular expressions, find the syntax and library specific to your language of choice. You can find this by searching something along the lines of “regular expressions in <MY FAVORITE LANGUAGE>.”
","
line 2 of the answer, there is a typo . ""By String pattern

Hmmm…I typed each character by the letter and output was printed out.  However, the question is still showing as incorrect?

I’m having the same issue for instruction #2.

I had the same exact issue  for question 2 and then I figured out they want “-Rl” not “R1”. The font used in the lessons makes the letter “l” completely identical to the number “1”.  Hope this helps!
"
28,FAQ: Manipulation - cp II,"Get Help,Git",,14,"

This community-built FAQ covers the “cp II” exercise from the lesson “Manipulation”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Web Development
Learn the Command Line
FAQs on the exercise cp II


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
19 posts were split to a new topic: No such file or directory error

In this exercise, we’re introduced to the * wildcard and we see it being used like so (cp m*.txt scifi/). It explains what this does in the next slide, however I am still confused as to where these text files starting with ‘m’ have come from? It says they’re from the working directory which I understand to be the directory currently open but I don’t see them. Any explanation is greatly appreciated.

This “Learn the Command Line” course is really confused. I haven’t learned how to create a new file. And the hint just leads me to another course. If I want to learn the Commend Line from beginning, which course should I start with?

The course seems to reset your PWD and then asks to go to a directory using a wrong starting point and then you are stuck until you navigate to a place from where the specific cd …/…/[directory] works and then you are good to go. This behavior could be very confusing for new people to the command line.
A review might be a good idea.

Actually it doesn’t work out at all for me.

For some reason the system does not recognize that I am already in the comedy directory. What’s happening?
image3840×2160 812 KB

Another broken module from the Command Line course, you have to give incorrect answers for the module to proceed. Please review!

image870×543 28.4 KB
I can’t seem to move past this screen for some reason, any ideas?

I have the same problem;
image1563×740 46.3 KB

You may have figured this out or just moved on by now, but I got stuck in the same place and was able to progress by going two folders deep and then moving back up to the Comedy folder using the command they give you.

I’m following the progression on lesson 6 (cp II). I have listed the files in the  “scifi” directory and input the command to list the txt files starting with “m”. According to the instructions, it should list:
matrix.txt ,  matrix-reloaded.txt , and  matrix-revolutions.txt .
Instead, it has listed:Screen Shot 2020-07-09 at 9.12.44 AM1251×499 66 KB
and it has passed me, I’m not under the impression this is correct, should I report it?

I’m not sure but I think terminator.txt may have been in the scifi directory already. The wording,making it sound like you should ONLY see the matrix files, is weird, but I believe this is working as intended.

This problem of resetting the current working dir is confusing a lot of people and need to be fixed… THAT’S A PRO COURSE ! make it worth it !
"
29,FAQ: Redirection - <,"Get Help,Git",,4,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “<” exercise from the lesson “Redirection”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Web Development
Learn the Command Line
FAQs on the exercise <


The example given for the use of input redirection here: cat < lakes.txt doesn’t seem particularly helpful since is does the same thing as cat lakes.txt. Please share a case where the use of input redirection, < , makes an important contribution.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
I’m still not completely clear on ‘<’. How is:
cat < rivers.txt
different to simply cat rivers.txt?

would also like to know this. i imagine that the question is answered somewhere down the line, but it would be helpful to specify the difference between the two commands when the second one is introduced.

@daveclayt @pyslayer64035
Guys, you can find an answer to your question here: What is a good use of input redirection “<”?
I’m putting it here, in case someone have the same question.
"
30,FAQ: Redirection - <,"Get Help,Git",,4,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “<” exercise from the lesson “Redirection”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Web Development
Learn the Command Line
FAQs on the exercise <


The example given for the use of input redirection here: cat < lakes.txt doesn’t seem particularly helpful since is does the same thing as cat lakes.txt. Please share a case where the use of input redirection, < , makes an important contribution.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
I’m still not completely clear on ‘<’. How is:
cat < rivers.txt
different to simply cat rivers.txt?

would also like to know this. i imagine that the question is answered somewhere down the line, but it would be helpful to specify the difference between the two commands when the second one is introduced.

@daveclayt @pyslayer64035
Guys, you can find an answer to your question here: What is a good use of input redirection “<”?
I’m putting it here, in case someone have the same question.
"
31,What does the 'source' command do?,"Get Help,Git",,2,"
Question
What does the source command do?
Answer
Source evaluates any file written after, the file if containing any commands to run, it will execute them in the order they were written in the file. for example if our file had:
echo 'This is the first one'
echo 'second'
echo 'and third'

when running: source <ourFilename> or . <ourFilename> (because . is the shorthand for the source command) we will see:
This is the first one
second
and third

of course, it does not only work with the echo command, but with any kind.
Something to keep in mind  is that source's . version is not the same as ./, dot  space and file name is the source command running the commands in the written file, but with ./ dot is simply a mark of origin, stating that the origin from which the path will be read is the current directory. Like: ./someDir/somefile means that someDir/ is in the same location that we presently are.
","
source command runs the script in the current shell only. If you do not use source, then it spawns a shell as a child process and executes commands in that.
For example-
If you want to set a proxy environment variable in terminal and you have written the command for that in a script named “export_connect.sh”
Now, if you use-
source export_connect.sh or . export_connect.sh - then the environment variable of the current shell will be set
If you use ./export_connect.sh , then the environment variable will not be set in your current terminal, as it opens a new shell and sets the environment variable in it and then closes it.
"
32,What should I learn after this basic command line introduction?,"Get Help,Git",,3,"
Question
Now that I know the basics of navigating, what should I learn next to continue growing familiar with the command line?
Answer
If you’re a Pro member, you’ve got access to the upcoming projects and quiz that will help reinforce the basics you just learned. If not, there are still three more lessons coming up on command line usage!
If you want personal practice, try doing stuff on your own computer with what you just learned.
If you’re on a Mac, you can use the built in Terminal program to do all this.
If you’re on a Windows computer, check out this guide to set up Git Bash. Don’t worry about understanding Git if you don’t, this tool allows you to use all the commands you’ve just learned.
Try navigating around, creating folders and files, and finding your way back to where you started.
And try seeing how you can use the path to a directory to more quickly create files and directories!
","
Are there any lessons on awk?
I just went through the whole command line intro hoping there would be some awk stuff but there’s nothing on it. When are the other 3 lessons coming out?

The lesson was very Informative and Awsomeee
"
33,FAQ: Learn Bash Scripting - Variables,"Get Help,Git",,8,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Variables” exercise from the lesson “Learn Bash Scripting”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Web Development
Learn the Command Line
FAQs on the exercise Variables


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
I really struggled to understand what I was meant to typing where with the two boxes open.
Even following the hints the green ticks didn’t come up.

…because you have to press run in the script first…couldn’t see that instruction any where…

Agree, not user friendly at all

What does “#!/bin/bash” mean or do in the script.sh?

the #/bin/bash command tells the computer which interpreter to use when reading the script.

Thank you! Could not get the “Hello Codecademy” to go away  even though I had all green check marks and had edited the text correctly.

What’s also not clear is how to run the file and what output you should expect. When I use ‘chmod +x ./script.sh’ nothing happens. When I use source ./script.sh it outputs the string to the terminal
"
34,FAQ: Navigation - cd II,"Get Help,Git",,2,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “cd II” exercise from the lesson “Navigation”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Web Development Computer Science
Learn the Command Line
FAQs on the exercise cd II


Do I have to type the full name of a directory to navigate to it?

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
How do I get to /home/ccuser/workspace/blog/2015/jan  from   /home/ccuser/workspace  ?
"
35,What are useful arguments that we can pass to `grep`?,"Get Help,Git",,4,"
Question
In the second lesson on the grep command we find explanations of the arguments -R, for recursive searches, and -l, for outputting matching files only. What are other useful arguments for us to pass to grep?
Answer
A complete list of arguments to grep can be found in the so called man (short for manual) page for the function. This entry can be found by searching something along the lines of “grep man page”. For now I will provide three commands that come in handy often.


-e. Since grep stands for global regular expressions, there should be some way to search with regular expressions instead of simply searching for exact string matches as we have been doing. -e enables us to do just that.

-v. This useful argument allows you to search for non-matches. So it is the inverse of the usual behavior of grep.

-i. This argument allows you to search for a match in a case-insensitive way. So for example, “hit”, “HIT”, and “HiT” all match a search for “hit”.

","
I don’t get the difference between -e and -i. Could somebody show me the examples of using -e?

Well, this answer is wrong about what -e does, it’s a regexp pattern either way. (@zjedwin)
$ echo asdf | grep 'a.df'
asdf

-e is just to escape the pattern in case it starts with - so that the pattern isn’t interpreted as another flag. For a a lot of purposes -e therefore does nothing.
A more useful flag would be -P which interprets the pattern as a perl regexp instead (more powerful)
Or -F which matches an exact string (turns off regex)
If not restricted to grep then you might want to use something like rg or ag which are a bit more clever about doing “the right thing” and are therefore nicer for interactive use.

Is there any reason why the recursive argument -R is capitalized here? In the manipulation lesson it was introduced in lower case -r.
"
36,FAQ: Environment - Bash Profile,"Get Help,Git",,11,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Bash Profile” exercise from the lesson “Environment”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Web Development
Learn the Command Line
FAQs on the exercise Bash Profile


Is it wise to edit or write in the bash profile?

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
I can’t seem to move forward from the alias pd=“pwd” can someone assist me with this command?

I had trouble also, but I was putting spaces on either side of the  = sign.  Once I took those out it worked.

Thank you, that solved my problem.
[no offers of a solution and no way to move on!!]

I am going in a loop around writing the alias pd for pwd. I am, I think following directions and the given solution perfectly, including above mentioned spacing but still get stuck here. resetting work are doesn’t seem to help.
Any suggestions??? stubbornness in multiple attempts is not helping:sweat_smile:
When I reset the lesson, the cursor is above the greeting. How do I move it to below the greeting? Trying to work above definitely does not work.
Thanks:

Cursor…? If you’re talking about the text editor Nano, then I imagine arrow keys let you move the cursor (a bit crude perhaps, but for a small edit it hardly matters)
No clue what is wrong for you, but I suggest running the alias command directly in the shell before you put it in the file, until you’ve got the right command.
For example:
$ alias 'derp=echo hello world'
$ derp
hello world

clearly that worked, now I can add the command to my profile file, and then I can reload bash (both to clear the alias that was just created, and to run the profile file again)

Thank you. I did figure out the arrows would move the cursor
I will try testing aliases before I exit
I was sent to take the command line course about 25% way thru Python course.The teaching environment is very different Rather than giving helpful hints like you did above, it just ticks off the lesson boxes so I can go to the next section , so I never see how the code should be written properly, so thank you, i needed the visual to see proper code as a learning tool

Do any experienced developers have any thoughts on creating aliases for commands?
I can see the use in creating aliases for commands in order to make them more memorable for you, however, I think this could be counterproductive particularly for new developers. If you get used to your own aliases, you’re liable to forget the actual standard commands that are used by everyone else. So just wondering where most developers stand on that use of aliases.

alias pd=“pwd”
I type the above and followed the instructions but nothing happens. I cannot move forward

Hey, I’m having the same issue  atm, let me know if you have any solution, I will do the same 

Okay found my mistake, so I typed the source ~/.bash_profile line inside the dir. Make sure there are only the echo “Hello World” and the pd=“pwd” in the bash_profile, save it with ctr+o and exit with ctr +x and type source ~/.bash_profile in the command line and clear it and the box will tick! 
"
37,FAQ: Manipulation - Generalizations,"Get Help,Git",,1,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Generalizations” exercise from the lesson “Manipulation”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Web Development
Learn the Command Line
FAQs on the exercise Generalizations


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
",
38,FAQ: Manipulation - rm,"Get Help,Git",,5,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “rm” exercise from the lesson “Manipulation”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Web Development
Learn the Command Line
FAQs on the exercise rm


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
Where can I find a complete list of Bash/Shell commands and their parameters?

What happens in the “ls” if I don’t use ""-r""
The following code deletes a folder named slapstick and its child directories
The “ls” will contain all of slapstick child folder?
rm -r slapstick


I wondered the same so I made a new folder “test” with makedir and put another folder in there containing a text file. Then I used “rm” without “-r” on “test” and it didn’t work, it gave me an error message: “cannot remove ‘test’: Is a directory”
TL;DR: using “rm” without the “-r” doesn’t work for folders, apparently

If you only want to delete empty directories  rmdir is a useful to command to know as it will not delete directories with files inside.
"
39,FAQ: Environment - Environment Variables,"Get Help,Git",,6,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Environment Variables” exercise from the lesson “Environment”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Web Development
Learn the Command Line
FAQs on the exercise Environment Variables


Is it just a convention or all environment variables have to be uppercase?

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
Anyone know how to use the ctrl key on iPad Pro Smart Keyboard? Can’t save or exit out of nano without it.

it says the last thing to type is
ls -alt

and notice the change in the prompt. But i cant tell the difference? What am i supposed to be looking our for?

In the Lingua Franca exercise, the “LESS” env variable was automatically done when we ran the less command on a file. Are env variables always automatically applied to our commands?

The prompt is the console signalling you to give it some much wanted orders.
In the standard case that’s the “$”-sign at the beginning of a line telling you that the console awaits you to do something.
In this exercise you modified that to be "">> "", which should show at the beginning of the line.

Not trying to smart-■■■, but isn’t this:
“Here, the command echo $USER returns the name set for the variable.” (Last line before the instructions)
wrong?
Shouldn’t it rather say “Here, the command ‘echo $USER’ returns the value stored in the variable.”?
I’m no native speaker, but this would seem to be the less misleading choice in wording, doesn’t it?
"
40,FAQ: Navigation - Filesystem,"Get Help,Git",,3,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Filesystem” exercise from the lesson “Navigation”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Web Development Computer Science
Learn the Command Line
FAQs on the exercise Filesystem


What does ‘pwd’ mean and why is it useful?

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
I notice that the names of the files/folders shown in the tree structure do not have slashes after them.  The names used in the “Learn” column have slashes:  blog/, 2014/, 2015/.  What do these slashes mean?  Are they optional?

You write the slash when you are writing a path of folders.  For example:
home -> ccuser -> workspace -> blog is written /home/ccuser/workspace/blog
The path to the file hardware.txt is /home/ccuser/workspace/blog/hardware.txt
"
41,What do I do if I can't navigate to a certain directory?,"Get Help,Git",,10,"
Question
I’m supposed to navigate to the /home/ccuser/workspace/blog/2015 directory so I can continue with this exercise, but I navigated somewhere I didn’t mean to. How can I find my bearings and get to where I need to be?
Answer
Always be sure to keep in mind two things when navigating the command line:

Your current location (pwd)
Available directories to cd into (pwd)

This should keep you on track, and is generally just good practice.
But! If you are already ‘lost,’ there’s still hope. In this case, we have a file tree structure handy, which shows you the entire directory structure and should help you find your way around.
Just keep in mind: Using cd .. goes up one level, so if you’re already inside of the ‘jan’ directory, for example, and go up one level, you will then be in the ‘2015’ directory, and will have access to ‘jan’, ‘feb’, and ‘motherboard.txt.’
","
Why do I keep getting this error message whenever I try this command?
$ cd 2015
bash: cd: 2015: No such file or directory

it means no directory named 2015 exists within the current working directory.
you can use pwd to verify what your current working directory is, and ls to see the files and directories within the current working directory

It means you are in the wrong directory. Imagine you are in a room, and there are 3 doors available. You want to go through the door that is called 2015. But you entered the wrong room, so you can’t go through that door as none of those doors have the name (that door doesn’t exist there).
You have to retrace your steps in the house, for example, by typing  ‘cd …’ repeatedly, until you come into the hallway that will lead you towards the right room. By using pwd you can see where you are, and by using the file structure, you can see where you have to go. Then you cd ‘‘directory’’ until you come to the right room that has the door called 2015.

Thank you. This analogy really helped me out, I was stuck for bit in Xubuntu command terminal.


Available directories to cd into (pwd)

Is this a typing error? The tutorial says it should be ls?

I am having some issues with commands like cd… They dont seem to work. Am I doing smth wrong ?

What specifically are you doing with cd? What sort of error messages (if any) or issues are you having?

You’re not wrong in the sens that ls would allow you to see all the files within a specific directory to cd into, but I think @contentmazzone was referring that cd only works when you know where you’re already located with pwd.
I hope I’m making sense and @contentmazzone, please correct me if I’m wrong.!

To go to 2015 if you don’t know where in the tree you are, you can type the full path.
$ cd /home/ccuser/workspace/blog/2015
"
42,FAQ: Redirection - |,"Get Help,Git",,3,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “|” exercise from the lesson “Redirection”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Web Development
Learn the Command Line
FAQs on the exercise |


Pipeline “|” versus output redirection “>”

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
I’m confused about this line.
cat volcanoes.txt | wc | cat > islands.txt 

Can you tell me, in words, what each pipeline and redirect is doing here?
I think I know what the first pipeline does, but I’m confused about the rest of them.

I’m confused too… any help?
"
43,FAQ: Manipulation - mv,"Get Help,Git",,5,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “mv” exercise from the lesson “Manipulation”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Web Development
Learn the Command Line
FAQs on the exercise mv


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
""To rename a file, use  mv  with the old file as the first argument and the new file as the second argument. By moving  batman.txt  into  spiderman.txt , we rename the file as  spiderman.txt ""
please explain more specific, when move a txt(1) to other txt(2), it mean we move the content? and then the txt(1) will be deleted?
rename? it become 2 similar txt or one’ll be deleted?

Yeah this seems weird - it doesn’t seem like a rename, but a delete and replace?

The code is not working. Could someone tell me what’s going on? I have even refreshed the page!
image3840×2160 763 KB

I have the same problem! Do u know how to solve this already?
"
44,FAQ: Manipulation - Wildcards,"Get Help,Git",,13,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Wildcards” exercise from the lesson “Manipulation”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Web Development
Learn the Command Line
FAQs on the exercise Wildcards


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
I am stuck on number 3: Navigate to the  superhero/  directory.
List all files and directories in the working directory. You should see  superman.txt  in it.
I typed in superhero/, but the reply is : bash: superhero/:  No such file or directory
What am I doing wrong?

To navigate to the superhero directory you enter the command: cd superhero
cd means change directory. Then you’ll enter ls to list all the files and directories.

Thanks for your help

why spiderman isn’t appeared in step 3
when i type ls only batman.txt superman.txt appeard only where is spiderman.txt?

I think it’s important to note that in Step 7:
mv batman.txt spiderman.txt
The contents of  batman.txt are overwriting the file contents of spiderman.txt .
batman.txt will essentially be deleted after this command.

mv batman.txt spiderman.txt
8.List all files and directories in the working directory. You should see the file  batman.txt  has been renamed as  spiderman.txt .
i’m confused, so the mv command renamed the file to spiderman.txt?

Hey i cant find the action directory ??
Am i dumb or what XD

i am stuck on step 5 Then type
mv wonderwoman.txt batman.txt superhero/
need help

https://www.codecademy.com/courses/learn-the-command-line/lessons/command-line-manipulation/exercises/wildcards
I’m stuck on step 5 too and now I can’t go forward or back, no commands I try work

https://www.codecademy.com/courses/learn-the-command-line/lessons/command-line-manipulation/exercises/wildcards
I’m stuck on step 6.  i did step five and now I can’t get out of the movies directory.

Hello @progresspanda!
Could you explain in more detail what issue you are having?
I’ve also attached the tree structure used for this lesson below. Hope it helps!
1280×768 15.6 KB

Thanks very much anyway, but I found a way to finish the lesson (after a long fight with it).  I recommend someone review the instructions, because I’m sure I followed all of them the  the first time and it turned into a mess.
"
45,FAQ: Environment - nano,"Get Help,Git",,23,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “nano” exercise from the lesson “Environment”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Web Development
Learn the Command Line
FAQs on the exercise nano


 What does the  source  command do?

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
I seem to be following the instructions and am not getting an error message but my little green box doesn’t get ticked…? please help

There are three checkmarks in that exercise. Which one are you referring to?
The last one is to run a command which causes something to happen, did it?
Since most of it is about editing a file, what is the content of that file if you read it again from the file system?

When working on the exercise, I follow the directions and type:
alias pd=“pwd” CtrlO
file1 CtrlX
clear
but it wont check off the green box. What am I doing wrong? Nothing in the nano exercise seems to work.

Same for me. I followed the instructions,  but it won’t check off the green box either! A bit frustrated here and not sure what I’m doing wrong.

yep! I’m in the same boat with all of you. I’m following the exercises and the little check  boxes are not turning green.

close the tab and reopen. It helped me

Am I the only one thinking that the whole “Command Line course” is a big mess?

I am on the nano module of the Command Line course and it seems to be stuck. The box for number 2 (~/ .bash_profile) will not check. I’ve done the requested step several times. I do not get an error message, but the box won’t check for me to move on. I even closed out my browser and started fresh, but the box won’t check. Help.

I am having the same issue. I already reported it as a bug to Code Academy several days ago and have had no reply. This is really poor since I paid for the Pro version specifically in order to complete this course.
I have tried closing the tab and re-opening and it made no difference.

I am following the instructions but the check box does not turn green once I complete the exercise, so it won’t let me progress on to the next question.
I have tried closing and re-opening the tab as suggested in some people’s answers, but that makes no difference.

What is the bash_profile?

Annoyingly, my firefox browser recognises CTRL + O command as ‘open file’ and every time I press it it opens the window for opening a file 
Is there any way to get around this issue?

i tried this too on command line course, right during the nano course

i am having the same exact issue at the same exact point on my courseScreenshot 2020-07-17 13.51.121920×1080 141 KB

tried everything still doesnt work ,

Hello @creed254 and welcome to the Codecademy Forums!
Could you elaborate a bit more on the issue you are having? I completed the course and this lesson worked fine for me.
Also, did you enter clear after editing the bash_profile ?

no, I’m not happy either.

Help help; I did something wrong at the start of the Environment lesson and I can’t get nano to reset.  I enter clear and nothing happens.

Hello @progresspanda!
clear does not reset the terminal, it simply provides you with a blank terminal screen. Could you elaborate more on what issue you are having? What have you entered into the command line? And what step are you stuck on?
"
46,FAQ: Navigation - Your First Command,"Get Help,Git",,10,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Your First Command” exercise from the lesson “Navigation”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Web Development Computer Science
Learn the Command Line
FAQs on the exercise Your First Command


‘ls’ Command Not Working On Windows?

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
Hi you say this is only for unix or Mac based systems but what about the rest of us - how can I carry on the coarse if I have a Windows system? Please don’t abandon me now pleaseeeeeee   thanks Lisa

Eh. It’s not really for an os as such, rather for a collection of programs one would expect to find on a unix-like system.
windows is more of a point-and-click thing, aside from microsoft products you just… wouldn’t
If you’re using windows 10 then you’d be able to use wsl, otherwise you can use msys2, they both provide a unix-like environment.

Thanks for your response. I was tired and had a stupid moment, sorry and thanks

قناة_شليلة
ولم جزيل الشكر
ihdadi

Thank you for this first lesson 

Unfortunately as a newbie, I don’t understand @ionatan 's explanation. Also confused why they would suddenly introduce a course that only Mac and Linux users can make use of. Should I skip this section if I don’t have a Mac?
What is wsl? What is msys2?

Agreed. Most learners will be Windows users, so unless I’ve missed something critical, one would think we would have the option to learn to use PowerShell and Windows Command Prompt.

Did this get resolved? Should I skip this section (using windows10).

i am still confused but gonna take course… i think i wont be useless
"
47,FAQ: Manipulation - ls -alt,"Get Help,Git",,22,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “ls -alt” exercise from the lesson “Manipulation”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Web Development
Learn the Command Line
FAQs on the exercise ls -alt


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
Why am I not getting a time of day when using ls -l or ls -alt in Manipulation Lesson 3 and 4?

I meant ls -t, not ls -l.

I think I figure it out.  The time only shows if the last change was in the present calendar year.  otherwise the year of the change is shown.

On lesson 4/10 I can’t seem to progress past .1 even though I am in the drama/biopic directory. Anyone able to advise? Is it a bug or am I missing something obvious?

you need to run:
cd ../drama/biopic/    

from the right directory, any attempt to run anything else will not complete the exercise.




 wiki-bot:

motivation to keep learning? Join


Thank you, I must have been trying from another directory. Working now.

Sorry, what means “total 20” that appears in my working space after ls -alt command used for “comedy” directory? By the way, does it matter that the listed files in this directory in my working space and in the topic description have slightly different order? Because of time they were edited?

I’ve got about “total”, sorry!

I seem to have navigated away from the right directory so I can’t continue the lesson! - what is the name of the directory I should be in so I can navigate my way back please?
…
Ah. I think I’ve figure it out - or solved it!

Just type cd …/drama/biopic/   starting the exercice… then you can see the checkbox which means you did it!!!  This is wrong. When you type …/   you are going up a level, and of course you can see: No such file or directory. Then you have to type: cd /drama/biopic/ .  then : write ls  and that it’s.

This lesson is really badly formulated. spent 10-15 mins figuring out that I had to come from the comedy directory. to anyone else having trouble completing this step: You have to navigate to the biopic folder directly from the comedy folder. pwd to make sure you’re in the comedy folder, then cd …/drama/biopic

In lesson 4, after I typed ""cd …/drama/biopic/    ""
It returns “no such file or dictionary”
What should I do? so confused

Seems you are not in the right directory to execute this command? Start with:
pwd

to see your current working directory

Thanks! I hope you include the use of “pwd” in the course.

Sometimes this course will use questions like this one:

Navigate to the  drama/biopic/  directory.
cd …/drama/biopic/
List all files and directories in the working directory.

as a single task. After returning the cd …/drama/biopic/ line, the question will show an X instead of a checkmark, plus some delay.
Is there a way to run cd and ls in a single command without scripting out a function or something?
Thanks!

Doesn’t work out for me either. Quite annoying.

ok I’m in the comedy directory and it says go to drama-biopic.  I type it in EXACTLY as shown.   I followed the directions to the letter.   Three https://www.codecademy.com/courses/learn-the-command-line/lessons/command-line-manipulation/exercises/ls-alttimes.  No such directory.

Three times, that is

Yea this course is really messed up.  I gave up on 4/10 and then had the same problem with 5/10.
"
48,FAQ: Manipulation - cp I,"Get Help,Git",,18,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “cp I” exercise from the lesson “Manipulation”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Web Development
Learn the Command Line
FAQs on the exercise cp I


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
I am trying to go to the drama directory (cd …/drama/) but it doesn’t exist. When I list the directories it replies that only biopic and historical are in there, but hey, cd …/biopic/ evidentially doesn’t exist even though it just told me it did. Are my commands wrong? cd …drama/ and cd …historical/ cd …biopic/ ?




 vikingchief1172:

When I list the directories it replies that only biopic and historical are in there


If it says only biopic and historical are in there, it means you are already inside drama based on the files tree:

image.png678×570 51.2 KB

If you want to go back one level and then enter to drama, this is the correct command to do it:
cd ../drama and not cd …drama/
I hope this helps.

How can I navigate one directory form drama/historical/ to drama with cp

So I copied cleopatra.txt to the historical/ directory. But when I then navigate to the historical directory and list all the files, it won’t recognize that the step is complete. Suggestions?

Hi, I have the same issue!

Hi Codeacademy,
I am facing the same issue.
I copied cleopatra.txt to the historical/ directory. But when I then navigate to the historical directory and list all the files, it won’t recognize that the step is complete.

The same things happens to me, however i could “pass” with the following steps.
1.-  Click on the button “Get Help”
2.-  Solutions/Get code Solutions
3.- Click on ""Give me the solutions to this exercise
i hope this help you!
Regards!

I too facing the same problem.Why those commands are not accessible?

Is there a way to reset this section?

Having the same issue now! And trying to get the solutions to the exercise doesn’t help!

If that’s the list its giving you then you are already in the correct directory. Don’t forget your pwd command to check your current working directory.

Hi, i’m stuck here to, i tried to do the slsvm’s solution but i have a small red button on the top right telling me “could not restore workspace” somebody already have that problem? It will help me a lot cause i’m stuck here for to long …

Hi I’m having the same issue too.

Hi – in the cp I exercise: Is step 4 necessary (cd up the file tree) to use the cp command in step 5?

Hello,
I did this on my own computer, cp filename1.txt filename2.txt and it worked great (unfortunately…). The data on file 1 got copied to file 2 and overwrote everything on file 2.  I’m afraid I just deleted very important data. I have searched for the original file 2 but cant find it  I tried to restore to previous version but it wants me to tell where I have the backup which I obviously dont have (but undoubtedly would have had if I knew that this command would not just copy from A to B and keep what was already there, but actually overwrite B). I hope there is some way I can revert this. Can somebody please help me or am I screwed?
My first post here! A pleasure.
Code Wide

 ls
action  comedy  drama  genres.txt
 cd drama
 ls
biopic  historical
 ls
biopic  historical
$
https://www.codecademy.com/courses/learn-the-command-line/lessons/command-line-manipulation/exercises/cp-i
From what I can  see from the instructions, entering ls was right.  but it doesn’t work

the first part of the lesson is completely wrong pls review
"
49,FAQ: Redirection - grep I,"Get Help,Git",,14,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “grep I” exercise from the lesson “Redirection”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Web Development
Learn the Command Line
FAQs on the exercise grep I


We learn that grep stands for “global regular expression print”. What is a regular expression ?

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
I’m unsure why I am failing this?


OK, I added the file to the direction and still no luck?

Why does the “Learn The Command Line” exercises not have a way to escape the exercises with the Get Solution can do for you when things bug out?

81d518e6ba060ae9bdca54ecb4986752e05514e9.png1366×768 79.6 KB

Ok, found the get solution part to bypass this.  Disregard.

Hi Bro!
I had the same problem…  try to write “Ar-C-tic”
grep -R Arctic /home/ccuser/workspace/geography


bug.JPG1661×701 82.9 KB

I type this verbatim but it still doesn’t work, I think this could be bugged.

I believe there is still a bug as I have the same problem and I have reviewed it many times and I cannot see where is the issue. Could you pls help?

image.png1407×818 35.9 KB


Note that I have typed the command as instructed but still the Codecademy marks it as an error with the message “Type the command after the shell prompt”

Hey, @net7386409558. You are close, but you do have a typo in your command. Look closely at how you spelled Arctic.

Hello, @ultrasonoro! Look closely at how you spelled Arctic.

I was getting the same problem for a while until I realized that it isn’t R1 (R-one), but it is Rl (R-L). Hopefully that’ll help.

I did a copy/paste of the code in #1 and discovered there was an extra space at the end of the command.  Pasted that into bash, hit enter and bam!  four lines of text came out.

I have also been having problems with this page.

Screen Shot 2020-05-09 at 3.46.20 PM2386×830 121 KB

I have typed in the prompt and copied and pasted the prompt. I still get the “Type the command after the shell prompt.” Error.

it should be arctic … you have typed artic
"
50,FAQ: Manipulation - ls -l,"Get Help,Git",,26,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “ls -l” exercise from the lesson “Manipulation”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Web Development
Learn the Command Line
FAQs on the exercise ls -l


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
I am failing to get the green check mark to continue to step 2.  When asked to navigate to the comedy/ directory, I’m entering cd /home/ccuser/workspace/movies/comedy
I think this is correct, but not getting the green check mark.




 gallupue:

I think this is correct, but not getting the green check mark.


the exercise won’t approve of using absolute path, you will have to use the relative path from the right working directory

*** UPDATE *** I have since worked this out, I understand what stetim94 is referring too now they command required is simply ‘cd comedy’ as this moves from movies to comedy ‘relatively’  rather than completely changing file destination ( albeit that’s my understanding, hope this helps someone else )
I am having the same problem, i have tried several methods of cd,
i have tried also cd ./comedy
and when checking i am in the correct folder using pwd i am there but the task will not provide me with the green tick to move on

cd comedy actually just worked for me.

I’ve had the same problem. Wrote cd ./comedy/ and didn’t get the green tick. However, tried as you suggested cd comedy only, and the problem was solved. Thank you!

I’m having an issue with the same thing. I tried all possible ways 10 times each and nothing works…

Hello CC Moderator,
Can you please explain what “Hard Links” number actually includes per reading in this Lesson?
Lesson says the following:
Number of hard links. This number counts the number of child directories and files. This number includes the parent directory link ( .. ) and current directory link ( . ).
However, if we follow what the actual filesystem tree contains, it will be different from what terminal produces: (this picture was presented in the beginning of the lesson - 
Filesystem visual 3.png1280×768 15.6 KB


per filesystem tree, while in movies directory:

action should contain total of 4 child items, which coincides with terminal: scifi, superhero, superman.txt, wonderwoman.txt;

comedy should contain 2 child items, slapstick, satire, but terminal says that is has 4;
similarly, drama  should contain 2 child items, biopic, historical, but terminal says 4 again:



I have found similar inconsistencies between numbers-logic when going into child directories and printing ls -l command.
Thank you for your time and clarification!




 zachg131:


per filesystem tree, while in movies directory:

action should contain total of 4 child items, which coincides with terminal: scifi , superhero , superman.txt , wonderwoman.txt ;

comedy should contain 2 child items, slapstick , satire , but terminal says that is has 4 ;
similarly, drama should contain 2 child items, biopic , historical , but terminal says 4 again:



Directories can never be hard links, and none of the other files you mentioned are hard links, they are just files
understanding what hard links are is quite useful:
https://medium.com/@wendymayorgasegura/what-is-the-difference-between-a-hard-link-and-a-symbolic-link-8c0493041b62
anyway, in action directory are two hard links: current directory (.) and parent directory (..), then scifi and superhero each also have a hard link to parent directory (..), this way, you have 4

Hey, everyone has probably figured this out by now, but I’m putting it here for any future forum visitors as well.
@lukecook3081430052, @pinboynyc, and @devasconcelos, and @saharab:
I was having the same problem, and thought I had a workaround that somebody else had “discovered”. But it was wrong.  Fortunately, @midlindner had the right answer.



FAQ: Manipulation - cp II


The most likely cause for all of these issues is that the console remembers where you are in the directory from the previous exercise. For users like myself who like to go further than the lessons direct, and play around to experiment, we end up in a directory other than where the 1st instruction thinks we are. When we type: cd ../../comedy the directory may not exist where we end up after backing up 2 steps in the directory depending on where we started. The simplest fix is to start the exercise from where the previous lesson left off by navigating to the /home/ccuser/workspace/movies/drama/historical directory. Then type: cd ../../comedy to pass the step. It would be nice if they could modify the lessons to just recognize that you are in the correct directory, but this step seems to require the specific command in the instructions.


Yes, if you do this to get back to the right place, Codecademy will tell you that you got the first step wrong. All you have to do to fix that is then follow all the exercise instructions.
Also, you gotta make sure you’ve got both those fullstops in there before the slash. I noticed a couple of people not doing that. That might also cause a problem.
LMK if that helps!

I’ve checked some online resources saying that hard links can only be created on files, not on directories. Yet, in the content about ls -l, it says the number in the second column refers to the number of hard links to files and directories.
The two explanations seem in conflict, and I’d like to know if I have any misunderstanding.

Both are true, as user you can’t create hard links for directories. However, the exception is current directory (.) and parent directory (..) which are created by the operating system. They are an exception to the rule so to speak

Please describe what is “hard link”? Means we must have also “soft” ones or others? I could find the answer in the internet, but I prefer to have the description from codecademy, it’s better. Thank you for your efforts!

As usual codecademy does a piss poor job of explaining how to do something.  “Navigate to the  comedy/  directory.”  How do I navigate?  I’m taking a command line course because I don’t know how to navigate.  If I knew how to navigate, then I wouldn’t be taking this course.  How do I do this?
Thanks,
Ken

the course is divided in syllabuses, the first one being navigation:
https://www.codecademy.com/courses/learn-the-command-line/lessons/navigation/exercises/your-first-command?action=resume_content_item
which you can use to check if you forgot how to navigate, or consult documentation.

Thanks for your reply.  That was helpful.

The most useful for me was the phrase: “A directory contains an entry for itself, its parent, and each of its children.” And the word “itself”.

hello, this content hasn’t been explained yet:
"" Number of hard links. This number counts the number of child directories and files. This number includes the parent directory link ( .. ) and current directory link ( . ).""
what is hard links. and didn’t have defination for ‘…’ and ‘.’ .
Since the file Tree is not match with the lesson content so it’s hard to understand.
(Edit: there are Q&A previous, consider to put this on lessons plz, thanks)

Hi, I’d like to know more about access rights. Are these codes that have certain actions attached to them?

These codes? What codes? You mean the different permissions (read, write and execute) for the user, group and others?
"
51,What is the purpose of the command prompt PS1?,"Get Help,Git",,5,"
Question
What is the purpose of the command prompt PS1?
Answer
The command prompt (PS1) often plays the role of guide, as a default on a terminal window, we can commonly see that it is composed of usually three pieces of information, 1. the user, 2. the machine (computer name), and 3. the name of the current directory, all within brackets and followed by an iconic $ that lets us know that there is where we can start typing on the command line, for example, if I were to be the user, my computer’s name were to be sparky, and the currently directory were to be called bash_exercise, my prompt would look like so:
[AxelKaban@sparky bash_exercise]$

some prompts provide more or less information. In the case of the Codecademy prompt, it usually is simply $ which denotes that there is a normal user working, which again is a basic setting.
Using nano to open our .bash_profile we could adjust what we want to see on our PS1, maybe our interest is mainly aesthetic, and thus we could make it pretty with our name, the machine’s name, a heartfelt or positive quote, and even emojis, because its main purpose is to guide us and provide valuable information, so why not update it with a series of uplifting emojis! Or the birthdate of that special someone we keep on forgetting about.
","
Since the export PS1="">> "" only changes the shell prompt from $ to >>. So can I make that change for all terminal sessions whenever I open any terminal session(e.g Permanent changes)? And yes how I can give emojis to it ?

I can’t seem to find the like button on a number of your posts. I want to like them but I can’t find like.
Is there a maximum to the number of likes one can get on CC?

So this is more like you will customize your GUI and desktop wallpaper and so on, right?
Is PS1 an acronym? What does it stand for?

PS stand for prompt string i guess. There are various PS like PS1, PS2 etc. Here, PS1 means primary prompt string while PS2 mean secondary prompt string  and so on. And yeah emojee can also be used as primary shell prompt. I guess this link would be useful regarding changing PS1
https://www.cyberciti.biz/tips/howto-linux-unix-bash-shell-setup-prompt.html#:~:text=Prompt%20is%20control%20via%20a,as%20the%20primary%20prompt%20string.
"
52,FAQ: Learn Bash Scripting - Introduction to Bash Scripting,"Get Help,Git",,30,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Introduction to Bash Scripting” exercise from the lesson “Learn Bash Scripting”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Web Development
Learn the Command Line
FAQs on the exercise Introduction to Bash Scripting


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
Step 3. requires us to use ./script.sh to run the script in the terminal.
I think I missed a crucial piece of information because I don’t remember that command being taught before.
I actually had to look at the hint to figure out what I was expected to do.
In my opinion, looking at the hints should be a last resource sort of thing, not the go-to place to receive the information that’s needed in order to complete a lesson.  What am I missing here? I even checked very own list of commands and couldn’t find it there. 




 leanbb:

that command


You just wrote that command, it is the path of your file, there’s nothing else going on there, not a single character

I am sorry, could you elaborate a little bit? I’m completely new to everything related to programming and just started with Codecademy about 9 days ago. Is ./script.sh not a command? Am I not commanding the CLI to run a script? Does writing the path of a file automatically run it in Bash?




 leanbb:

Does writing the path of a file automatically run it in Bash?


It’s not automatic if you tell it. But other than that, yes, most commands are files by those names. Regular programs.

This particular lesson was extremely frustrating.
It didn’t explain the differences between the script.sh window or the bash window. There’s an entire section of the lesson explaining a chmod command that doesn’t actually get addressed or explained.
I also don’t understand why you need to type ./script.sh as opposed to just script.sh
What is the difference?

Question regarding that exercise:
Is it the same when I:
1: add  -echo “Hello”- in the bash_profile
and
2: write a script like “./script.sh” with the -echo “Hello”- and run it on the terminal
?

I’m a newbie so I might not be completely accurate but I think I have the gist of it.
The script.sh command that you make in this part is saved in the “/home/ccuser/workspace/learn-bash-scripting-introduction” directory and you can see it with “pwd” in the command line tab. If you also use “ls” you can see that the file called “script.sh” is in it, which contains your custom command.
Something that isn’t clear in the course (or I just didn’t notice) is that “./” is your current directory and “…/” is its parent directory (the one it belongs to)
So essentially by writing “./script.sh” you “show” the command line that file and “tell” it to run it.
For the same reason if you left that directory (""/home/ccuser/workspace/learn-bash-scripting-introduction"") you wouldn’t be able to use “./script.sh” and you would have to specify the directory by writing “/home/ccuser/workspace/learn-bash-scripting-introduction/script.sh” or some other variation of that line that “points” to the same file.
As for the other commands that work without writing the full directory (like “pwd” or “ls”) I’m not sure. It might have to do with the fact that they are saved in a directory that belongs to PATH or they might have an alias so you don’t have to write the full directory every time, but I’m certain there are ways to write commands that work like that (just by name)
Hope that helps.

SOS nothing happens on Terminal - what have to be put in Terminal ???

Totally agree - TOTALLY FRUSTRATING

This lesson gives the file name of the file that is opened to load the configuration on two different platforms:
Linux ~/.bashrc
OSX ~/.bash_profile
What about windows running git bash?

Windows doesn’t work with git bash. it has it’s own command line interface. when i started this course there was a video about it but a can""t find it back

When I run ./script.sh nothing happens… shouldn’t the bash terminal out “Hello Codecademy!” because the echo command is in my script? Am I running the script incorrectly?
My Script:
#!/bin/bash
echo “Hello Codecademy!”
My Bash Terminal:
./script.sh

I was having trouble in this step but then figured out that I needed to run the ./script.sh in the bash terminal.  Some lessons do not explain well enough.  It feels like we are missing info.

Can’t go past the #!/bin/bash step. Tells me to type exactly that but won’t respond. Anyone with the same problem?


image775×156 2.74 KB

Is there something wrong here? Or this is the expected output?
There is really nothing in the tutorial mentioning this error and I am following all the steps…

im getting the same error. I think it’s something with the actual bash interpreter? way above my head for a beginner, lol.


askubuntu.com






Not able to execute a .sh file: /bin/bash^M: bad interpreter


command-line, bash, scripts


  asked by
  
  
    user165062
  
  on 08:17PM - 06 Jun 13 UTC







I found out the fix!!
in the script.sh, add this line to the top:
set ff=unix
apparently the text editor is saving it as DOS format, and not unix? No idea why.

Thanks! it works! it’s really strange, the whole Command line section is quite badly-designed and confusing. You need some external information to understand the concept…

You also might need to do this on the next exercise:
Using  sed  Command
Remove the spurious CR characters. You can do it with the following command:
sed -i -e 's/\r$//' NAME-OF-FILE.sh

as when you edit and save it’ll keep saving in extra unwanted characters in the .sh file.
From this page
"
53,FAQ: Learn Bash Scripting - Inputs,"Get Help,Git",,29,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Inputs” exercise from the lesson “Learn Bash Scripting”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Web Development
Learn the Command Line
FAQs on the exercise Inputs


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
How can I try out different ‘greeting_limit’ s?
I totally don’t understand the INPUT lesion. Huhuhu 

This one worked for me

#!/bin/bash
first_greeting=“Nice to meet you!”
later_greeting=“How are you?”
greeting_occasion=0
echo “How many times should I greet?”
read greeting_limit
while [ $greeting_occasion -lt $greeting_limit ]
do
if [ $greeting_occasion -lt 1 ]
then
echo $first_greeting
else
echo later_greeting
  fi
  greeting_occasion=((greeting_occasion + 1))
done


bonjour je n’arrive toujours pas à passer l’étape 2 même en tapant la même chose que toi ?!
#!/bin/bash
first_greeting=“Nice to meet you!”
later_greeting=“How are you?”
greeting_occasion=0
echo “How many times should I greet?”
read greeting_limit
while [$greeting_occasion -lt$greeting_limit]
do
if  [$greeting_occasion -lt1]
then
echo $first_greeting
else
echo later_greeting
fi
greeting_occasion=((greeting_occasion + 1))
done
je ne comprends pas
auriez vous une idée?
s’il vous plait

I found:
When you run command line with ./script.sh, it asks you to put a number which will be read as greeting_limit.
If you put a number in command line, it will work.

This lesson is so badly explained…

The first two paragraphs I understand. The rest… what? what is this saycolors bit? And the last bit? Who writes the names of the colors? How do I ask for the input of the colors? is it also with read? Is it with the variable name? What?

HELP
Let’s ask the user how many times the program should greet them.
Just before the  while  loop, print the following to the terminal: “How many times should I greet?”

Let’s ask the user how many times the program should greet them.
Just before the  while  loop, print the following to the terminal: “How many times should I greet?”

How do I solve this?
Let’s ask the user how many times the program should greet them.
Just before the  while  loop, print the following to the terminal: “How many times should I greet?”

what even is greeting_limit? how does the limit part even work?

Sorry can someone please help, I put my code as below and always get and error:
Use read to get user input and assign it to the variable greeting_limit . Update the while loop stop condition to be $greeting_limit
My code:
#!/bin/bash
first_greeting=“Nice to meet you!”
later_greeting=“How are you?”
greeting_occasion=0
echo “How many times should I greet?”
read greeting_limt
while [$greeting_occasion -lt $greeting_limit]
do
if [$greeting_occasion -lt 1]
then
echo $first_greeting
else
echo later_greeting
fi
greeting_occasion=((greeting_occasion + 1))
done
I am pretty sure my code is ok (as per other examples) but cannot figure it out.

sorry I ran your code and it wont work, I get the same error message:
Use read to get user input and assign it to the variable greeting_limit . Update the while loop stop condition to be $greeting_limit

Can you explain that bit? I don’t get how I can “try out different” limits and where in the command line should I insert it?

Hi All,
I think I figured out the last bit for this particular lesson example. Granted it’s not explained clearly what to do in order to “test” greeting_limits, the idea I think is for us to get accustomed to trial and error. The code I have which seems to work is below.
#!/bin/bash
first_greeting=“Nice to meet you!”
later_greeting=“How are you?”
greeting_occasion=0
echo “How many times should I greet?”
read greeting_limit
while [ $greeting_occasion -lt $greeting_limit ]
do
if [ $greeting_occasion -lt 1 ]
then
echo $first_greeting
else
echo later_greeting
    fi
    greeting_occasion=((greeting_occasion + 1))
done
When you run the script, you will be prompted the question
$ ./script.sh
How many times should I greet?
You actually need to enter a number into the terminal immediately after this question, then hit enter. When I enter 3 into the terminal, I get the following.
$ ./script.sh
How many times should I greet?
3
Nice to meet you!
How are you?
How are you?
I ran the script again and instead inserted 4 after the question and got the following.
$ ./script.sh
How many times should I greet?
4
Nice to meet you!
How are you?
How are you?
How are you?
I hope this clears everything up. While I do support a trial and error type of learning, I think there should be more clarity for people that are completely new to coding so we’re pushed in the right direction.
All the best!




 booga:

read greeting_limt


Try this:
#!/bin/bash
first_greeting=“Nice to meet you!”
later_greeting=“How are you?”
greeting_occasion=0
echo “How many times should I greet?”
read greeting_limit
while [ $greeting_occasion -lt $greeting_limit ]
do
if [ $greeting_occasion -lt 1 ]
then
echo $first_greeting
else
echo later_greeting
  fi
  greeting_occasion=((greeting_occasion + 1))
done

this worked
#!/bin/bash
first_greeting=“Nice to meet you!”
later_greeting=“How are you?”
greeting_occasion=0
echo “How many times should I greet?”
read greeting_limit
while [ $greeting_occasion -lt $greeting_limit ]
do
if [ $greeting_occasion -lt 1 ]
then
echo $first_greeting
else
echo later_greeting
  fi
  greeting_occasion=((greeting_occasion + 1))
done

Hi @booga, I have found that rewriting the script removes these errors. I have had similar error issues, where, my code appears to be correct, and it will only work after i re-type it out.

This is only the most important part of bash scripting (importing data). Hope they fix eventually after reading these comments.

Just awful. Even more awful than the previous lesson.
"
54,FAQ: Environment - Aliases I,"Get Help,Git",,9,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Aliases I” exercise from the lesson “Environment”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Web Development
Learn the Command Line
FAQs on the exercise Aliases I


How helpful could aliases be?

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
I can’t get pass question 2, anyone with the same issue. It seems that I’m not saving the file proprelly.

Same here, won’t progress.  I’m wondering if it’s because Chrome opens a pop-up “Open” window when I use Ctrl-O which is upsetting CodeAcademy.

was anyone able to solve this. I had the same issue. Couldnt get past step 2

I managed to get past it - although it states to put the alias beneath the previous alias, it will only progress if the alias in Q2 is the only line.

I tried that and it still won’t progress for me 

I disabled short cut keys for my laptop which stopped the window coming up. But I still wasn’t able to pass the step. Then I saved, exited and cleared and that moved me on. Not sure why but at least it’s done!

Cant pass the second step … codecademy is not marking my progress @mtf pls review the lesson

I can confirm you can pass the 2nd step if you will:
1.remove all previous lines from nano, and write alias hy=“history”  as only line


exit nano (ctrl + o)


clear bash


enter nano again - the only line will appear - it should mark step 2 as finished.



Tip: If you will have similar problems with step 3. try to copy-paste the alias code instead of retyping it
Also as we are removing the previous alias to proceed - in pre-final step the ‘‘hy’’ alias won’t work as history command
"
55,FAQ: Redirection - sort,"Get Help,Git",,6,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “sort” exercise from the lesson “Redirection”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Web Development
Learn the Command Line
FAQs on the exercise sort


We are introduced to the sort function here. Can we use sort for sorting input not separated by newlines?

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
to sort the lakes.txt information and redirected into sorted-lakes, the lesson wrote:
$ cat lakes.txt | sort > sorted-lakes.txt
but could I write $ sort lakes.txt > sorted-lakes.txt?
the result seems like the same, but is it right to write this way?

What is the differences between:
sort desserts.txt | uniq > uniq-desserts.txt
cat desserts.txt | sort | uniq > uniq-desserts.txt
cat desserts.txt | uniq | sort > uniq-desserts.txt
The last one doesnt out put the result with uniq effect. why?

interested in the answer to this question as well!

i had the same question! is there a difference between the two lines?

I had this same question. Seems like extra steps.
"
56,FAQ: Learn Secondary Navigation - Summary,"Get Help,Git",,1,"

This community-built FAQ covers the “Summary” exercise from the lesson “Learn Secondary Navigation”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Navigation Design
FAQs on the exercise Summary


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
",
57,"FAQ: Manipulation - ls, revisited","Get Help,Git",,1,"

This community-built FAQ covers the “ls, revisited” exercise from the lesson “Manipulation”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Web Development
Learn the Command Line
FAQs on the exercise ls, revisited


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
",
58,FAQ: Environment - Aliases II,"Get Help,Git",,1,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Aliases II” exercise from the lesson “Environment”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Web Development
Learn the Command Line
FAQs on the exercise Aliases II


What’s the difference between storing aliases and environment variables?

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
",
59,FAQ: Environment - PS1,"Get Help,Git",,1,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “PS1” exercise from the lesson “Environment”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Web Development
Learn the Command Line
FAQs on the exercise PS1


What is the purpose of the command prompt PS1? 

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
",
60,FAQ: Environment - HOME,"Get Help,Git",,1,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “HOME” exercise from the lesson “Environment”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Web Development
Learn the Command Line
FAQs on the exercise HOME


In which situation would we change the HOME variable?

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
",
61,FAQ: Environment - env,"Get Help,Git",,1,"

This community-built FAQ covers the “env” exercise from the lesson “Environment”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Web Development
Learn the Command Line
FAQs on the exercise env


If I use the env command, do I get to see any environment variables I created?

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
",
62,FAQ: Environment - Generalizations,"Get Help,Git",,1,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Generalizations” exercise from the lesson “Environment”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Web Development
Learn the Command Line
FAQs on the exercise Generalizations


Is it necessary to customize the environment if I work with the command line?

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
",
63,FAQ: Redirection - >,"Get Help,Git",,1,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “>” exercise from the lesson “Redirection”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Web Development
Learn the Command Line
FAQs on the exercise >


What is another common use for > (the output redirection operation) ?

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
",
64,FAQ: Redirection - >>,"Get Help,Git",,2,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “>>” exercise from the lesson “Redirection”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Web Development
Learn the Command Line
FAQs on the exercise >>


How do we benefit from using the >> operation?

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
I’m currently working through the Learn the Command prompt course and have a question.
cat rivers.txt & cat < rivers.txt give exactly the same output on the terminal.
What is the difference in commands and why would I use cat rivers.txt?
Thank you in advance!
"
65,FAQ: Redirection - uniq,"Get Help,Git",,1,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “uniq” exercise from the lesson “Redirection”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Web Development
Learn the Command Line
FAQs on the exercise uniq


We learn in this lesson that in producing the unique entries in a file, uniq will only compare lines which are adjacent and so it is best used along with sort . Why doesn’t uniq actually return unique entries or simply call sort on our behalf?

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
",
66,FAQ: Redirection - grep II,"Get Help,Git",,1,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “grep II” exercise from the lesson “Redirection”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Web Development
Learn the Command Line
FAQs on the exercise grep II


What are useful arguments that we can pass to `grep`?

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
",
67,FAQ: Redirection - Generalizations,"Get Help,Git",,1,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Generalizations” exercise from the lesson “Redirection”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Web Development
Learn the Command Line
FAQs on the exercise Generalizations


How can we put our knowledge of command line redirection into practice?

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
",
68,FAQ: Redirection - Your first redirect,"Get Help,Git",,2,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Your first redirect” exercise from the lesson “Redirection”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Web Development
Learn the Command Line
FAQs on the exercise Your first redirect


Here we’re told that ls -l shows us the file system that we’re working with. In the first exercise, we’re also shown the filesystem containing much less information than this command shows. What is this extra information that we are seeing?

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
What’s the windows CMD prompt equivalent to the cat command? When I attempt to use it on my computer it says it isn’t recognized.
"
69,FAQ: Navigation - mkdir,"Get Help,Git",,12,"

This community-built FAQ covers the “mkdir” exercise from the lesson “Navigation”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Web Development Computer Science
Learn the Command Line
FAQs on the exercise mkdir


Why does this step not pass even if I’m in the right directory?

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
Hi! Does anybody understand from the instructions how to see the file directory using pwd after you created a new directory or file? The instructions say that after creating it you should see it using pwd but the only thing I see is the directory from before like cd /home/ccuser/workspace/blog/2014/dec - yet when I try to create the file or directory again, I get an error message that says: “file/directory already exists” so clearly it has been created. Did I miss sth?

pwd gives you the current working directory, it doesn’t show you the files or directories in the current working directory

thanks! just found out what was wrong. I needed to navigate to the media directory with ‘cd’ first in order to see what was in there and that it is there (now my mistake is obvious). I think this should be defined a bit more clearly in the instructions though. If you are new to this whole stuff it can get super confusing as you are not used to navigating in this way.

I’m still confused though. If the instructions ask for “list all files… from the current directory” I expect a command to get a list of all files. But we haven’t had this instruction yet? I can’t use pwd for this because it will just show me the current directory I am in. Not a list of files included.


the command to list files within a directory surely has been taught? Otherwise, maybe you can google? Google is you friend, using google and learning to read documentation is a good idea
maybe the exercise only validates the navigation/changing directory?

I think this part of the cmd tutorial fails to teach how to return back to 2014 and expects people to google so here’s a good site to refer to:

https://stackoverflow.com/questions/15214486/command-to-list-all-files-in-a-folder-as-well-as-sub-folders-in-windows
Otherwise, just reset the code and utilize the solution and go directly to cd 2014. Sometimes it’s not worth it to waste an hour learning what you would know just by checking the syntax 5 hours into a subject (takes 10 seconds) then.

Summary of generalizations covered


pwd  outputs the name of the current working directory.

ls  lists all files and directories in the working directory.

cd  switches you into the directory you specify.

mkdir  creates a new directory in the working directory.

touch  creates a new file inside the working directory.


You can use ls to list all files in your working directory.
pwd refers to print working directory which means it will show you in which directory you are.

Just want to say that using the command $ cd ../../2014/dec/ should be valid. I end up in the correct wd but the test says I failed and need to list the whole file name.

In the exercise typing “cd 2014/dec/” should not work and gives “no such file or directory” error, but the steps automatically checks out when I type it.

Hi. The first task of the lesson was to navigate to 2014/dec directory. At the beginning of the lesson I was at the 2015/feb directory, so by typing cd ../../2014/dec I’ve got right to the directory required. But the lesson scenario insisted that I shoud specify the full path to the file and though I was at the right directory considered my actions erroneous.

Hello @4292056471. Welcome to the forum. There are many, many alternate solutions to almost every exercise in every lesson in every course on Codecademy. Usually when the directions are specific, we have to comply in order to move on. It’s just part of the experience. Learn what you can from it, and move on. After passing a step, you can always go back, and experiment with alternate solutions. Happy coding!
"
70,FAQ: Redirection - Redirection,"Get Help,Git",,5,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Redirection” exercise from the lesson “Redirection”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Web Development
Learn the Command Line
FAQs on the exercise Redirection


How do we practically utilize the echo command?

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
I am new to coding and absolutely love it! But I am stuck.
In Learn the Command Line: Redirection or any part of section 3 for that matter, When I go to Get Help, and ask for code solution and it gives it to me, it checks the boxes but it does not show me anything on my screen, no code, just blank screen! How do I know where I went wrong if there is nothing showing?

The very first part of lesson 3 does not work. It ask the user to type, echo “hello” after the shell prompt.
I have tried typing echo hello, and echo “hello”, and neither one will allow me to go on to the next step. It prints hello on the screen as expected, but it tells me to do it again every time I do it. There’s no way to progress to the next step.
I’m using Firefox 68.0.2 on Fedora 30 Linux. I have all content blocking disabled in my browser.

I am also having the same issue… Is there a place where someone answered this question?

It’s because you are most likely typing in “hello” not “Hello”. You need to capitalize the “H” for it to work. I was getting caught up on it and that solved it for me.
"
71,FAQ: Navigation - ls,"Get Help,Git",,2,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “ls” exercise from the lesson “Navigation”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Web Development Computer Science
Learn the Command Line
FAQs on the exercise ls


Why Is Command Line Navigation Useful?

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
I really don’t see the benefit of learning commands for a system I don’t use, and will frankly will never use. It will do nothing but confuse me. Annoyed, mostly because I’m paying quite a bit of money to now learn something I will just won’t use. Ever. How much effort would it really take for tutors to provide a short course in command line for Windows? It’s not as if there are dozens of other command consoles to provide tutelage for. Pretty disappointed. I came here to learn. How is this going to be useful for me?
"
72,FAQ: Environment - PATH,"Get Help,Git",,4,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “PATH” exercise from the lesson “Environment”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Web Development
Learn the Command Line
FAQs on the exercise PATH


What does the | and grep commands do?

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
Where are environment variables HOME, PATH etc… initially defined ?

When I add a new entry to bash_profile and source it, the new alias takes effect. However, on removing this  entry, saving it and source-ing the bash_profile again, the alias still persist. why is that ?

If you manually type in the things from your bash_profile, would you expect the alias to disappear? Probably not, because none of the commands were to remove it.
On the other hand, if you start bash and don’t define it, then it won’t be there.
"
73,FAQ: Manipulation - ls -a,"Get Help,Git",,6,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “ls -a” exercise from the lesson “Manipulation”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Web Development
Learn the Command Line
FAQs on the exercise ls -a


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
What do the “.” and “. .” mean in the returned information from “ls -a”?

$ ls
action  comedy  drama  genres.txt
$ ls -a
. ..  .preferences  action  comedy  drama  genres.txt
$


They are directories. The single dot is the current directory, the double dot is the parent directory. The single dot prefixing the file name, preferences refers to a hidden file.

I can’t understand what it current directory and parent directory. For example what are those directories for “comedy” directory? If a ls -a shows both(parent and current) links for each file, how can genres.txt or hidden .prefferences have only one link each?

$ pwd
/home/ccuser/workspace/movies
$ ls
action  comedy  drama  genres.txt
$ ls -a
. ..  .preferences  action  comedy  drama  genres.txt
$

PWD is Present Working Directory… movies is the parent directory (the one that DOT refers to).
action comedy drama are all directories. .preferences is a hidden file in the current directory. genres.txt is a text file in the current directory.

Thank you, now it’s clear! The course encourage (or even provokes) to go faster but then…
"
74,Why Is Command Line Navigation Useful?,"Get Help,Git",,2,"
Question
What makes commands like ‘ls’ useful to a developer?
Answer
While it’s not immediately obvious why such a tool is useful, it certainly becomes clear with experience in the field! Among other things, it’s great being able to quickly manipulate files and view information about your current directory, and saves a lot of time.
Development environments typically have terminals built into them, as well, so you never have to leave your productivity zone to get the info you need, or move and create files, or run programs.
In short, the command line makes it much easier to quickly accomplish what might take a lot of time and effort to do with a graphical interface like file explorers. Also, most tools you’ll use as a developer give command line commands to install and use them, making it all the more important to know your way around the terminal.
","
"
75,In which situation would we change the HOME variable?,"Get Help,Git",,1,"
Question
In which situation would we change the HOME variable?
Answer
On a regular basis, there are no many occasions when we will find the need to change the value of $HOME, by default it’s value will be the main directory of the user created in the computer, for example, if I had a user account under ak then my home directory would be /Users/ak/, but a wild situation in which we would want to change the value of the variable might be if we are completely personalizing our machine, and getting rid of users, then if it is just us, we would want to create an origin point directory which we can then set as our home, another reason could be that by preference we would like to have a directory further in than our user one to be home, let’s say in my case I can say: /Users/ak/main/home
where main only contains the now home directory.
",
76,Is it necessary to customize the environment if I work with the command line?,"Get Help,Git",,1,"
Question
Is it necessary to customize the environment if I work with the command line?
Answer
It is not necessary to adjust anything on our computer’s environment if we want to work with the command line, or if we often use the command line in our working process, yet we will start noticing as we interact more and more with the command line that we might start needing certain shortcuts, commands that might be helpful to us but do not quite exist, or certain data easily available on variables, so at some point it will probably be unavoidable that we will want to customize certain things in our environment.
",
77,How can we put our knowledge of command line redirection into practice?,"Get Help,Git",,1,"
Question
In the lessons on command line redirection, we learned about many functions and operators to chain together to perform progressively more complex tasks. How should we go about effectively using this knowledge in our day-to-day applications?
Answer
To use an analogy, if command line functions are like LEGO pieces, then redirection operators are the various ways that you can connect the pieces. In this way, redirection is crucial to effective use of the command line but as with LEGO, the amount of freedom can be mystifying.
As a result, I may recommend gradually introducing command line use into your daily workflow to solve common problems that come up. Given that command line interfaces and utilities (i.e. functions) have been around for decades, you can be sure that if you have a problem, the command line can solve it using some combination of functions. Let’s take a simple example. Let’s say that I have written a program but now would like to make some changes to variable names. For simplicity, let’s say that I want to change every occurrence of myVar to my_var in a program called prog.c and save it to progNew.c. This can simply be done by opening our editor and running a search a place and then saving. But this can also be done without manually opening the file at all with the following
$ sed -i ""s/myVar/my_var/g"" prog.c > progNew.c

Such simple applications of the command line and redirection is an easy way to gain confidence and familiarity with its real-world applications.
Beyond this, I cannot recommend highly enough that you read the man pages (manual) for the functions when you’re looking to gain a deeper understanding of how they work. You can find this by searching ""man page for "".
",
78,FAQ: Redirection - sed,"Get Help,Git",,5,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “sed” exercise from the lesson “Redirection”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Web Development
Learn the Command Line
FAQs on the exercise sed


How should we use sed?

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
It’s sort of a broad and subjective criticism, but I can’t say I’m a fan of the structure of this particular lesson.
The way we get instructed through an exercise and then the beginning text of the next exercise is used to explain what we were doing and why previously just felt a little obtuse to me. Going forward in this course, I’m hoping things are further reiterated or I will surely feel the need to go back and complete the lesson again.
Just my two cents, and thought the final exercise would be the most relevant place to put the comment that I could find.
Having been jumping around different courses and paths based on recommendations, these lessons stood out, and at least for me personally were not nearly as effective as others I’ve undertaken to this point.

$ sed ‘s/snow/rain/g’ forests.txt
The Amazon rainforest
The Congo rainforest
Valdivian Temperate rainforest
Daintree rainforest
Southeast Asian rainforest rainforest
Tongrass National forest
Sinharaja Forest Reserve
Pacific Temperate rainforest rainforest
$ sed ‘s/rain/snow/’ forests.txt
The Amazon snowforest
The Congo snowforest
Valdivian Temperate snowforest
Daintree snowforest
Southeast Asian snowforest snowforest
Tongrass National forest
Sinharaja Forest Reserve
Pacific Temperate snowforest snowforest
Why does not using g here still result in all instances in each line being replaced?  I thought g replaced all instances while not using g replaced only the first instance in each line.


all instances

You could say that if your input had zero instances, similarly, you don’t have enough instances per line that there is a difference.

@ charlief0xxtrot: because sed isn’t actually permanently changing the content of your file in this instance. After the initial output, the file remains untouched. To modify the behavior of sed to actually change what you edit, you’d add the option “-i”.
"
79,FAQ: Navigation - Generalizations,"Get Help,Git",,13,"

This community-built FAQ covers the “Generalizations” exercise from the lesson “Navigation”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Web Development Computer Science
Learn the Command Line
FAQs on the exercise Generalizations


What should I learn after this basic command line introduction?

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
I’m having trouble writing the command that will allow me to navigate through directories to 2014/dec/ in the second section first lesson titled “Navigation” I’ve tried cd 2014/dec/ and cd … 2014/dec/. What would the correct command be to navigate to the directory? Thank you for the help.

At the command prompt, type,
pwd
The path should include,
/home/ccuser/workspace/blog

If we list the contents of the blog directory,
ls

2014 2015 hardware.txt

Two of those entries are directories, 2014 and 2015. Which one are you inside of?

What is the difference between a “file” and a “directory.”

A file is a singular object, usually text, but it could also be media or data. A directory is a branch on a tree containing multiple files and/or other directories.

This happened to me yesterday as well, I found that I was in 2015 directory and was trying to use
cd 2014/dec
The problem with that is that 2014 directory isn’t a child directory of 2015, which means we need to go one level up using:
cd ..
Always use ‘pwd’ to know where you are. And take a look at the file tree structure to see where you are and where you need to go:

What is the difference of the mkdir command and the touch command




 ganoes13:

difference of the mkdir command and the touch command


mkdir creates a new directory folder.
touch creates a new empty file.
Quite a lot of difference when we think about it.

What is the command to delete a directory folder if I accidentally created the wrong one?

Assuming the directory is still emty, rmdir will work.

Thanks, @mtf !
What if the directory is not empty? Should we delete the files first? How to do that in CLI?

To remove files use rm.
$ rm filename

If there are multiple files, then separate the filenames with a space.
$ rm file1 file2 file3

If files have the same extension you can use a wildcard.
$ rm *.txt

Thank you, @mtf! I’ll try these commands.
"
80,FAQ: Environment - Environment,"Get Help,Git",,5,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Environment” exercise from the lesson “Environment”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Web Development
Learn the Command Line
FAQs on the exercise Environment


Why would I want to use nano?

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
If I want to update a word document from the command line, how can I do it?
I get only hieroglyphics.

A Word document is a bit much to be editing from the command line. If we were to access the wrapping XML document using plain text you could feasibly edit the document content, but who would ever try to do that? And how would we access the wrapper, to begin with?
Then again, who knows? If we have a Word document, then it follows we have Word on our machine. .docx opens in Word on a single click.

Alright, and how about a PDF document?, I mean, it would be easier to just open the terminal and modify it instead of opening word, wait for it to load, open the document, modify it and save it again.

Those two mediums are heavily proprietary. MS with its XML wrapper, PDF with its POSTSCRIPT wrapper. They are recognized document formats because of all they have invested in making theirs the de facto in each respect. The least we can do is use their software to manipulate the documents.
"
81,FAQ: Navigation - touch,"Get Help,Git",,6,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “touch” exercise from the lesson “Navigation”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Web Development Computer Science
Learn the Command Line
FAQs on the exercise touch


How can I use these commands on a Windows computer?

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
Hello, I have Windows 10 and I’m trying to use Windows PowerShell for the navigation requested in the course. Everything was working up until the Touch command.
So i was wondering, is PowerShell efficient for using the tools in this course? Or is there a better program i should use?

“touch” does not seem intuitive to me as a command for making a new file.  How did it come about?

Hi there. What is the difference between mkdir and touch?

Hi, Welcome to the forums 
touch is used to create plain files and  mkdir  to create directories.

What is the purpose of argument? I can’t understand the background of it or what is the function of the word. Thanks
"
82,FAQ: Navigation - pwd,"Get Help,Git",,9,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “pwd” exercise from the lesson “Navigation”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Web Development Computer Science
Learn the Command Line
FAQs on the exercise pwd


What does it mean to ‘list all files and directories’?

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","

11173×728 38.9 KB

What should I do to go next step? Thanks, in advance.

@discobot I am not able to go to next step =( Can you help me?

Hi! To find out what I can do, say @discobot display help.

@discobot display help

I currently know how to do the following things:
@discobot start {name-of-tutorial}

Starts an interactive tutorial. {name-of-tutorial} can be one of: New User, advanced tutorial.

@discobot roll 2d6

 3, 6

@discobot quote

 If you want a thing done well, do it yourself. — Napoleon Bonaparte

@discobot fortune

 You may rely on it


{Command line for building websites}

@discobot start {Command line for building websites}

@discobot start {navigation}
"
83,FAQ: Navigation - cd I,"Get Help,Git",,11,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “cd I” exercise from the lesson “Navigation”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Web Development Computer Science
Learn the Command Line
FAQs on the exercise cd I


What do I do if I can’t navigate to a certain directory?

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
I don’t get why when I type cd .. nothing happens. Why is the return blank? What is the significance of that step?

cd means Change Directory, .. is for the parent directory. so on the left hand side, the directory should have changes (you could verify with pwd)

Do I need the forward slash at the end of  $cd jan/memory/ ?
It looks like like I’m getting the same result with $cd jan/memory .
Is there a reason why I should use the last forward slash?
Also is anyone else having problems selecting and copying the command line codes from the codecademy terminal?
Thank you.

what does the instruction “Print the working directory again to see the new location.”  I literally have no idea what that means, but seem to be progressing through the checkboxes without it.

Do you currently know what the working directory is? You could verify this with a command, that is what the exercise asks

Completely missed the fact that it was referring to the PWD command. DUH!!! Thanks!

Hi, how does argument work? I can’t understand what is it’s purpose.

well, cd (change directory) is a program, which can take arguments. In this case, the argument will the directory you wish to visit

So for example, if I’m in /home/ccuser/workspace/blog/2015/feb then to go to /home/ccuser/workspace/blog/2015/jan I have to use cd …/jan, right? cd directory_name only takes me down one of the directories present in the directory I’m currently in?

Well, absolute right. .. is parent directory.
"
84,"If I use the env command, do I get to see any environment variables I created?","Get Help,Git",,3,"
Question
If I use the env command, do I get to see any environment variables I created?
Answer
That is correct, the environment command will return all the environment variables that it contains, and that counts the ones that we have created either by writing in the .bash_profile or using the export command which gets a value: name and value of the variable, ie.: export L=""ls -l"" now when we can use it to get a long list of files from the directory (we need to make sure the value is in string form).
At the end of the day, the environment is made of environment variables, which get defined as our computer runs its necessary command when it boots up.
","
I’d like to add:

if I created my environment variables “$ nano ~/.bash_profile” with:


#!/bin/bash
export TOM=“I learn Shell Scripting.”
export JOB=“It is essential for Programming.”


and for current session I execute shell command “$ source ~/.bash_profile”
only then I can see my created environmental variables TOM and JOB with “$ env”

Note: If i didn’t execute "" source ~/.bash_profile"" before "" env"" I won’t see them!!!

Yeah, you are right and also we can add environment variable and alias directly in the terminal without even creating a bash script like the following -
h1manshu@asus:~ $ export VAR=""a simple variable""
h1manshu@asus:~ $ env | grep VAR
VAR=a simple variable
"
85,What does it mean to 'list all files and directories'?,"Get Help,Git",,5,"
Question
This exercise asks us to ‘list all files and directories in the working directory.’ What does that mean?
Answer
So far, we’ve learned how to use two key commands: ls and pwd. If we use ls, it’ll show all files and directories in the directory you’re currently in – also known as the ‘working directory.’
By default, the ls command will display all directories (folders), files, programs, etc. Specifically, all the directories and files that aren’t hidden. To include hidden stuff, we can do ls -a, and anything you see prefaced with a period is a hidden file, like .bashrc.
","
What are hidden files and stuff?

All the files and directories which names starts with . are not listed out when you use ls command without additional options and that files and directories are called hidden. Hidden files and directories are commonly used for purposes of storing configuration information.

why not include this command in lesson with example?? Is this info necessary?

My guess is that the purpose of this course is to introduce and give one an overarching view of the tools available for command line and discuss its purpose.
"
